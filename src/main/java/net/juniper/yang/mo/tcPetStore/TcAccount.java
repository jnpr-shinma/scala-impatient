/* 
 * @(#)TcAccount.java        1.0 12/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tc-pet-store", revision: "2014-12-25".
 */

package net.juniper.yang.mo.tcPetStore;

import com.tailf.jnc.*;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;
import net.juniper.yang.mo.tcPetStore.tcAccount.IdPerms;
import net.juniper.yang.mo.tcPetStore.tcAccount.Signnos;

/**
 * This class represents an element from 
 * the namespace http://www.juniper.net/ns/testcase-pet-store
 * generated to "/home/maxin/myworkspace/js-easy-rest/easy-rest-orm/target/scala-2.11/src_managed/main/net/juniper/yang/mo/tcPetStore/tc-account"
 * <p>
 * See line 49 in
 * /home/maxin/myworkspace/js-easy-rest/easy-rest-orm/src/main/resources/yang/tc-pet-store.yang
 *
 * @version 1.0 2015-01-12
 * @author Auto Generated
 */
public class TcAccount extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("tc-account");

    static {
        PetStoreTestcase.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty TcAccount object.
     */
    public TcAccount() {
        super(PetStoreTestcase.NAMESPACE, "tc-account");
        setDefaultPrefix();
        setPrefix(PetStoreTestcase.PREFIX);
    }

    /**
     * Constructor for an initialized TcAccount object,
     * 
     * @param uuidValue Key argument of child.
     */
    public TcAccount(Uuid uuidValue) throws JNCException {
        super(PetStoreTestcase.NAMESPACE, "tc-account");
        setDefaultPrefix();
        setPrefix(PetStoreTestcase.PREFIX);
        Leaf uuid = new Leaf(PetStoreTestcase.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized TcAccount object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public TcAccount(String uuidValue) throws JNCException {
        super(PetStoreTestcase.NAMESPACE, "tc-account");
        setDefaultPrefix();
        setPrefix(PetStoreTestcase.PREFIX);
        Leaf uuid = new Leaf(PetStoreTestcase.NAMESPACE, "uuid");
        uuid.setValue(new net.juniper.yang.mo.ietfYangTypes.Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public TcAccount clone() {
        TcAccount copy;
        try {
            copy = new TcAccount(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (TcAccount)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public TcAccount cloneShallow() {
        TcAccount copy;
        try {
            copy = new TcAccount(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (TcAccount)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "email",
            "firstname",
            "lastname",
            "addr",
            "phone",
            "signnos",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "email". */

    /**
     * Gets the value for child leaf "email".
     * @return The value of the leaf.
     */
    public YangString getEmailValue() throws JNCException {
        return (YangString)getValue("email");
    }

    /**
     * Sets the value for child leaf "email",
     * using instance of generated typedef class.
     * @param emailValue The value to set.
     * @param emailValue used during instantiation.
     */
    public void setEmailValue(YangString emailValue) throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "email",
            emailValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "email",
     * using a String value.
     * @param emailValue used during instantiation.
     */
    public void setEmailValue(String emailValue) throws JNCException {
        setEmailValue(new YangString(emailValue));
    }

    /**
     * Unsets the value for child leaf "email".
     */
    public void unsetEmailValue() throws JNCException {
        delete("email");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "email" leaf will not have a value.
     */
    public void addEmail() throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "email",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "email" with operation "replace".
     */
    public void markEmailReplace() throws JNCException {
        markLeafReplace("email");
    }

    /**
     * Marks the leaf "email" with operation "merge".
     */
    public void markEmailMerge() throws JNCException {
        markLeafMerge("email");
    }

    /**
     * Marks the leaf "email" with operation "create".
     */
    public void markEmailCreate() throws JNCException {
        markLeafCreate("email");
    }

    /**
     * Marks the leaf "email" with operation "delete".
     */
    public void markEmailDelete() throws JNCException {
        markLeafDelete("email");
    }

    /* Access methods for optional leaf child: "firstname". */

    /**
     * Gets the value for child leaf "firstname".
     * @return The value of the leaf.
     */
    public YangString getFirstnameValue() throws JNCException {
        return (YangString)getValue("firstname");
    }

    /**
     * Sets the value for child leaf "firstname",
     * using instance of generated typedef class.
     * @param firstnameValue The value to set.
     * @param firstnameValue used during instantiation.
     */
    public void setFirstnameValue(YangString firstnameValue)
            throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "firstname",
            firstnameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "firstname",
     * using a String value.
     * @param firstnameValue used during instantiation.
     */
    public void setFirstnameValue(String firstnameValue) throws JNCException {
        setFirstnameValue(new YangString(firstnameValue));
    }

    /**
     * Unsets the value for child leaf "firstname".
     */
    public void unsetFirstnameValue() throws JNCException {
        delete("firstname");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "firstname" leaf will not have a value.
     */
    public void addFirstname() throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "firstname",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "firstname" with operation "replace".
     */
    public void markFirstnameReplace() throws JNCException {
        markLeafReplace("firstname");
    }

    /**
     * Marks the leaf "firstname" with operation "merge".
     */
    public void markFirstnameMerge() throws JNCException {
        markLeafMerge("firstname");
    }

    /**
     * Marks the leaf "firstname" with operation "create".
     */
    public void markFirstnameCreate() throws JNCException {
        markLeafCreate("firstname");
    }

    /**
     * Marks the leaf "firstname" with operation "delete".
     */
    public void markFirstnameDelete() throws JNCException {
        markLeafDelete("firstname");
    }

    /* Access methods for optional leaf child: "lastname". */

    /**
     * Gets the value for child leaf "lastname".
     * @return The value of the leaf.
     */
    public YangString getLastnameValue() throws JNCException {
        return (YangString)getValue("lastname");
    }

    /**
     * Sets the value for child leaf "lastname",
     * using instance of generated typedef class.
     * @param lastnameValue The value to set.
     * @param lastnameValue used during instantiation.
     */
    public void setLastnameValue(YangString lastnameValue) throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "lastname",
            lastnameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lastname",
     * using a String value.
     * @param lastnameValue used during instantiation.
     */
    public void setLastnameValue(String lastnameValue) throws JNCException {
        setLastnameValue(new YangString(lastnameValue));
    }

    /**
     * Unsets the value for child leaf "lastname".
     */
    public void unsetLastnameValue() throws JNCException {
        delete("lastname");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lastname" leaf will not have a value.
     */
    public void addLastname() throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "lastname",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lastname" with operation "replace".
     */
    public void markLastnameReplace() throws JNCException {
        markLeafReplace("lastname");
    }

    /**
     * Marks the leaf "lastname" with operation "merge".
     */
    public void markLastnameMerge() throws JNCException {
        markLeafMerge("lastname");
    }

    /**
     * Marks the leaf "lastname" with operation "create".
     */
    public void markLastnameCreate() throws JNCException {
        markLeafCreate("lastname");
    }

    /**
     * Marks the leaf "lastname" with operation "delete".
     */
    public void markLastnameDelete() throws JNCException {
        markLeafDelete("lastname");
    }

    /* Access methods for optional leaf child: "addr". */

    /**
     * Gets the value for child leaf "addr".
     * @return The value of the leaf.
     */
    public YangString getAddrValue() throws JNCException {
        return (YangString)getValue("addr");
    }

    /**
     * Sets the value for child leaf "addr",
     * using instance of generated typedef class.
     * @param addrValue The value to set.
     * @param addrValue used during instantiation.
     */
    public void setAddrValue(YangString addrValue) throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "addr",
            addrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "addr",
     * using a String value.
     * @param addrValue used during instantiation.
     */
    public void setAddrValue(String addrValue) throws JNCException {
        setAddrValue(new YangString(addrValue));
    }

    /**
     * Unsets the value for child leaf "addr".
     */
    public void unsetAddrValue() throws JNCException {
        delete("addr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "addr" leaf will not have a value.
     */
    public void addAddr() throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "addr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "addr" with operation "replace".
     */
    public void markAddrReplace() throws JNCException {
        markLeafReplace("addr");
    }

    /**
     * Marks the leaf "addr" with operation "merge".
     */
    public void markAddrMerge() throws JNCException {
        markLeafMerge("addr");
    }

    /**
     * Marks the leaf "addr" with operation "create".
     */
    public void markAddrCreate() throws JNCException {
        markLeafCreate("addr");
    }

    /**
     * Marks the leaf "addr" with operation "delete".
     */
    public void markAddrDelete() throws JNCException {
        markLeafDelete("addr");
    }

    /* Access methods for optional leaf child: "phone". */

    /**
     * Gets the value for child leaf "phone".
     * @return The value of the leaf.
     */
    public YangString getPhoneValue() throws JNCException {
        return (YangString)getValue("phone");
    }

    /**
     * Sets the value for child leaf "phone",
     * using instance of generated typedef class.
     * @param phoneValue The value to set.
     * @param phoneValue used during instantiation.
     */
    public void setPhoneValue(YangString phoneValue) throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "phone",
            phoneValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "phone",
     * using a String value.
     * @param phoneValue used during instantiation.
     */
    public void setPhoneValue(String phoneValue) throws JNCException {
        setPhoneValue(new YangString(phoneValue));
    }

    /**
     * Unsets the value for child leaf "phone".
     */
    public void unsetPhoneValue() throws JNCException {
        delete("phone");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "phone" leaf will not have a value.
     */
    public void addPhone() throws JNCException {
        setLeafValue(PetStoreTestcase.NAMESPACE,
            "phone",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "phone" with operation "replace".
     */
    public void markPhoneReplace() throws JNCException {
        markLeafReplace("phone");
    }

    /**
     * Marks the leaf "phone" with operation "merge".
     */
    public void markPhoneMerge() throws JNCException {
        markLeafMerge("phone");
    }

    /**
     * Marks the leaf "phone" with operation "create".
     */
    public void markPhoneCreate() throws JNCException {
        markLeafCreate("phone");
    }

    /**
     * Marks the leaf "phone" with operation "delete".
     */
    public void markPhoneDelete() throws JNCException {
        markLeafDelete("phone");
    }

    /* Access methods for list child: "signnos". */

    /**
     * Gets list entry "signnos", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public Signnos getSignnos(Uuid uuidValue) throws JNCException {
        String path = "signnos[uuid='" + uuidValue + "']";
        return (Signnos)searchOne(path);
    }

    /**
     * Gets list entry "signnos", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public Signnos getSignnos(String uuidValue) throws JNCException {
        String path = "signnos[uuid='" + uuidValue + "']";
        return (Signnos)searchOne(path);
    }

    /**
     * Iterator method for the list "signnos".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator signnosIterator() {
        return new ElementChildrenIterator(children, "signnos");
    }

    /**
     * Adds list entry "signnos", using an existing object.
     * @param signnos The object to add.
     * @return The added child.
     */
    public Signnos addSignnos(Signnos signnos) throws JNCException {
        insertChild(signnos, childrenNames());
        return signnos;
    }

    /**
     * Adds list entry "signnos", with specified keys.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public Signnos addSignnos(Uuid uuidValue) throws JNCException {
        Signnos signnos = new Signnos(uuidValue);
        return addSignnos(signnos);
    }

    /**
     * Adds list entry "signnos", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public Signnos addSignnos(String uuidValue) throws JNCException {
        Signnos signnos = new Signnos(uuidValue);
        return addSignnos(signnos);
    }

    /**
     * Adds list entry "signnos".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Signnos addSignnos() throws JNCException {
        Signnos signnos = new Signnos();
        insertChild(signnos, childrenNames());
        return signnos;
    }

    /**
     * Deletes list entry "signnos", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public void deleteSignnos(Uuid uuidValue) throws JNCException {
        String path = "signnos[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "signnos", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public void deleteSignnos(String uuidValue) throws JNCException {
        String path = "signnos[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
