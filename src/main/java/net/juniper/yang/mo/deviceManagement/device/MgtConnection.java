/* 
 * @(#)MgtConnection.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement.device;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;

import net.juniper.yang.mo.deviceManagement.AuthEnum;
import net.juniper.yang.mo.deviceManagement.ConnectionStatusEnum;
import net.juniper.yang.mo.deviceManagement.ConnectionTypeEnum;
import net.juniper.yang.mo.deviceManagement.Devicemgt;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/device/mgtConnection"
 * <p>
 * See line 378 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class MgtConnection extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("device/mgtConnection");

    static {
        Devicemgt.enable();
    }

    /**
     * Constructor for an empty MgtConnection object.
     */
    public MgtConnection() {
        super(Devicemgt.NAMESPACE, "mgtConnection");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public MgtConnection clone() {
        return (MgtConnection)cloneContent(new MgtConnection());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public MgtConnection cloneShallow() {
        return (MgtConnection)cloneShallowContent(new MgtConnection());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "type",
            "auth",
            "status",
            "webMgt",
        };
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public ConnectionTypeEnum getTypeValue() throws JNCException {
        return (ConnectionTypeEnum)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using a JNC type value.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(ConnectionTypeEnum typeValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new ConnectionTypeEnum(typeValue));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "auth". */

    /**
     * Gets the value for child leaf "auth".
     * @return The value of the leaf.
     */
    public AuthEnum getAuthValue() throws JNCException {
        return (AuthEnum)getValue("auth");
    }

    /**
     * Sets the value for child leaf "auth",
     * using a JNC type value.
     * @param authValue The value to set.
     * @param authValue used during instantiation.
     */
    public void setAuthValue(AuthEnum authValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "auth",
            authValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "auth",
     * using a String value.
     * @param authValue used during instantiation.
     */
    public void setAuthValue(String authValue) throws JNCException {
        setAuthValue(new AuthEnum(authValue));
    }

    /**
     * Unsets the value for child leaf "auth".
     */
    public void unsetAuthValue() throws JNCException {
        delete("auth");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "auth" leaf will not have a value.
     */
    public void addAuth() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "auth",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "auth" with operation "replace".
     */
    public void markAuthReplace() throws JNCException {
        markLeafReplace("auth");
    }

    /**
     * Marks the leaf "auth" with operation "merge".
     */
    public void markAuthMerge() throws JNCException {
        markLeafMerge("auth");
    }

    /**
     * Marks the leaf "auth" with operation "create".
     */
    public void markAuthCreate() throws JNCException {
        markLeafCreate("auth");
    }

    /**
     * Marks the leaf "auth" with operation "delete".
     */
    public void markAuthDelete() throws JNCException {
        markLeafDelete("auth");
    }

    /* Access methods for optional leaf child: "status". */

    /**
     * Gets the value for child leaf "status".
     * @return The value of the leaf.
     */
    public ConnectionStatusEnum getStatusValue() throws JNCException {
        return (ConnectionStatusEnum)getValue("status");
    }

    /**
     * Sets the value for child leaf "status",
     * using a JNC type value.
     * @param statusValue The value to set.
     * @param statusValue used during instantiation.
     */
    public void setStatusValue(ConnectionStatusEnum statusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "status",
            statusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status",
     * using a String value.
     * @param statusValue used during instantiation.
     */
    public void setStatusValue(String statusValue) throws JNCException {
        setStatusValue(new ConnectionStatusEnum(statusValue));
    }

    /**
     * Unsets the value for child leaf "status".
     */
    public void unsetStatusValue() throws JNCException {
        delete("status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status" leaf will not have a value.
     */
    public void addStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status" with operation "replace".
     */
    public void markStatusReplace() throws JNCException {
        markLeafReplace("status");
    }

    /**
     * Marks the leaf "status" with operation "merge".
     */
    public void markStatusMerge() throws JNCException {
        markLeafMerge("status");
    }

    /**
     * Marks the leaf "status" with operation "create".
     */
    public void markStatusCreate() throws JNCException {
        markLeafCreate("status");
    }

    /**
     * Marks the leaf "status" with operation "delete".
     */
    public void markStatusDelete() throws JNCException {
        markLeafDelete("status");
    }

    /* Access methods for optional leaf child: "webMgt". */

    /**
     * Gets the value for child leaf "webMgt".
     * @return The value of the leaf.
     */
    public YangBoolean getWebMgtValue() throws JNCException {
        return (YangBoolean)getValue("webMgt");
    }

    /**
     * Sets the value for child leaf "webMgt",
     * using instance of generated typedef class.
     * @param webMgtValue The value to set.
     * @param webMgtValue used during instantiation.
     */
    public void setWebMgtValue(YangBoolean webMgtValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "webMgt",
            webMgtValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "webMgt",
     * using Java primitive values.
     * @param webMgtValue used during instantiation.
     */
    public void setWebMgtValue(Boolean webMgtValue) throws JNCException {
        setWebMgtValue(new YangBoolean(webMgtValue));
    }

    /**
     * Sets the value for child leaf "webMgt",
     * using a String value.
     * @param webMgtValue used during instantiation.
     */
    public void setWebMgtValue(String webMgtValue) throws JNCException {
        setWebMgtValue(new YangBoolean(webMgtValue));
    }

    /**
     * Unsets the value for child leaf "webMgt".
     */
    public void unsetWebMgtValue() throws JNCException {
        delete("webMgt");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "webMgt" leaf will not have a value.
     */
    public void addWebMgt() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "webMgt",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "webMgt" with operation "replace".
     */
    public void markWebMgtReplace() throws JNCException {
        markLeafReplace("webMgt");
    }

    /**
     * Marks the leaf "webMgt" with operation "merge".
     */
    public void markWebMgtMerge() throws JNCException {
        markLeafMerge("webMgt");
    }

    /**
     * Marks the leaf "webMgt" with operation "create".
     */
    public void markWebMgtCreate() throws JNCException {
        markLeafCreate("webMgt");
    }

    /**
     * Marks the leaf "webMgt" with operation "delete".
     */
    public void markWebMgtDelete() throws JNCException {
        markLeafDelete("webMgt");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
