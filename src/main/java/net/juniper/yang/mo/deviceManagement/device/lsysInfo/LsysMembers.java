/* 
 * @(#)LsysMembers.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement.device.lsysInfo;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;

import net.juniper.yang.mo.deviceManagement.DeviceIdRef;
import net.juniper.yang.mo.deviceManagement.Devicemgt;
import net.juniper.yang.mo.deviceManagement.device.lsysInfo.lsysMembers.Lsys;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/device/lsysInfo/lsysMembers"
 * <p>
 * See line 300 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class LsysMembers extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("device/lsysInfo/lsysMembers");

    static {
        Devicemgt.enable();
    }

    /**
     * Constructor for an empty LsysMembers object.
     */
    public LsysMembers() {
        super(Devicemgt.NAMESPACE, "lsysMembers");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LsysMembers clone() {
        return (LsysMembers)cloneContent(new LsysMembers());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LsysMembers cloneShallow() {
        return (LsysMembers)cloneShallowContent(new LsysMembers());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "lsys",
        };
    }

    /* Access methods for list child: "lsys". */

    /**
     * Gets list entry "lsys", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public Lsys getLsys(DeviceIdRef uuidValue) throws JNCException {
        String path = "lsys[uuid='" + uuidValue + "']";
        return (Lsys)searchOne(path);
    }

    /**
     * Gets list entry "lsys", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public Lsys getLsys(String uuidValue) throws JNCException {
        String path = "lsys[uuid='" + uuidValue + "']";
        return (Lsys)searchOne(path);
    }

    /**
     * Iterator method for the list "lsys".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator lsysIterator() {
        return new ElementChildrenIterator(children, "lsys");
    }

    /**
     * Adds list entry "lsys", using an existing object.
     * @param lsys The object to add.
     * @return The added child.
     */
    public Lsys addLsys(Lsys lsys) throws JNCException {
        insertChild(lsys, childrenNames());
        return lsys;
    }

    /**
     * Adds list entry "lsys", with specified keys.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public Lsys addLsys(DeviceIdRef uuidValue) throws JNCException {
        Lsys lsys = new Lsys(uuidValue);
        return addLsys(lsys);
    }

    /**
     * Adds list entry "lsys", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public Lsys addLsys(String uuidValue) throws JNCException {
        Lsys lsys = new Lsys(uuidValue);
        return addLsys(lsys);
    }

    /**
     * Adds list entry "lsys".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Lsys addLsys() throws JNCException {
        Lsys lsys = new Lsys();
        insertChild(lsys, childrenNames());
        return lsys;
    }

    /**
     * Deletes list entry "lsys", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public void deleteLsys(DeviceIdRef uuidValue) throws JNCException {
        String path = "lsys[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "lsys", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public void deleteLsys(String uuidValue) throws JNCException {
        String path = "lsys[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
