/* 
 * @(#)Operation.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.yang.mo.deviceManagement.operation.IdPerms;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Timestamp;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/operation"
 * <p>
 * See line 759 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class Operation extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("operation");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty Operation object.
     */
    public Operation() {
        super(Devicemgt.NAMESPACE, "operation");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized Operation object,
     * 
     * @param uuidValue Key argument of child.
     */
    public Operation(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "operation");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized Operation object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public Operation(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "operation");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Operation clone() {
        Operation copy;
        try {
            copy = new Operation(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Operation)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Operation cloneShallow() {
        Operation copy;
        try {
            copy = new Operation(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Operation)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "deployedVersion",
            "enableAutoUpgrade",
            "scriptStatus",
            "scriptName",
            "scriptType",
            "format",
            "latestVersion",
            "lastestMD5",
            "createTime",
            "lastUpdateTime",
            "comments",
            "scriptSize",
            "encodeCompletionStatus",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "deployedVersion". */

    /**
     * Gets the value for child leaf "deployedVersion".
     * @return The value of the leaf.
     */
    public YangString getDeployedVersionValue() throws JNCException {
        return (YangString)getValue("deployedVersion");
    }

    /**
     * Sets the value for child leaf "deployedVersion",
     * using instance of generated typedef class.
     * @param deployedVersionValue The value to set.
     * @param deployedVersionValue used during instantiation.
     */
    public void setDeployedVersionValue(YangString deployedVersionValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "deployedVersion",
            deployedVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "deployedVersion",
     * using a String value.
     * @param deployedVersionValue used during instantiation.
     */
    public void setDeployedVersionValue(String deployedVersionValue)
            throws JNCException {
        setDeployedVersionValue(new YangString(deployedVersionValue));
    }

    /**
     * Unsets the value for child leaf "deployedVersion".
     */
    public void unsetDeployedVersionValue() throws JNCException {
        delete("deployedVersion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "deployedVersion" leaf will not have a value.
     */
    public void addDeployedVersion() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "deployedVersion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "deployedVersion" with operation "replace".
     */
    public void markDeployedVersionReplace() throws JNCException {
        markLeafReplace("deployedVersion");
    }

    /**
     * Marks the leaf "deployedVersion" with operation "merge".
     */
    public void markDeployedVersionMerge() throws JNCException {
        markLeafMerge("deployedVersion");
    }

    /**
     * Marks the leaf "deployedVersion" with operation "create".
     */
    public void markDeployedVersionCreate() throws JNCException {
        markLeafCreate("deployedVersion");
    }

    /**
     * Marks the leaf "deployedVersion" with operation "delete".
     */
    public void markDeployedVersionDelete() throws JNCException {
        markLeafDelete("deployedVersion");
    }

    /* Access methods for optional leaf child: "enableAutoUpgrade". */

    /**
     * Gets the value for child leaf "enableAutoUpgrade".
     * @return The value of the leaf.
     */
    public YangBoolean getEnableAutoUpgradeValue() throws JNCException {
        return (YangBoolean)getValue("enableAutoUpgrade");
    }

    /**
     * Sets the value for child leaf "enableAutoUpgrade",
     * using instance of generated typedef class.
     * @param enableAutoUpgradeValue The value to set.
     * @param enableAutoUpgradeValue used during instantiation.
     */
    public void setEnableAutoUpgradeValue(YangBoolean enableAutoUpgradeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "enableAutoUpgrade",
            enableAutoUpgradeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enableAutoUpgrade",
     * using Java primitive values.
     * @param enableAutoUpgradeValue used during instantiation.
     */
    public void setEnableAutoUpgradeValue(Boolean enableAutoUpgradeValue)
            throws JNCException {
        setEnableAutoUpgradeValue(new YangBoolean(enableAutoUpgradeValue));
    }

    /**
     * Sets the value for child leaf "enableAutoUpgrade",
     * using a String value.
     * @param enableAutoUpgradeValue used during instantiation.
     */
    public void setEnableAutoUpgradeValue(String enableAutoUpgradeValue)
            throws JNCException {
        setEnableAutoUpgradeValue(new YangBoolean(enableAutoUpgradeValue));
    }

    /**
     * Unsets the value for child leaf "enableAutoUpgrade".
     */
    public void unsetEnableAutoUpgradeValue() throws JNCException {
        delete("enableAutoUpgrade");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enableAutoUpgrade" leaf will not have a value.
     */
    public void addEnableAutoUpgrade() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "enableAutoUpgrade",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enableAutoUpgrade" with operation "replace".
     */
    public void markEnableAutoUpgradeReplace() throws JNCException {
        markLeafReplace("enableAutoUpgrade");
    }

    /**
     * Marks the leaf "enableAutoUpgrade" with operation "merge".
     */
    public void markEnableAutoUpgradeMerge() throws JNCException {
        markLeafMerge("enableAutoUpgrade");
    }

    /**
     * Marks the leaf "enableAutoUpgrade" with operation "create".
     */
    public void markEnableAutoUpgradeCreate() throws JNCException {
        markLeafCreate("enableAutoUpgrade");
    }

    /**
     * Marks the leaf "enableAutoUpgrade" with operation "delete".
     */
    public void markEnableAutoUpgradeDelete() throws JNCException {
        markLeafDelete("enableAutoUpgrade");
    }

    /* Access methods for optional leaf child: "scriptStatus". */

    /**
     * Gets the value for child leaf "scriptStatus".
     * @return The value of the leaf.
     */
    public YangUInt32 getScriptStatusValue() throws JNCException {
        return (YangUInt32)getValue("scriptStatus");
    }

    /**
     * Sets the value for child leaf "scriptStatus",
     * using instance of generated typedef class.
     * @param scriptStatusValue The value to set.
     * @param scriptStatusValue used during instantiation.
     */
    public void setScriptStatusValue(YangUInt32 scriptStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptStatus",
            scriptStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptStatus",
     * using Java primitive values.
     * @param scriptStatusValue used during instantiation.
     */
    public void setScriptStatusValue(long scriptStatusValue)
            throws JNCException {
        setScriptStatusValue(new YangUInt32(scriptStatusValue));
    }

    /**
     * Sets the value for child leaf "scriptStatus",
     * using a String value.
     * @param scriptStatusValue used during instantiation.
     */
    public void setScriptStatusValue(String scriptStatusValue)
            throws JNCException {
        setScriptStatusValue(new YangUInt32(scriptStatusValue));
    }

    /**
     * Unsets the value for child leaf "scriptStatus".
     */
    public void unsetScriptStatusValue() throws JNCException {
        delete("scriptStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptStatus" leaf will not have a value.
     */
    public void addScriptStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptStatus" with operation "replace".
     */
    public void markScriptStatusReplace() throws JNCException {
        markLeafReplace("scriptStatus");
    }

    /**
     * Marks the leaf "scriptStatus" with operation "merge".
     */
    public void markScriptStatusMerge() throws JNCException {
        markLeafMerge("scriptStatus");
    }

    /**
     * Marks the leaf "scriptStatus" with operation "create".
     */
    public void markScriptStatusCreate() throws JNCException {
        markLeafCreate("scriptStatus");
    }

    /**
     * Marks the leaf "scriptStatus" with operation "delete".
     */
    public void markScriptStatusDelete() throws JNCException {
        markLeafDelete("scriptStatus");
    }

    /* Access methods for optional leaf child: "scriptName". */

    /**
     * Gets the value for child leaf "scriptName".
     * @return The value of the leaf.
     */
    public YangString getScriptNameValue() throws JNCException {
        return (YangString)getValue("scriptName");
    }

    /**
     * Sets the value for child leaf "scriptName",
     * using instance of generated typedef class.
     * @param scriptNameValue The value to set.
     * @param scriptNameValue used during instantiation.
     */
    public void setScriptNameValue(YangString scriptNameValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptName",
            scriptNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptName",
     * using a String value.
     * @param scriptNameValue used during instantiation.
     */
    public void setScriptNameValue(String scriptNameValue) throws JNCException {
        setScriptNameValue(new YangString(scriptNameValue));
    }

    /**
     * Unsets the value for child leaf "scriptName".
     */
    public void unsetScriptNameValue() throws JNCException {
        delete("scriptName");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptName" leaf will not have a value.
     */
    public void addScriptName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptName",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptName" with operation "replace".
     */
    public void markScriptNameReplace() throws JNCException {
        markLeafReplace("scriptName");
    }

    /**
     * Marks the leaf "scriptName" with operation "merge".
     */
    public void markScriptNameMerge() throws JNCException {
        markLeafMerge("scriptName");
    }

    /**
     * Marks the leaf "scriptName" with operation "create".
     */
    public void markScriptNameCreate() throws JNCException {
        markLeafCreate("scriptName");
    }

    /**
     * Marks the leaf "scriptName" with operation "delete".
     */
    public void markScriptNameDelete() throws JNCException {
        markLeafDelete("scriptName");
    }

    /* Access methods for optional leaf child: "scriptType". */

    /**
     * Gets the value for child leaf "scriptType".
     * @return The value of the leaf.
     */
    public YangString getScriptTypeValue() throws JNCException {
        return (YangString)getValue("scriptType");
    }

    /**
     * Sets the value for child leaf "scriptType",
     * using instance of generated typedef class.
     * @param scriptTypeValue The value to set.
     * @param scriptTypeValue used during instantiation.
     */
    public void setScriptTypeValue(YangString scriptTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptType",
            scriptTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptType",
     * using a String value.
     * @param scriptTypeValue used during instantiation.
     */
    public void setScriptTypeValue(String scriptTypeValue) throws JNCException {
        setScriptTypeValue(new YangString(scriptTypeValue));
    }

    /**
     * Unsets the value for child leaf "scriptType".
     */
    public void unsetScriptTypeValue() throws JNCException {
        delete("scriptType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptType" leaf will not have a value.
     */
    public void addScriptType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptType" with operation "replace".
     */
    public void markScriptTypeReplace() throws JNCException {
        markLeafReplace("scriptType");
    }

    /**
     * Marks the leaf "scriptType" with operation "merge".
     */
    public void markScriptTypeMerge() throws JNCException {
        markLeafMerge("scriptType");
    }

    /**
     * Marks the leaf "scriptType" with operation "create".
     */
    public void markScriptTypeCreate() throws JNCException {
        markLeafCreate("scriptType");
    }

    /**
     * Marks the leaf "scriptType" with operation "delete".
     */
    public void markScriptTypeDelete() throws JNCException {
        markLeafDelete("scriptType");
    }

    /* Access methods for optional leaf child: "format". */

    /**
     * Gets the value for child leaf "format".
     * @return The value of the leaf.
     */
    public YangString getFormatValue() throws JNCException {
        return (YangString)getValue("format");
    }

    /**
     * Sets the value for child leaf "format",
     * using instance of generated typedef class.
     * @param formatValue The value to set.
     * @param formatValue used during instantiation.
     */
    public void setFormatValue(YangString formatValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "format",
            formatValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "format",
     * using a String value.
     * @param formatValue used during instantiation.
     */
    public void setFormatValue(String formatValue) throws JNCException {
        setFormatValue(new YangString(formatValue));
    }

    /**
     * Unsets the value for child leaf "format".
     */
    public void unsetFormatValue() throws JNCException {
        delete("format");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "format" leaf will not have a value.
     */
    public void addFormat() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "format",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "format" with operation "replace".
     */
    public void markFormatReplace() throws JNCException {
        markLeafReplace("format");
    }

    /**
     * Marks the leaf "format" with operation "merge".
     */
    public void markFormatMerge() throws JNCException {
        markLeafMerge("format");
    }

    /**
     * Marks the leaf "format" with operation "create".
     */
    public void markFormatCreate() throws JNCException {
        markLeafCreate("format");
    }

    /**
     * Marks the leaf "format" with operation "delete".
     */
    public void markFormatDelete() throws JNCException {
        markLeafDelete("format");
    }

    /* Access methods for optional leaf child: "latestVersion". */

    /**
     * Gets the value for child leaf "latestVersion".
     * @return The value of the leaf.
     */
    public YangString getLatestVersionValue() throws JNCException {
        return (YangString)getValue("latestVersion");
    }

    /**
     * Sets the value for child leaf "latestVersion",
     * using instance of generated typedef class.
     * @param latestVersionValue The value to set.
     * @param latestVersionValue used during instantiation.
     */
    public void setLatestVersionValue(YangString latestVersionValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "latestVersion",
            latestVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "latestVersion",
     * using a String value.
     * @param latestVersionValue used during instantiation.
     */
    public void setLatestVersionValue(String latestVersionValue)
            throws JNCException {
        setLatestVersionValue(new YangString(latestVersionValue));
    }

    /**
     * Unsets the value for child leaf "latestVersion".
     */
    public void unsetLatestVersionValue() throws JNCException {
        delete("latestVersion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "latestVersion" leaf will not have a value.
     */
    public void addLatestVersion() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "latestVersion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "latestVersion" with operation "replace".
     */
    public void markLatestVersionReplace() throws JNCException {
        markLeafReplace("latestVersion");
    }

    /**
     * Marks the leaf "latestVersion" with operation "merge".
     */
    public void markLatestVersionMerge() throws JNCException {
        markLeafMerge("latestVersion");
    }

    /**
     * Marks the leaf "latestVersion" with operation "create".
     */
    public void markLatestVersionCreate() throws JNCException {
        markLeafCreate("latestVersion");
    }

    /**
     * Marks the leaf "latestVersion" with operation "delete".
     */
    public void markLatestVersionDelete() throws JNCException {
        markLeafDelete("latestVersion");
    }

    /* Access methods for optional leaf child: "lastestMD5". */

    /**
     * Gets the value for child leaf "lastestMD5".
     * @return The value of the leaf.
     */
    public YangString getLastestmd5Value() throws JNCException {
        return (YangString)getValue("lastestMD5");
    }

    /**
     * Sets the value for child leaf "lastestMD5",
     * using instance of generated typedef class.
     * @param lastestmd5Value The value to set.
     * @param lastestmd5Value used during instantiation.
     */
    public void setLastestmd5Value(YangString lastestmd5Value)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "lastestMD5",
            lastestmd5Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lastestMD5",
     * using a String value.
     * @param lastestmd5Value used during instantiation.
     */
    public void setLastestmd5Value(String lastestmd5Value) throws JNCException {
        setLastestmd5Value(new YangString(lastestmd5Value));
    }

    /**
     * Unsets the value for child leaf "lastestMD5".
     */
    public void unsetLastestmd5Value() throws JNCException {
        delete("lastestMD5");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lastestMD5" leaf will not have a value.
     */
    public void addLastestmd5() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "lastestMD5",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lastestMD5" with operation "replace".
     */
    public void markLastestmd5Replace() throws JNCException {
        markLeafReplace("lastestmd5");
    }

    /**
     * Marks the leaf "lastestMD5" with operation "merge".
     */
    public void markLastestmd5Merge() throws JNCException {
        markLeafMerge("lastestmd5");
    }

    /**
     * Marks the leaf "lastestMD5" with operation "create".
     */
    public void markLastestmd5Create() throws JNCException {
        markLeafCreate("lastestmd5");
    }

    /**
     * Marks the leaf "lastestMD5" with operation "delete".
     */
    public void markLastestmd5Delete() throws JNCException {
        markLeafDelete("lastestmd5");
    }

    /* Access methods for optional leaf child: "createTime". */

    /**
     * Gets the value for child leaf "createTime".
     * @return The value of the leaf.
     */
    public Timestamp getCreateTimeValue() throws JNCException {
        return (Timestamp)getValue("createTime");
    }

    /**
     * Sets the value for child leaf "createTime",
     * using a JNC type value.
     * @param createTimeValue The value to set.
     * @param createTimeValue used during instantiation.
     */
    public void setCreateTimeValue(Timestamp createTimeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "createTime",
            createTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "createTime",
     * using Java primitive values.
     * @param createTimeValue used during instantiation.
     */
    public void setCreateTimeValue(long createTimeValue) throws JNCException {
        setCreateTimeValue(new Timestamp(createTimeValue));
    }

    /**
     * Sets the value for child leaf "createTime",
     * using a String value.
     * @param createTimeValue used during instantiation.
     */
    public void setCreateTimeValue(String createTimeValue) throws JNCException {
        setCreateTimeValue(new Timestamp(createTimeValue));
    }

    /**
     * Unsets the value for child leaf "createTime".
     */
    public void unsetCreateTimeValue() throws JNCException {
        delete("createTime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "createTime" leaf will not have a value.
     */
    public void addCreateTime() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "createTime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "createTime" with operation "replace".
     */
    public void markCreateTimeReplace() throws JNCException {
        markLeafReplace("createTime");
    }

    /**
     * Marks the leaf "createTime" with operation "merge".
     */
    public void markCreateTimeMerge() throws JNCException {
        markLeafMerge("createTime");
    }

    /**
     * Marks the leaf "createTime" with operation "create".
     */
    public void markCreateTimeCreate() throws JNCException {
        markLeafCreate("createTime");
    }

    /**
     * Marks the leaf "createTime" with operation "delete".
     */
    public void markCreateTimeDelete() throws JNCException {
        markLeafDelete("createTime");
    }

    /* Access methods for optional leaf child: "lastUpdateTime". */

    /**
     * Gets the value for child leaf "lastUpdateTime".
     * @return The value of the leaf.
     */
    public Timestamp getLastUpdateTimeValue() throws JNCException {
        return (Timestamp)getValue("lastUpdateTime");
    }

    /**
     * Sets the value for child leaf "lastUpdateTime",
     * using a JNC type value.
     * @param lastUpdateTimeValue The value to set.
     * @param lastUpdateTimeValue used during instantiation.
     */
    public void setLastUpdateTimeValue(Timestamp lastUpdateTimeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "lastUpdateTime",
            lastUpdateTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lastUpdateTime",
     * using Java primitive values.
     * @param lastUpdateTimeValue used during instantiation.
     */
    public void setLastUpdateTimeValue(long lastUpdateTimeValue)
            throws JNCException {
        setLastUpdateTimeValue(new Timestamp(lastUpdateTimeValue));
    }

    /**
     * Sets the value for child leaf "lastUpdateTime",
     * using a String value.
     * @param lastUpdateTimeValue used during instantiation.
     */
    public void setLastUpdateTimeValue(String lastUpdateTimeValue)
            throws JNCException {
        setLastUpdateTimeValue(new Timestamp(lastUpdateTimeValue));
    }

    /**
     * Unsets the value for child leaf "lastUpdateTime".
     */
    public void unsetLastUpdateTimeValue() throws JNCException {
        delete("lastUpdateTime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lastUpdateTime" leaf will not have a value.
     */
    public void addLastUpdateTime() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "lastUpdateTime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lastUpdateTime" with operation "replace".
     */
    public void markLastUpdateTimeReplace() throws JNCException {
        markLeafReplace("lastUpdateTime");
    }

    /**
     * Marks the leaf "lastUpdateTime" with operation "merge".
     */
    public void markLastUpdateTimeMerge() throws JNCException {
        markLeafMerge("lastUpdateTime");
    }

    /**
     * Marks the leaf "lastUpdateTime" with operation "create".
     */
    public void markLastUpdateTimeCreate() throws JNCException {
        markLeafCreate("lastUpdateTime");
    }

    /**
     * Marks the leaf "lastUpdateTime" with operation "delete".
     */
    public void markLastUpdateTimeDelete() throws JNCException {
        markLeafDelete("lastUpdateTime");
    }

    /* Access methods for optional leaf child: "comments". */

    /**
     * Gets the value for child leaf "comments".
     * @return The value of the leaf.
     */
    public YangString getCommentsValue() throws JNCException {
        return (YangString)getValue("comments");
    }

    /**
     * Sets the value for child leaf "comments",
     * using instance of generated typedef class.
     * @param commentsValue The value to set.
     * @param commentsValue used during instantiation.
     */
    public void setCommentsValue(YangString commentsValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "comments",
            commentsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "comments",
     * using a String value.
     * @param commentsValue used during instantiation.
     */
    public void setCommentsValue(String commentsValue) throws JNCException {
        setCommentsValue(new YangString(commentsValue));
    }

    /**
     * Unsets the value for child leaf "comments".
     */
    public void unsetCommentsValue() throws JNCException {
        delete("comments");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "comments" leaf will not have a value.
     */
    public void addComments() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "comments",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "comments" with operation "replace".
     */
    public void markCommentsReplace() throws JNCException {
        markLeafReplace("comments");
    }

    /**
     * Marks the leaf "comments" with operation "merge".
     */
    public void markCommentsMerge() throws JNCException {
        markLeafMerge("comments");
    }

    /**
     * Marks the leaf "comments" with operation "create".
     */
    public void markCommentsCreate() throws JNCException {
        markLeafCreate("comments");
    }

    /**
     * Marks the leaf "comments" with operation "delete".
     */
    public void markCommentsDelete() throws JNCException {
        markLeafDelete("comments");
    }

    /* Access methods for optional leaf child: "scriptSize". */

    /**
     * Gets the value for child leaf "scriptSize".
     * @return The value of the leaf.
     */
    public YangUInt32 getScriptSizeValue() throws JNCException {
        return (YangUInt32)getValue("scriptSize");
    }

    /**
     * Sets the value for child leaf "scriptSize",
     * using instance of generated typedef class.
     * @param scriptSizeValue The value to set.
     * @param scriptSizeValue used during instantiation.
     */
    public void setScriptSizeValue(YangUInt32 scriptSizeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptSize",
            scriptSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptSize",
     * using Java primitive values.
     * @param scriptSizeValue used during instantiation.
     */
    public void setScriptSizeValue(long scriptSizeValue) throws JNCException {
        setScriptSizeValue(new YangUInt32(scriptSizeValue));
    }

    /**
     * Sets the value for child leaf "scriptSize",
     * using a String value.
     * @param scriptSizeValue used during instantiation.
     */
    public void setScriptSizeValue(String scriptSizeValue) throws JNCException {
        setScriptSizeValue(new YangUInt32(scriptSizeValue));
    }

    /**
     * Unsets the value for child leaf "scriptSize".
     */
    public void unsetScriptSizeValue() throws JNCException {
        delete("scriptSize");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptSize" leaf will not have a value.
     */
    public void addScriptSize() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptSize",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptSize" with operation "replace".
     */
    public void markScriptSizeReplace() throws JNCException {
        markLeafReplace("scriptSize");
    }

    /**
     * Marks the leaf "scriptSize" with operation "merge".
     */
    public void markScriptSizeMerge() throws JNCException {
        markLeafMerge("scriptSize");
    }

    /**
     * Marks the leaf "scriptSize" with operation "create".
     */
    public void markScriptSizeCreate() throws JNCException {
        markLeafCreate("scriptSize");
    }

    /**
     * Marks the leaf "scriptSize" with operation "delete".
     */
    public void markScriptSizeDelete() throws JNCException {
        markLeafDelete("scriptSize");
    }

    /* Access methods for optional leaf child: "encodeCompletionStatus". */

    /**
     * Gets the value for child leaf "encodeCompletionStatus".
     * @return The value of the leaf.
     */
    public YangUInt32 getEncodeCompletionStatusValue() throws JNCException {
        return (YangUInt32)getValue("encodeCompletionStatus");
    }

    /**
     * Sets the value for child leaf "encodeCompletionStatus",
     * using instance of generated typedef class.
     * @param encodeCompletionStatusValue The value to set.
     * @param encodeCompletionStatusValue used during instantiation.
     */
    public void setEncodeCompletionStatusValue(YangUInt32 encodeCompletionStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "encodeCompletionStatus",
            encodeCompletionStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "encodeCompletionStatus",
     * using Java primitive values.
     * @param encodeCompletionStatusValue used during instantiation.
     */
    public void setEncodeCompletionStatusValue(long encodeCompletionStatusValue)
            throws JNCException {
        setEncodeCompletionStatusValue(new YangUInt32(encodeCompletionStatusValue));
    }

    /**
     * Sets the value for child leaf "encodeCompletionStatus",
     * using a String value.
     * @param encodeCompletionStatusValue used during instantiation.
     */
    public void setEncodeCompletionStatusValue(String encodeCompletionStatusValue)
            throws JNCException {
        setEncodeCompletionStatusValue(new YangUInt32(encodeCompletionStatusValue));
    }

    /**
     * Unsets the value for child leaf "encodeCompletionStatus".
     */
    public void unsetEncodeCompletionStatusValue() throws JNCException {
        delete("encodeCompletionStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "encodeCompletionStatus" leaf will not have a value.
     */
    public void addEncodeCompletionStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "encodeCompletionStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "encodeCompletionStatus" with operation "replace".
     */
    public void markEncodeCompletionStatusReplace() throws JNCException {
        markLeafReplace("encodeCompletionStatus");
    }

    /**
     * Marks the leaf "encodeCompletionStatus" with operation "merge".
     */
    public void markEncodeCompletionStatusMerge() throws JNCException {
        markLeafMerge("encodeCompletionStatus");
    }

    /**
     * Marks the leaf "encodeCompletionStatus" with operation "create".
     */
    public void markEncodeCompletionStatusCreate() throws JNCException {
        markLeafCreate("encodeCompletionStatus");
    }

    /**
     * Marks the leaf "encodeCompletionStatus" with operation "delete".
     */
    public void markEncodeCompletionStatusDelete() throws JNCException {
        markLeafDelete("encodeCompletionStatus");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
