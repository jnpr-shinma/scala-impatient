/* 
 * @(#)ScriptExecutionHistory.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.yang.mo.deviceManagement.scriptExecutionHistory.IdPerms;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/scriptExecutionHistory"
 * <p>
 * See line 818 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class ScriptExecutionHistory extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("scriptExecutionHistory");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty ScriptExecutionHistory object.
     */
    public ScriptExecutionHistory() {
        super(Devicemgt.NAMESPACE, "scriptExecutionHistory");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized ScriptExecutionHistory object,
     * 
     * @param uuidValue Key argument of child.
     */
    public ScriptExecutionHistory(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "scriptExecutionHistory");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized ScriptExecutionHistory object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public ScriptExecutionHistory(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "scriptExecutionHistory");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public ScriptExecutionHistory clone() {
        ScriptExecutionHistory copy;
        try {
            copy = new ScriptExecutionHistory(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (ScriptExecutionHistory)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public ScriptExecutionHistory cloneShallow() {
        ScriptExecutionHistory copy;
        try {
            copy = new ScriptExecutionHistory(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (ScriptExecutionHistory)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "jobInstanceId",
            "actionType",
            "associatedTagList",
            "context",
            "endTime",
            "hostname",
            "ip",
            "jobRemarks",
            "ruleData",
            "ruleType",
            "scriptBundleId",
            "scriptID",
            "scriptMgmtJobStatus",
            "scriptName",
            "scriptParams",
            "scriptType",
            "scriptVersion",
            "sequence",
            "startTime",
            "nodeName",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "jobInstanceId". */

    /**
     * Gets the value for child leaf "jobInstanceId".
     * @return The value of the leaf.
     */
    public YangUInt32 getJobInstanceIdValue() throws JNCException {
        return (YangUInt32)getValue("jobInstanceId");
    }

    /**
     * Sets the value for child leaf "jobInstanceId",
     * using instance of generated typedef class.
     * @param jobInstanceIdValue The value to set.
     * @param jobInstanceIdValue used during instantiation.
     */
    public void setJobInstanceIdValue(YangUInt32 jobInstanceIdValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "jobInstanceId",
            jobInstanceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "jobInstanceId",
     * using Java primitive values.
     * @param jobInstanceIdValue used during instantiation.
     */
    public void setJobInstanceIdValue(long jobInstanceIdValue)
            throws JNCException {
        setJobInstanceIdValue(new YangUInt32(jobInstanceIdValue));
    }

    /**
     * Sets the value for child leaf "jobInstanceId",
     * using a String value.
     * @param jobInstanceIdValue used during instantiation.
     */
    public void setJobInstanceIdValue(String jobInstanceIdValue)
            throws JNCException {
        setJobInstanceIdValue(new YangUInt32(jobInstanceIdValue));
    }

    /**
     * Unsets the value for child leaf "jobInstanceId".
     */
    public void unsetJobInstanceIdValue() throws JNCException {
        delete("jobInstanceId");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "jobInstanceId" leaf will not have a value.
     */
    public void addJobInstanceId() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "jobInstanceId",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "jobInstanceId" with operation "replace".
     */
    public void markJobInstanceIdReplace() throws JNCException {
        markLeafReplace("jobInstanceId");
    }

    /**
     * Marks the leaf "jobInstanceId" with operation "merge".
     */
    public void markJobInstanceIdMerge() throws JNCException {
        markLeafMerge("jobInstanceId");
    }

    /**
     * Marks the leaf "jobInstanceId" with operation "create".
     */
    public void markJobInstanceIdCreate() throws JNCException {
        markLeafCreate("jobInstanceId");
    }

    /**
     * Marks the leaf "jobInstanceId" with operation "delete".
     */
    public void markJobInstanceIdDelete() throws JNCException {
        markLeafDelete("jobInstanceId");
    }

    /* Access methods for optional leaf child: "actionType". */

    /**
     * Gets the value for child leaf "actionType".
     * @return The value of the leaf.
     */
    public YangUInt32 getActionTypeValue() throws JNCException {
        return (YangUInt32)getValue("actionType");
    }

    /**
     * Sets the value for child leaf "actionType",
     * using instance of generated typedef class.
     * @param actionTypeValue The value to set.
     * @param actionTypeValue used during instantiation.
     */
    public void setActionTypeValue(YangUInt32 actionTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "actionType",
            actionTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "actionType",
     * using Java primitive values.
     * @param actionTypeValue used during instantiation.
     */
    public void setActionTypeValue(long actionTypeValue) throws JNCException {
        setActionTypeValue(new YangUInt32(actionTypeValue));
    }

    /**
     * Sets the value for child leaf "actionType",
     * using a String value.
     * @param actionTypeValue used during instantiation.
     */
    public void setActionTypeValue(String actionTypeValue) throws JNCException {
        setActionTypeValue(new YangUInt32(actionTypeValue));
    }

    /**
     * Unsets the value for child leaf "actionType".
     */
    public void unsetActionTypeValue() throws JNCException {
        delete("actionType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "actionType" leaf will not have a value.
     */
    public void addActionType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "actionType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "actionType" with operation "replace".
     */
    public void markActionTypeReplace() throws JNCException {
        markLeafReplace("actionType");
    }

    /**
     * Marks the leaf "actionType" with operation "merge".
     */
    public void markActionTypeMerge() throws JNCException {
        markLeafMerge("actionType");
    }

    /**
     * Marks the leaf "actionType" with operation "create".
     */
    public void markActionTypeCreate() throws JNCException {
        markLeafCreate("actionType");
    }

    /**
     * Marks the leaf "actionType" with operation "delete".
     */
    public void markActionTypeDelete() throws JNCException {
        markLeafDelete("actionType");
    }

    /* Access methods for optional leaf child: "associatedTagList". */

    /**
     * Gets the value for child leaf "associatedTagList".
     * @return The value of the leaf.
     */
    public YangString getAssociatedTagListValue() throws JNCException {
        return (YangString)getValue("associatedTagList");
    }

    /**
     * Sets the value for child leaf "associatedTagList",
     * using instance of generated typedef class.
     * @param associatedTagListValue The value to set.
     * @param associatedTagListValue used during instantiation.
     */
    public void setAssociatedTagListValue(YangString associatedTagListValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "associatedTagList",
            associatedTagListValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "associatedTagList",
     * using a String value.
     * @param associatedTagListValue used during instantiation.
     */
    public void setAssociatedTagListValue(String associatedTagListValue)
            throws JNCException {
        setAssociatedTagListValue(new YangString(associatedTagListValue));
    }

    /**
     * Unsets the value for child leaf "associatedTagList".
     */
    public void unsetAssociatedTagListValue() throws JNCException {
        delete("associatedTagList");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "associatedTagList" leaf will not have a value.
     */
    public void addAssociatedTagList() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "associatedTagList",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "associatedTagList" with operation "replace".
     */
    public void markAssociatedTagListReplace() throws JNCException {
        markLeafReplace("associatedTagList");
    }

    /**
     * Marks the leaf "associatedTagList" with operation "merge".
     */
    public void markAssociatedTagListMerge() throws JNCException {
        markLeafMerge("associatedTagList");
    }

    /**
     * Marks the leaf "associatedTagList" with operation "create".
     */
    public void markAssociatedTagListCreate() throws JNCException {
        markLeafCreate("associatedTagList");
    }

    /**
     * Marks the leaf "associatedTagList" with operation "delete".
     */
    public void markAssociatedTagListDelete() throws JNCException {
        markLeafDelete("associatedTagList");
    }

    /* Access methods for optional leaf child: "context". */

    /**
     * Gets the value for child leaf "context".
     * @return The value of the leaf.
     */
    public YangString getContextValue() throws JNCException {
        return (YangString)getValue("context");
    }

    /**
     * Sets the value for child leaf "context",
     * using instance of generated typedef class.
     * @param contextValue The value to set.
     * @param contextValue used during instantiation.
     */
    public void setContextValue(YangString contextValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "context",
            contextValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "context",
     * using a String value.
     * @param contextValue used during instantiation.
     */
    public void setContextValue(String contextValue) throws JNCException {
        setContextValue(new YangString(contextValue));
    }

    /**
     * Unsets the value for child leaf "context".
     */
    public void unsetContextValue() throws JNCException {
        delete("context");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "context" leaf will not have a value.
     */
    public void addContext() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "context",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "context" with operation "replace".
     */
    public void markContextReplace() throws JNCException {
        markLeafReplace("context");
    }

    /**
     * Marks the leaf "context" with operation "merge".
     */
    public void markContextMerge() throws JNCException {
        markLeafMerge("context");
    }

    /**
     * Marks the leaf "context" with operation "create".
     */
    public void markContextCreate() throws JNCException {
        markLeafCreate("context");
    }

    /**
     * Marks the leaf "context" with operation "delete".
     */
    public void markContextDelete() throws JNCException {
        markLeafDelete("context");
    }

    /* Access methods for optional leaf child: "endTime". */

    /**
     * Gets the value for child leaf "endTime".
     * @return The value of the leaf.
     */
    public YangString getEndTimeValue() throws JNCException {
        return (YangString)getValue("endTime");
    }

    /**
     * Sets the value for child leaf "endTime",
     * using instance of generated typedef class.
     * @param endTimeValue The value to set.
     * @param endTimeValue used during instantiation.
     */
    public void setEndTimeValue(YangString endTimeValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "endTime",
            endTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "endTime",
     * using a String value.
     * @param endTimeValue used during instantiation.
     */
    public void setEndTimeValue(String endTimeValue) throws JNCException {
        setEndTimeValue(new YangString(endTimeValue));
    }

    /**
     * Unsets the value for child leaf "endTime".
     */
    public void unsetEndTimeValue() throws JNCException {
        delete("endTime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "endTime" leaf will not have a value.
     */
    public void addEndTime() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "endTime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "endTime" with operation "replace".
     */
    public void markEndTimeReplace() throws JNCException {
        markLeafReplace("endTime");
    }

    /**
     * Marks the leaf "endTime" with operation "merge".
     */
    public void markEndTimeMerge() throws JNCException {
        markLeafMerge("endTime");
    }

    /**
     * Marks the leaf "endTime" with operation "create".
     */
    public void markEndTimeCreate() throws JNCException {
        markLeafCreate("endTime");
    }

    /**
     * Marks the leaf "endTime" with operation "delete".
     */
    public void markEndTimeDelete() throws JNCException {
        markLeafDelete("endTime");
    }

    /* Access methods for optional leaf child: "hostname". */

    /**
     * Gets the value for child leaf "hostname".
     * @return The value of the leaf.
     */
    public YangString getHostnameValue() throws JNCException {
        return (YangString)getValue("hostname");
    }

    /**
     * Sets the value for child leaf "hostname",
     * using instance of generated typedef class.
     * @param hostnameValue The value to set.
     * @param hostnameValue used during instantiation.
     */
    public void setHostnameValue(YangString hostnameValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "hostname",
            hostnameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hostname",
     * using a String value.
     * @param hostnameValue used during instantiation.
     */
    public void setHostnameValue(String hostnameValue) throws JNCException {
        setHostnameValue(new YangString(hostnameValue));
    }

    /**
     * Unsets the value for child leaf "hostname".
     */
    public void unsetHostnameValue() throws JNCException {
        delete("hostname");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hostname" leaf will not have a value.
     */
    public void addHostname() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "hostname",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hostname" with operation "replace".
     */
    public void markHostnameReplace() throws JNCException {
        markLeafReplace("hostname");
    }

    /**
     * Marks the leaf "hostname" with operation "merge".
     */
    public void markHostnameMerge() throws JNCException {
        markLeafMerge("hostname");
    }

    /**
     * Marks the leaf "hostname" with operation "create".
     */
    public void markHostnameCreate() throws JNCException {
        markLeafCreate("hostname");
    }

    /**
     * Marks the leaf "hostname" with operation "delete".
     */
    public void markHostnameDelete() throws JNCException {
        markLeafDelete("hostname");
    }

    /* Access methods for optional leaf child: "ip". */

    /**
     * Gets the value for child leaf "ip".
     * @return The value of the leaf.
     */
    public YangString getIpValue() throws JNCException {
        return (YangString)getValue("ip");
    }

    /**
     * Sets the value for child leaf "ip",
     * using instance of generated typedef class.
     * @param ipValue The value to set.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(YangString ipValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ip",
            ipValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip",
     * using a String value.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(String ipValue) throws JNCException {
        setIpValue(new YangString(ipValue));
    }

    /**
     * Unsets the value for child leaf "ip".
     */
    public void unsetIpValue() throws JNCException {
        delete("ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip" leaf will not have a value.
     */
    public void addIp() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip" with operation "replace".
     */
    public void markIpReplace() throws JNCException {
        markLeafReplace("ip");
    }

    /**
     * Marks the leaf "ip" with operation "merge".
     */
    public void markIpMerge() throws JNCException {
        markLeafMerge("ip");
    }

    /**
     * Marks the leaf "ip" with operation "create".
     */
    public void markIpCreate() throws JNCException {
        markLeafCreate("ip");
    }

    /**
     * Marks the leaf "ip" with operation "delete".
     */
    public void markIpDelete() throws JNCException {
        markLeafDelete("ip");
    }

    /* Access methods for optional leaf child: "jobRemarks". */

    /**
     * Gets the value for child leaf "jobRemarks".
     * @return The value of the leaf.
     */
    public YangString getJobRemarksValue() throws JNCException {
        return (YangString)getValue("jobRemarks");
    }

    /**
     * Sets the value for child leaf "jobRemarks",
     * using instance of generated typedef class.
     * @param jobRemarksValue The value to set.
     * @param jobRemarksValue used during instantiation.
     */
    public void setJobRemarksValue(YangString jobRemarksValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "jobRemarks",
            jobRemarksValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "jobRemarks",
     * using a String value.
     * @param jobRemarksValue used during instantiation.
     */
    public void setJobRemarksValue(String jobRemarksValue) throws JNCException {
        setJobRemarksValue(new YangString(jobRemarksValue));
    }

    /**
     * Unsets the value for child leaf "jobRemarks".
     */
    public void unsetJobRemarksValue() throws JNCException {
        delete("jobRemarks");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "jobRemarks" leaf will not have a value.
     */
    public void addJobRemarks() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "jobRemarks",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "jobRemarks" with operation "replace".
     */
    public void markJobRemarksReplace() throws JNCException {
        markLeafReplace("jobRemarks");
    }

    /**
     * Marks the leaf "jobRemarks" with operation "merge".
     */
    public void markJobRemarksMerge() throws JNCException {
        markLeafMerge("jobRemarks");
    }

    /**
     * Marks the leaf "jobRemarks" with operation "create".
     */
    public void markJobRemarksCreate() throws JNCException {
        markLeafCreate("jobRemarks");
    }

    /**
     * Marks the leaf "jobRemarks" with operation "delete".
     */
    public void markJobRemarksDelete() throws JNCException {
        markLeafDelete("jobRemarks");
    }

    /* Access methods for optional leaf child: "ruleData". */

    /**
     * Gets the value for child leaf "ruleData".
     * @return The value of the leaf.
     */
    public YangString getRuleDataValue() throws JNCException {
        return (YangString)getValue("ruleData");
    }

    /**
     * Sets the value for child leaf "ruleData",
     * using instance of generated typedef class.
     * @param ruleDataValue The value to set.
     * @param ruleDataValue used during instantiation.
     */
    public void setRuleDataValue(YangString ruleDataValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ruleData",
            ruleDataValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ruleData",
     * using a String value.
     * @param ruleDataValue used during instantiation.
     */
    public void setRuleDataValue(String ruleDataValue) throws JNCException {
        setRuleDataValue(new YangString(ruleDataValue));
    }

    /**
     * Unsets the value for child leaf "ruleData".
     */
    public void unsetRuleDataValue() throws JNCException {
        delete("ruleData");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ruleData" leaf will not have a value.
     */
    public void addRuleData() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ruleData",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ruleData" with operation "replace".
     */
    public void markRuleDataReplace() throws JNCException {
        markLeafReplace("ruleData");
    }

    /**
     * Marks the leaf "ruleData" with operation "merge".
     */
    public void markRuleDataMerge() throws JNCException {
        markLeafMerge("ruleData");
    }

    /**
     * Marks the leaf "ruleData" with operation "create".
     */
    public void markRuleDataCreate() throws JNCException {
        markLeafCreate("ruleData");
    }

    /**
     * Marks the leaf "ruleData" with operation "delete".
     */
    public void markRuleDataDelete() throws JNCException {
        markLeafDelete("ruleData");
    }

    /* Access methods for optional leaf child: "ruleType". */

    /**
     * Gets the value for child leaf "ruleType".
     * @return The value of the leaf.
     */
    public YangString getRuleTypeValue() throws JNCException {
        return (YangString)getValue("ruleType");
    }

    /**
     * Sets the value for child leaf "ruleType",
     * using instance of generated typedef class.
     * @param ruleTypeValue The value to set.
     * @param ruleTypeValue used during instantiation.
     */
    public void setRuleTypeValue(YangString ruleTypeValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ruleType",
            ruleTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ruleType",
     * using a String value.
     * @param ruleTypeValue used during instantiation.
     */
    public void setRuleTypeValue(String ruleTypeValue) throws JNCException {
        setRuleTypeValue(new YangString(ruleTypeValue));
    }

    /**
     * Unsets the value for child leaf "ruleType".
     */
    public void unsetRuleTypeValue() throws JNCException {
        delete("ruleType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ruleType" leaf will not have a value.
     */
    public void addRuleType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ruleType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ruleType" with operation "replace".
     */
    public void markRuleTypeReplace() throws JNCException {
        markLeafReplace("ruleType");
    }

    /**
     * Marks the leaf "ruleType" with operation "merge".
     */
    public void markRuleTypeMerge() throws JNCException {
        markLeafMerge("ruleType");
    }

    /**
     * Marks the leaf "ruleType" with operation "create".
     */
    public void markRuleTypeCreate() throws JNCException {
        markLeafCreate("ruleType");
    }

    /**
     * Marks the leaf "ruleType" with operation "delete".
     */
    public void markRuleTypeDelete() throws JNCException {
        markLeafDelete("ruleType");
    }

    /* Access methods for optional leaf child: "scriptBundleId". */

    /**
     * Gets the value for child leaf "scriptBundleId".
     * @return The value of the leaf.
     */
    public YangUInt32 getScriptBundleIdValue() throws JNCException {
        return (YangUInt32)getValue("scriptBundleId");
    }

    /**
     * Sets the value for child leaf "scriptBundleId",
     * using instance of generated typedef class.
     * @param scriptBundleIdValue The value to set.
     * @param scriptBundleIdValue used during instantiation.
     */
    public void setScriptBundleIdValue(YangUInt32 scriptBundleIdValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptBundleId",
            scriptBundleIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptBundleId",
     * using Java primitive values.
     * @param scriptBundleIdValue used during instantiation.
     */
    public void setScriptBundleIdValue(long scriptBundleIdValue)
            throws JNCException {
        setScriptBundleIdValue(new YangUInt32(scriptBundleIdValue));
    }

    /**
     * Sets the value for child leaf "scriptBundleId",
     * using a String value.
     * @param scriptBundleIdValue used during instantiation.
     */
    public void setScriptBundleIdValue(String scriptBundleIdValue)
            throws JNCException {
        setScriptBundleIdValue(new YangUInt32(scriptBundleIdValue));
    }

    /**
     * Unsets the value for child leaf "scriptBundleId".
     */
    public void unsetScriptBundleIdValue() throws JNCException {
        delete("scriptBundleId");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptBundleId" leaf will not have a value.
     */
    public void addScriptBundleId() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptBundleId",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptBundleId" with operation "replace".
     */
    public void markScriptBundleIdReplace() throws JNCException {
        markLeafReplace("scriptBundleId");
    }

    /**
     * Marks the leaf "scriptBundleId" with operation "merge".
     */
    public void markScriptBundleIdMerge() throws JNCException {
        markLeafMerge("scriptBundleId");
    }

    /**
     * Marks the leaf "scriptBundleId" with operation "create".
     */
    public void markScriptBundleIdCreate() throws JNCException {
        markLeafCreate("scriptBundleId");
    }

    /**
     * Marks the leaf "scriptBundleId" with operation "delete".
     */
    public void markScriptBundleIdDelete() throws JNCException {
        markLeafDelete("scriptBundleId");
    }

    /* Access methods for optional leaf child: "scriptID". */

    /**
     * Gets the value for child leaf "scriptID".
     * @return The value of the leaf.
     */
    public YangString getScriptiDValue() throws JNCException {
        return (YangString)getValue("scriptID");
    }

    /**
     * Sets the value for child leaf "scriptID",
     * using instance of generated typedef class.
     * @param scriptiDValue The value to set.
     * @param scriptiDValue used during instantiation.
     */
    public void setScriptiDValue(YangString scriptiDValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptID",
            scriptiDValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptID",
     * using a String value.
     * @param scriptiDValue used during instantiation.
     */
    public void setScriptiDValue(String scriptiDValue) throws JNCException {
        setScriptiDValue(new YangString(scriptiDValue));
    }

    /**
     * Unsets the value for child leaf "scriptID".
     */
    public void unsetScriptiDValue() throws JNCException {
        delete("scriptID");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptID" leaf will not have a value.
     */
    public void addScriptiD() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptID",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptID" with operation "replace".
     */
    public void markScriptiDReplace() throws JNCException {
        markLeafReplace("scriptiD");
    }

    /**
     * Marks the leaf "scriptID" with operation "merge".
     */
    public void markScriptiDMerge() throws JNCException {
        markLeafMerge("scriptiD");
    }

    /**
     * Marks the leaf "scriptID" with operation "create".
     */
    public void markScriptiDCreate() throws JNCException {
        markLeafCreate("scriptiD");
    }

    /**
     * Marks the leaf "scriptID" with operation "delete".
     */
    public void markScriptiDDelete() throws JNCException {
        markLeafDelete("scriptiD");
    }

    /* Access methods for optional leaf child: "scriptMgmtJobStatus". */

    /**
     * Gets the value for child leaf "scriptMgmtJobStatus".
     * @return The value of the leaf.
     */
    public YangUInt32 getScriptMgmtJobStatusValue() throws JNCException {
        return (YangUInt32)getValue("scriptMgmtJobStatus");
    }

    /**
     * Sets the value for child leaf "scriptMgmtJobStatus",
     * using instance of generated typedef class.
     * @param scriptMgmtJobStatusValue The value to set.
     * @param scriptMgmtJobStatusValue used during instantiation.
     */
    public void setScriptMgmtJobStatusValue(YangUInt32 scriptMgmtJobStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptMgmtJobStatus",
            scriptMgmtJobStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptMgmtJobStatus",
     * using Java primitive values.
     * @param scriptMgmtJobStatusValue used during instantiation.
     */
    public void setScriptMgmtJobStatusValue(long scriptMgmtJobStatusValue)
            throws JNCException {
        setScriptMgmtJobStatusValue(new YangUInt32(scriptMgmtJobStatusValue));
    }

    /**
     * Sets the value for child leaf "scriptMgmtJobStatus",
     * using a String value.
     * @param scriptMgmtJobStatusValue used during instantiation.
     */
    public void setScriptMgmtJobStatusValue(String scriptMgmtJobStatusValue)
            throws JNCException {
        setScriptMgmtJobStatusValue(new YangUInt32(scriptMgmtJobStatusValue));
    }

    /**
     * Unsets the value for child leaf "scriptMgmtJobStatus".
     */
    public void unsetScriptMgmtJobStatusValue() throws JNCException {
        delete("scriptMgmtJobStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptMgmtJobStatus" leaf will not have a value.
     */
    public void addScriptMgmtJobStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptMgmtJobStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptMgmtJobStatus" with operation "replace".
     */
    public void markScriptMgmtJobStatusReplace() throws JNCException {
        markLeafReplace("scriptMgmtJobStatus");
    }

    /**
     * Marks the leaf "scriptMgmtJobStatus" with operation "merge".
     */
    public void markScriptMgmtJobStatusMerge() throws JNCException {
        markLeafMerge("scriptMgmtJobStatus");
    }

    /**
     * Marks the leaf "scriptMgmtJobStatus" with operation "create".
     */
    public void markScriptMgmtJobStatusCreate() throws JNCException {
        markLeafCreate("scriptMgmtJobStatus");
    }

    /**
     * Marks the leaf "scriptMgmtJobStatus" with operation "delete".
     */
    public void markScriptMgmtJobStatusDelete() throws JNCException {
        markLeafDelete("scriptMgmtJobStatus");
    }

    /* Access methods for optional leaf child: "scriptName". */

    /**
     * Gets the value for child leaf "scriptName".
     * @return The value of the leaf.
     */
    public YangString getScriptNameValue() throws JNCException {
        return (YangString)getValue("scriptName");
    }

    /**
     * Sets the value for child leaf "scriptName",
     * using instance of generated typedef class.
     * @param scriptNameValue The value to set.
     * @param scriptNameValue used during instantiation.
     */
    public void setScriptNameValue(YangString scriptNameValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptName",
            scriptNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptName",
     * using a String value.
     * @param scriptNameValue used during instantiation.
     */
    public void setScriptNameValue(String scriptNameValue) throws JNCException {
        setScriptNameValue(new YangString(scriptNameValue));
    }

    /**
     * Unsets the value for child leaf "scriptName".
     */
    public void unsetScriptNameValue() throws JNCException {
        delete("scriptName");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptName" leaf will not have a value.
     */
    public void addScriptName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptName",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptName" with operation "replace".
     */
    public void markScriptNameReplace() throws JNCException {
        markLeafReplace("scriptName");
    }

    /**
     * Marks the leaf "scriptName" with operation "merge".
     */
    public void markScriptNameMerge() throws JNCException {
        markLeafMerge("scriptName");
    }

    /**
     * Marks the leaf "scriptName" with operation "create".
     */
    public void markScriptNameCreate() throws JNCException {
        markLeafCreate("scriptName");
    }

    /**
     * Marks the leaf "scriptName" with operation "delete".
     */
    public void markScriptNameDelete() throws JNCException {
        markLeafDelete("scriptName");
    }

    /* Access methods for optional leaf child: "scriptParams". */

    /**
     * Gets the value for child leaf "scriptParams".
     * @return The value of the leaf.
     */
    public YangString getScriptParamsValue() throws JNCException {
        return (YangString)getValue("scriptParams");
    }

    /**
     * Sets the value for child leaf "scriptParams",
     * using instance of generated typedef class.
     * @param scriptParamsValue The value to set.
     * @param scriptParamsValue used during instantiation.
     */
    public void setScriptParamsValue(YangString scriptParamsValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptParams",
            scriptParamsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptParams",
     * using a String value.
     * @param scriptParamsValue used during instantiation.
     */
    public void setScriptParamsValue(String scriptParamsValue)
            throws JNCException {
        setScriptParamsValue(new YangString(scriptParamsValue));
    }

    /**
     * Unsets the value for child leaf "scriptParams".
     */
    public void unsetScriptParamsValue() throws JNCException {
        delete("scriptParams");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptParams" leaf will not have a value.
     */
    public void addScriptParams() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptParams",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptParams" with operation "replace".
     */
    public void markScriptParamsReplace() throws JNCException {
        markLeafReplace("scriptParams");
    }

    /**
     * Marks the leaf "scriptParams" with operation "merge".
     */
    public void markScriptParamsMerge() throws JNCException {
        markLeafMerge("scriptParams");
    }

    /**
     * Marks the leaf "scriptParams" with operation "create".
     */
    public void markScriptParamsCreate() throws JNCException {
        markLeafCreate("scriptParams");
    }

    /**
     * Marks the leaf "scriptParams" with operation "delete".
     */
    public void markScriptParamsDelete() throws JNCException {
        markLeafDelete("scriptParams");
    }

    /* Access methods for optional leaf child: "scriptType". */

    /**
     * Gets the value for child leaf "scriptType".
     * @return The value of the leaf.
     */
    public YangUInt32 getScriptTypeValue() throws JNCException {
        return (YangUInt32)getValue("scriptType");
    }

    /**
     * Sets the value for child leaf "scriptType",
     * using instance of generated typedef class.
     * @param scriptTypeValue The value to set.
     * @param scriptTypeValue used during instantiation.
     */
    public void setScriptTypeValue(YangUInt32 scriptTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptType",
            scriptTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptType",
     * using Java primitive values.
     * @param scriptTypeValue used during instantiation.
     */
    public void setScriptTypeValue(long scriptTypeValue) throws JNCException {
        setScriptTypeValue(new YangUInt32(scriptTypeValue));
    }

    /**
     * Sets the value for child leaf "scriptType",
     * using a String value.
     * @param scriptTypeValue used during instantiation.
     */
    public void setScriptTypeValue(String scriptTypeValue) throws JNCException {
        setScriptTypeValue(new YangUInt32(scriptTypeValue));
    }

    /**
     * Unsets the value for child leaf "scriptType".
     */
    public void unsetScriptTypeValue() throws JNCException {
        delete("scriptType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptType" leaf will not have a value.
     */
    public void addScriptType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptType" with operation "replace".
     */
    public void markScriptTypeReplace() throws JNCException {
        markLeafReplace("scriptType");
    }

    /**
     * Marks the leaf "scriptType" with operation "merge".
     */
    public void markScriptTypeMerge() throws JNCException {
        markLeafMerge("scriptType");
    }

    /**
     * Marks the leaf "scriptType" with operation "create".
     */
    public void markScriptTypeCreate() throws JNCException {
        markLeafCreate("scriptType");
    }

    /**
     * Marks the leaf "scriptType" with operation "delete".
     */
    public void markScriptTypeDelete() throws JNCException {
        markLeafDelete("scriptType");
    }

    /* Access methods for optional leaf child: "scriptVersion". */

    /**
     * Gets the value for child leaf "scriptVersion".
     * @return The value of the leaf.
     */
    public YangString getScriptVersionValue() throws JNCException {
        return (YangString)getValue("scriptVersion");
    }

    /**
     * Sets the value for child leaf "scriptVersion",
     * using instance of generated typedef class.
     * @param scriptVersionValue The value to set.
     * @param scriptVersionValue used during instantiation.
     */
    public void setScriptVersionValue(YangString scriptVersionValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptVersion",
            scriptVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "scriptVersion",
     * using a String value.
     * @param scriptVersionValue used during instantiation.
     */
    public void setScriptVersionValue(String scriptVersionValue)
            throws JNCException {
        setScriptVersionValue(new YangString(scriptVersionValue));
    }

    /**
     * Unsets the value for child leaf "scriptVersion".
     */
    public void unsetScriptVersionValue() throws JNCException {
        delete("scriptVersion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "scriptVersion" leaf will not have a value.
     */
    public void addScriptVersion() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "scriptVersion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "scriptVersion" with operation "replace".
     */
    public void markScriptVersionReplace() throws JNCException {
        markLeafReplace("scriptVersion");
    }

    /**
     * Marks the leaf "scriptVersion" with operation "merge".
     */
    public void markScriptVersionMerge() throws JNCException {
        markLeafMerge("scriptVersion");
    }

    /**
     * Marks the leaf "scriptVersion" with operation "create".
     */
    public void markScriptVersionCreate() throws JNCException {
        markLeafCreate("scriptVersion");
    }

    /**
     * Marks the leaf "scriptVersion" with operation "delete".
     */
    public void markScriptVersionDelete() throws JNCException {
        markLeafDelete("scriptVersion");
    }

    /* Access methods for optional leaf child: "sequence". */

    /**
     * Gets the value for child leaf "sequence".
     * @return The value of the leaf.
     */
    public YangString getSequenceValue() throws JNCException {
        return (YangString)getValue("sequence");
    }

    /**
     * Sets the value for child leaf "sequence",
     * using instance of generated typedef class.
     * @param sequenceValue The value to set.
     * @param sequenceValue used during instantiation.
     */
    public void setSequenceValue(YangString sequenceValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "sequence",
            sequenceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sequence",
     * using a String value.
     * @param sequenceValue used during instantiation.
     */
    public void setSequenceValue(String sequenceValue) throws JNCException {
        setSequenceValue(new YangString(sequenceValue));
    }

    /**
     * Unsets the value for child leaf "sequence".
     */
    public void unsetSequenceValue() throws JNCException {
        delete("sequence");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sequence" leaf will not have a value.
     */
    public void addSequence() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "sequence",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sequence" with operation "replace".
     */
    public void markSequenceReplace() throws JNCException {
        markLeafReplace("sequence");
    }

    /**
     * Marks the leaf "sequence" with operation "merge".
     */
    public void markSequenceMerge() throws JNCException {
        markLeafMerge("sequence");
    }

    /**
     * Marks the leaf "sequence" with operation "create".
     */
    public void markSequenceCreate() throws JNCException {
        markLeafCreate("sequence");
    }

    /**
     * Marks the leaf "sequence" with operation "delete".
     */
    public void markSequenceDelete() throws JNCException {
        markLeafDelete("sequence");
    }

    /* Access methods for optional leaf child: "startTime". */

    /**
     * Gets the value for child leaf "startTime".
     * @return The value of the leaf.
     */
    public YangString getStartTimeValue() throws JNCException {
        return (YangString)getValue("startTime");
    }

    /**
     * Sets the value for child leaf "startTime",
     * using instance of generated typedef class.
     * @param startTimeValue The value to set.
     * @param startTimeValue used during instantiation.
     */
    public void setStartTimeValue(YangString startTimeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "startTime",
            startTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "startTime",
     * using a String value.
     * @param startTimeValue used during instantiation.
     */
    public void setStartTimeValue(String startTimeValue) throws JNCException {
        setStartTimeValue(new YangString(startTimeValue));
    }

    /**
     * Unsets the value for child leaf "startTime".
     */
    public void unsetStartTimeValue() throws JNCException {
        delete("startTime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "startTime" leaf will not have a value.
     */
    public void addStartTime() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "startTime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "startTime" with operation "replace".
     */
    public void markStartTimeReplace() throws JNCException {
        markLeafReplace("startTime");
    }

    /**
     * Marks the leaf "startTime" with operation "merge".
     */
    public void markStartTimeMerge() throws JNCException {
        markLeafMerge("startTime");
    }

    /**
     * Marks the leaf "startTime" with operation "create".
     */
    public void markStartTimeCreate() throws JNCException {
        markLeafCreate("startTime");
    }

    /**
     * Marks the leaf "startTime" with operation "delete".
     */
    public void markStartTimeDelete() throws JNCException {
        markLeafDelete("startTime");
    }

    /* Access methods for optional leaf child: "nodeName". */

    /**
     * Gets the value for child leaf "nodeName".
     * @return The value of the leaf.
     */
    public YangString getNodeNameValue() throws JNCException {
        return (YangString)getValue("nodeName");
    }

    /**
     * Sets the value for child leaf "nodeName",
     * using instance of generated typedef class.
     * @param nodeNameValue The value to set.
     * @param nodeNameValue used during instantiation.
     */
    public void setNodeNameValue(YangString nodeNameValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "nodeName",
            nodeNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "nodeName",
     * using a String value.
     * @param nodeNameValue used during instantiation.
     */
    public void setNodeNameValue(String nodeNameValue) throws JNCException {
        setNodeNameValue(new YangString(nodeNameValue));
    }

    /**
     * Unsets the value for child leaf "nodeName".
     */
    public void unsetNodeNameValue() throws JNCException {
        delete("nodeName");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "nodeName" leaf will not have a value.
     */
    public void addNodeName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "nodeName",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "nodeName" with operation "replace".
     */
    public void markNodeNameReplace() throws JNCException {
        markLeafReplace("nodeName");
    }

    /**
     * Marks the leaf "nodeName" with operation "merge".
     */
    public void markNodeNameMerge() throws JNCException {
        markLeafMerge("nodeName");
    }

    /**
     * Marks the leaf "nodeName" with operation "create".
     */
    public void markNodeNameCreate() throws JNCException {
        markLeafCreate("nodeName");
    }

    /**
     * Marks the leaf "nodeName" with operation "delete".
     */
    public void markNodeNameDelete() throws JNCException {
        markLeafDelete("nodeName");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
