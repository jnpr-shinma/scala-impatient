/* 
 * @(#)StagedImage.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.yang.mo.deviceManagement.stagedImage.IdPerms;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/stagedImage"
 * <p>
 * See line 905 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class StagedImage extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("stagedImage");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty StagedImage object.
     */
    public StagedImage() {
        super(Devicemgt.NAMESPACE, "stagedImage");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized StagedImage object,
     * 
     * @param uuidValue Key argument of child.
     */
    public StagedImage(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "stagedImage");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized StagedImage object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public StagedImage(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "stagedImage");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public StagedImage clone() {
        StagedImage copy;
        try {
            copy = new StagedImage(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (StagedImage)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public StagedImage cloneShallow() {
        StagedImage copy;
        try {
            copy = new StagedImage(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (StagedImage)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "domainId",
            "imageFileName",
            "imageVersion",
            "imageFilePath",
            "imageSize",
            "supportedPlatforms",
            "supportedSeries",
            "series",
            "userNotes",
            "uploadedTime",
            "uploadStatus",
            "decodeCompletionStatus",
            "checksumStatus",
            "lastChecksumTime",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "domainId". */

    /**
     * Gets the value for child leaf "domainId".
     * @return The value of the leaf.
     */
    public YangUInt32 getDomainIdValue() throws JNCException {
        return (YangUInt32)getValue("domainId");
    }

    /**
     * Sets the value for child leaf "domainId",
     * using instance of generated typedef class.
     * @param domainIdValue The value to set.
     * @param domainIdValue used during instantiation.
     */
    public void setDomainIdValue(YangUInt32 domainIdValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "domainId",
            domainIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "domainId",
     * using Java primitive values.
     * @param domainIdValue used during instantiation.
     */
    public void setDomainIdValue(long domainIdValue) throws JNCException {
        setDomainIdValue(new YangUInt32(domainIdValue));
    }

    /**
     * Sets the value for child leaf "domainId",
     * using a String value.
     * @param domainIdValue used during instantiation.
     */
    public void setDomainIdValue(String domainIdValue) throws JNCException {
        setDomainIdValue(new YangUInt32(domainIdValue));
    }

    /**
     * Unsets the value for child leaf "domainId".
     */
    public void unsetDomainIdValue() throws JNCException {
        delete("domainId");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "domainId" leaf will not have a value.
     */
    public void addDomainId() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "domainId",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "domainId" with operation "replace".
     */
    public void markDomainIdReplace() throws JNCException {
        markLeafReplace("domainId");
    }

    /**
     * Marks the leaf "domainId" with operation "merge".
     */
    public void markDomainIdMerge() throws JNCException {
        markLeafMerge("domainId");
    }

    /**
     * Marks the leaf "domainId" with operation "create".
     */
    public void markDomainIdCreate() throws JNCException {
        markLeafCreate("domainId");
    }

    /**
     * Marks the leaf "domainId" with operation "delete".
     */
    public void markDomainIdDelete() throws JNCException {
        markLeafDelete("domainId");
    }

    /* Access methods for optional leaf child: "imageFileName". */

    /**
     * Gets the value for child leaf "imageFileName".
     * @return The value of the leaf.
     */
    public YangString getImageFileNameValue() throws JNCException {
        return (YangString)getValue("imageFileName");
    }

    /**
     * Sets the value for child leaf "imageFileName",
     * using instance of generated typedef class.
     * @param imageFileNameValue The value to set.
     * @param imageFileNameValue used during instantiation.
     */
    public void setImageFileNameValue(YangString imageFileNameValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageFileName",
            imageFileNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imageFileName",
     * using a String value.
     * @param imageFileNameValue used during instantiation.
     */
    public void setImageFileNameValue(String imageFileNameValue)
            throws JNCException {
        setImageFileNameValue(new YangString(imageFileNameValue));
    }

    /**
     * Unsets the value for child leaf "imageFileName".
     */
    public void unsetImageFileNameValue() throws JNCException {
        delete("imageFileName");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imageFileName" leaf will not have a value.
     */
    public void addImageFileName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageFileName",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imageFileName" with operation "replace".
     */
    public void markImageFileNameReplace() throws JNCException {
        markLeafReplace("imageFileName");
    }

    /**
     * Marks the leaf "imageFileName" with operation "merge".
     */
    public void markImageFileNameMerge() throws JNCException {
        markLeafMerge("imageFileName");
    }

    /**
     * Marks the leaf "imageFileName" with operation "create".
     */
    public void markImageFileNameCreate() throws JNCException {
        markLeafCreate("imageFileName");
    }

    /**
     * Marks the leaf "imageFileName" with operation "delete".
     */
    public void markImageFileNameDelete() throws JNCException {
        markLeafDelete("imageFileName");
    }

    /* Access methods for optional leaf child: "imageVersion". */

    /**
     * Gets the value for child leaf "imageVersion".
     * @return The value of the leaf.
     */
    public YangString getImageVersionValue() throws JNCException {
        return (YangString)getValue("imageVersion");
    }

    /**
     * Sets the value for child leaf "imageVersion",
     * using instance of generated typedef class.
     * @param imageVersionValue The value to set.
     * @param imageVersionValue used during instantiation.
     */
    public void setImageVersionValue(YangString imageVersionValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageVersion",
            imageVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imageVersion",
     * using a String value.
     * @param imageVersionValue used during instantiation.
     */
    public void setImageVersionValue(String imageVersionValue)
            throws JNCException {
        setImageVersionValue(new YangString(imageVersionValue));
    }

    /**
     * Unsets the value for child leaf "imageVersion".
     */
    public void unsetImageVersionValue() throws JNCException {
        delete("imageVersion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imageVersion" leaf will not have a value.
     */
    public void addImageVersion() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageVersion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imageVersion" with operation "replace".
     */
    public void markImageVersionReplace() throws JNCException {
        markLeafReplace("imageVersion");
    }

    /**
     * Marks the leaf "imageVersion" with operation "merge".
     */
    public void markImageVersionMerge() throws JNCException {
        markLeafMerge("imageVersion");
    }

    /**
     * Marks the leaf "imageVersion" with operation "create".
     */
    public void markImageVersionCreate() throws JNCException {
        markLeafCreate("imageVersion");
    }

    /**
     * Marks the leaf "imageVersion" with operation "delete".
     */
    public void markImageVersionDelete() throws JNCException {
        markLeafDelete("imageVersion");
    }

    /* Access methods for optional leaf child: "imageFilePath". */

    /**
     * Gets the value for child leaf "imageFilePath".
     * @return The value of the leaf.
     */
    public YangString getImageFilePathValue() throws JNCException {
        return (YangString)getValue("imageFilePath");
    }

    /**
     * Sets the value for child leaf "imageFilePath",
     * using instance of generated typedef class.
     * @param imageFilePathValue The value to set.
     * @param imageFilePathValue used during instantiation.
     */
    public void setImageFilePathValue(YangString imageFilePathValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageFilePath",
            imageFilePathValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imageFilePath",
     * using a String value.
     * @param imageFilePathValue used during instantiation.
     */
    public void setImageFilePathValue(String imageFilePathValue)
            throws JNCException {
        setImageFilePathValue(new YangString(imageFilePathValue));
    }

    /**
     * Unsets the value for child leaf "imageFilePath".
     */
    public void unsetImageFilePathValue() throws JNCException {
        delete("imageFilePath");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imageFilePath" leaf will not have a value.
     */
    public void addImageFilePath() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageFilePath",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imageFilePath" with operation "replace".
     */
    public void markImageFilePathReplace() throws JNCException {
        markLeafReplace("imageFilePath");
    }

    /**
     * Marks the leaf "imageFilePath" with operation "merge".
     */
    public void markImageFilePathMerge() throws JNCException {
        markLeafMerge("imageFilePath");
    }

    /**
     * Marks the leaf "imageFilePath" with operation "create".
     */
    public void markImageFilePathCreate() throws JNCException {
        markLeafCreate("imageFilePath");
    }

    /**
     * Marks the leaf "imageFilePath" with operation "delete".
     */
    public void markImageFilePathDelete() throws JNCException {
        markLeafDelete("imageFilePath");
    }

    /* Access methods for optional leaf child: "imageSize". */

    /**
     * Gets the value for child leaf "imageSize".
     * @return The value of the leaf.
     */
    public YangUInt32 getImageSizeValue() throws JNCException {
        return (YangUInt32)getValue("imageSize");
    }

    /**
     * Sets the value for child leaf "imageSize",
     * using instance of generated typedef class.
     * @param imageSizeValue The value to set.
     * @param imageSizeValue used during instantiation.
     */
    public void setImageSizeValue(YangUInt32 imageSizeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageSize",
            imageSizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "imageSize",
     * using Java primitive values.
     * @param imageSizeValue used during instantiation.
     */
    public void setImageSizeValue(long imageSizeValue) throws JNCException {
        setImageSizeValue(new YangUInt32(imageSizeValue));
    }

    /**
     * Sets the value for child leaf "imageSize",
     * using a String value.
     * @param imageSizeValue used during instantiation.
     */
    public void setImageSizeValue(String imageSizeValue) throws JNCException {
        setImageSizeValue(new YangUInt32(imageSizeValue));
    }

    /**
     * Unsets the value for child leaf "imageSize".
     */
    public void unsetImageSizeValue() throws JNCException {
        delete("imageSize");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "imageSize" leaf will not have a value.
     */
    public void addImageSize() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "imageSize",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "imageSize" with operation "replace".
     */
    public void markImageSizeReplace() throws JNCException {
        markLeafReplace("imageSize");
    }

    /**
     * Marks the leaf "imageSize" with operation "merge".
     */
    public void markImageSizeMerge() throws JNCException {
        markLeafMerge("imageSize");
    }

    /**
     * Marks the leaf "imageSize" with operation "create".
     */
    public void markImageSizeCreate() throws JNCException {
        markLeafCreate("imageSize");
    }

    /**
     * Marks the leaf "imageSize" with operation "delete".
     */
    public void markImageSizeDelete() throws JNCException {
        markLeafDelete("imageSize");
    }

    /* Access methods for optional leaf child: "supportedPlatforms". */

    /**
     * Gets the value for child leaf "supportedPlatforms".
     * @return The value of the leaf.
     */
    public YangString getSupportedPlatformsValue() throws JNCException {
        return (YangString)getValue("supportedPlatforms");
    }

    /**
     * Sets the value for child leaf "supportedPlatforms",
     * using instance of generated typedef class.
     * @param supportedPlatformsValue The value to set.
     * @param supportedPlatformsValue used during instantiation.
     */
    public void setSupportedPlatformsValue(YangString supportedPlatformsValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "supportedPlatforms",
            supportedPlatformsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "supportedPlatforms",
     * using a String value.
     * @param supportedPlatformsValue used during instantiation.
     */
    public void setSupportedPlatformsValue(String supportedPlatformsValue)
            throws JNCException {
        setSupportedPlatformsValue(new YangString(supportedPlatformsValue));
    }

    /**
     * Unsets the value for child leaf "supportedPlatforms".
     */
    public void unsetSupportedPlatformsValue() throws JNCException {
        delete("supportedPlatforms");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "supportedPlatforms" leaf will not have a value.
     */
    public void addSupportedPlatforms() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "supportedPlatforms",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "supportedPlatforms" with operation "replace".
     */
    public void markSupportedPlatformsReplace() throws JNCException {
        markLeafReplace("supportedPlatforms");
    }

    /**
     * Marks the leaf "supportedPlatforms" with operation "merge".
     */
    public void markSupportedPlatformsMerge() throws JNCException {
        markLeafMerge("supportedPlatforms");
    }

    /**
     * Marks the leaf "supportedPlatforms" with operation "create".
     */
    public void markSupportedPlatformsCreate() throws JNCException {
        markLeafCreate("supportedPlatforms");
    }

    /**
     * Marks the leaf "supportedPlatforms" with operation "delete".
     */
    public void markSupportedPlatformsDelete() throws JNCException {
        markLeafDelete("supportedPlatforms");
    }

    /* Access methods for optional leaf child: "supportedSeries". */

    /**
     * Gets the value for child leaf "supportedSeries".
     * @return The value of the leaf.
     */
    public YangString getSupportedSeriesValue() throws JNCException {
        return (YangString)getValue("supportedSeries");
    }

    /**
     * Sets the value for child leaf "supportedSeries",
     * using instance of generated typedef class.
     * @param supportedSeriesValue The value to set.
     * @param supportedSeriesValue used during instantiation.
     */
    public void setSupportedSeriesValue(YangString supportedSeriesValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "supportedSeries",
            supportedSeriesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "supportedSeries",
     * using a String value.
     * @param supportedSeriesValue used during instantiation.
     */
    public void setSupportedSeriesValue(String supportedSeriesValue)
            throws JNCException {
        setSupportedSeriesValue(new YangString(supportedSeriesValue));
    }

    /**
     * Unsets the value for child leaf "supportedSeries".
     */
    public void unsetSupportedSeriesValue() throws JNCException {
        delete("supportedSeries");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "supportedSeries" leaf will not have a value.
     */
    public void addSupportedSeries() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "supportedSeries",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "supportedSeries" with operation "replace".
     */
    public void markSupportedSeriesReplace() throws JNCException {
        markLeafReplace("supportedSeries");
    }

    /**
     * Marks the leaf "supportedSeries" with operation "merge".
     */
    public void markSupportedSeriesMerge() throws JNCException {
        markLeafMerge("supportedSeries");
    }

    /**
     * Marks the leaf "supportedSeries" with operation "create".
     */
    public void markSupportedSeriesCreate() throws JNCException {
        markLeafCreate("supportedSeries");
    }

    /**
     * Marks the leaf "supportedSeries" with operation "delete".
     */
    public void markSupportedSeriesDelete() throws JNCException {
        markLeafDelete("supportedSeries");
    }

    /* Access methods for optional leaf child: "series". */

    /**
     * Gets the value for child leaf "series".
     * @return The value of the leaf.
     */
    public YangUInt32 getSeriesValue() throws JNCException {
        return (YangUInt32)getValue("series");
    }

    /**
     * Sets the value for child leaf "series",
     * using instance of generated typedef class.
     * @param seriesValue The value to set.
     * @param seriesValue used during instantiation.
     */
    public void setSeriesValue(YangUInt32 seriesValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "series",
            seriesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "series",
     * using Java primitive values.
     * @param seriesValue used during instantiation.
     */
    public void setSeriesValue(long seriesValue) throws JNCException {
        setSeriesValue(new YangUInt32(seriesValue));
    }

    /**
     * Sets the value for child leaf "series",
     * using a String value.
     * @param seriesValue used during instantiation.
     */
    public void setSeriesValue(String seriesValue) throws JNCException {
        setSeriesValue(new YangUInt32(seriesValue));
    }

    /**
     * Unsets the value for child leaf "series".
     */
    public void unsetSeriesValue() throws JNCException {
        delete("series");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "series" leaf will not have a value.
     */
    public void addSeries() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "series",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "series" with operation "replace".
     */
    public void markSeriesReplace() throws JNCException {
        markLeafReplace("series");
    }

    /**
     * Marks the leaf "series" with operation "merge".
     */
    public void markSeriesMerge() throws JNCException {
        markLeafMerge("series");
    }

    /**
     * Marks the leaf "series" with operation "create".
     */
    public void markSeriesCreate() throws JNCException {
        markLeafCreate("series");
    }

    /**
     * Marks the leaf "series" with operation "delete".
     */
    public void markSeriesDelete() throws JNCException {
        markLeafDelete("series");
    }

    /* Access methods for optional leaf child: "userNotes". */

    /**
     * Gets the value for child leaf "userNotes".
     * @return The value of the leaf.
     */
    public YangString getUserNotesValue() throws JNCException {
        return (YangString)getValue("userNotes");
    }

    /**
     * Sets the value for child leaf "userNotes",
     * using instance of generated typedef class.
     * @param userNotesValue The value to set.
     * @param userNotesValue used during instantiation.
     */
    public void setUserNotesValue(YangString userNotesValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "userNotes",
            userNotesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "userNotes",
     * using a String value.
     * @param userNotesValue used during instantiation.
     */
    public void setUserNotesValue(String userNotesValue) throws JNCException {
        setUserNotesValue(new YangString(userNotesValue));
    }

    /**
     * Unsets the value for child leaf "userNotes".
     */
    public void unsetUserNotesValue() throws JNCException {
        delete("userNotes");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "userNotes" leaf will not have a value.
     */
    public void addUserNotes() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "userNotes",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "userNotes" with operation "replace".
     */
    public void markUserNotesReplace() throws JNCException {
        markLeafReplace("userNotes");
    }

    /**
     * Marks the leaf "userNotes" with operation "merge".
     */
    public void markUserNotesMerge() throws JNCException {
        markLeafMerge("userNotes");
    }

    /**
     * Marks the leaf "userNotes" with operation "create".
     */
    public void markUserNotesCreate() throws JNCException {
        markLeafCreate("userNotes");
    }

    /**
     * Marks the leaf "userNotes" with operation "delete".
     */
    public void markUserNotesDelete() throws JNCException {
        markLeafDelete("userNotes");
    }

    /* Access methods for optional leaf child: "uploadedTime". */

    /**
     * Gets the value for child leaf "uploadedTime".
     * @return The value of the leaf.
     */
    public YangUInt32 getUploadedTimeValue() throws JNCException {
        return (YangUInt32)getValue("uploadedTime");
    }

    /**
     * Sets the value for child leaf "uploadedTime",
     * using instance of generated typedef class.
     * @param uploadedTimeValue The value to set.
     * @param uploadedTimeValue used during instantiation.
     */
    public void setUploadedTimeValue(YangUInt32 uploadedTimeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "uploadedTime",
            uploadedTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uploadedTime",
     * using Java primitive values.
     * @param uploadedTimeValue used during instantiation.
     */
    public void setUploadedTimeValue(long uploadedTimeValue)
            throws JNCException {
        setUploadedTimeValue(new YangUInt32(uploadedTimeValue));
    }

    /**
     * Sets the value for child leaf "uploadedTime",
     * using a String value.
     * @param uploadedTimeValue used during instantiation.
     */
    public void setUploadedTimeValue(String uploadedTimeValue)
            throws JNCException {
        setUploadedTimeValue(new YangUInt32(uploadedTimeValue));
    }

    /**
     * Unsets the value for child leaf "uploadedTime".
     */
    public void unsetUploadedTimeValue() throws JNCException {
        delete("uploadedTime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uploadedTime" leaf will not have a value.
     */
    public void addUploadedTime() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "uploadedTime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "uploadedTime" with operation "replace".
     */
    public void markUploadedTimeReplace() throws JNCException {
        markLeafReplace("uploadedTime");
    }

    /**
     * Marks the leaf "uploadedTime" with operation "merge".
     */
    public void markUploadedTimeMerge() throws JNCException {
        markLeafMerge("uploadedTime");
    }

    /**
     * Marks the leaf "uploadedTime" with operation "create".
     */
    public void markUploadedTimeCreate() throws JNCException {
        markLeafCreate("uploadedTime");
    }

    /**
     * Marks the leaf "uploadedTime" with operation "delete".
     */
    public void markUploadedTimeDelete() throws JNCException {
        markLeafDelete("uploadedTime");
    }

    /* Access methods for optional leaf child: "uploadStatus". */

    /**
     * Gets the value for child leaf "uploadStatus".
     * @return The value of the leaf.
     */
    public YangUInt32 getUploadStatusValue() throws JNCException {
        return (YangUInt32)getValue("uploadStatus");
    }

    /**
     * Sets the value for child leaf "uploadStatus",
     * using instance of generated typedef class.
     * @param uploadStatusValue The value to set.
     * @param uploadStatusValue used during instantiation.
     */
    public void setUploadStatusValue(YangUInt32 uploadStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "uploadStatus",
            uploadStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uploadStatus",
     * using Java primitive values.
     * @param uploadStatusValue used during instantiation.
     */
    public void setUploadStatusValue(long uploadStatusValue)
            throws JNCException {
        setUploadStatusValue(new YangUInt32(uploadStatusValue));
    }

    /**
     * Sets the value for child leaf "uploadStatus",
     * using a String value.
     * @param uploadStatusValue used during instantiation.
     */
    public void setUploadStatusValue(String uploadStatusValue)
            throws JNCException {
        setUploadStatusValue(new YangUInt32(uploadStatusValue));
    }

    /**
     * Unsets the value for child leaf "uploadStatus".
     */
    public void unsetUploadStatusValue() throws JNCException {
        delete("uploadStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uploadStatus" leaf will not have a value.
     */
    public void addUploadStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "uploadStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "uploadStatus" with operation "replace".
     */
    public void markUploadStatusReplace() throws JNCException {
        markLeafReplace("uploadStatus");
    }

    /**
     * Marks the leaf "uploadStatus" with operation "merge".
     */
    public void markUploadStatusMerge() throws JNCException {
        markLeafMerge("uploadStatus");
    }

    /**
     * Marks the leaf "uploadStatus" with operation "create".
     */
    public void markUploadStatusCreate() throws JNCException {
        markLeafCreate("uploadStatus");
    }

    /**
     * Marks the leaf "uploadStatus" with operation "delete".
     */
    public void markUploadStatusDelete() throws JNCException {
        markLeafDelete("uploadStatus");
    }

    /* Access methods for optional leaf child: "decodeCompletionStatus". */

    /**
     * Gets the value for child leaf "decodeCompletionStatus".
     * @return The value of the leaf.
     */
    public YangString getDecodeCompletionStatusValue() throws JNCException {
        return (YangString)getValue("decodeCompletionStatus");
    }

    /**
     * Sets the value for child leaf "decodeCompletionStatus",
     * using instance of generated typedef class.
     * @param decodeCompletionStatusValue The value to set.
     * @param decodeCompletionStatusValue used during instantiation.
     */
    public void setDecodeCompletionStatusValue(YangString decodeCompletionStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "decodeCompletionStatus",
            decodeCompletionStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "decodeCompletionStatus",
     * using a String value.
     * @param decodeCompletionStatusValue used during instantiation.
     */
    public void setDecodeCompletionStatusValue(String decodeCompletionStatusValue)
            throws JNCException {
        setDecodeCompletionStatusValue(new YangString(decodeCompletionStatusValue));
    }

    /**
     * Unsets the value for child leaf "decodeCompletionStatus".
     */
    public void unsetDecodeCompletionStatusValue() throws JNCException {
        delete("decodeCompletionStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "decodeCompletionStatus" leaf will not have a value.
     */
    public void addDecodeCompletionStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "decodeCompletionStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "decodeCompletionStatus" with operation "replace".
     */
    public void markDecodeCompletionStatusReplace() throws JNCException {
        markLeafReplace("decodeCompletionStatus");
    }

    /**
     * Marks the leaf "decodeCompletionStatus" with operation "merge".
     */
    public void markDecodeCompletionStatusMerge() throws JNCException {
        markLeafMerge("decodeCompletionStatus");
    }

    /**
     * Marks the leaf "decodeCompletionStatus" with operation "create".
     */
    public void markDecodeCompletionStatusCreate() throws JNCException {
        markLeafCreate("decodeCompletionStatus");
    }

    /**
     * Marks the leaf "decodeCompletionStatus" with operation "delete".
     */
    public void markDecodeCompletionStatusDelete() throws JNCException {
        markLeafDelete("decodeCompletionStatus");
    }

    /* Access methods for optional leaf child: "checksumStatus". */

    /**
     * Gets the value for child leaf "checksumStatus".
     * @return The value of the leaf.
     */
    public YangUInt32 getChecksumStatusValue() throws JNCException {
        return (YangUInt32)getValue("checksumStatus");
    }

    /**
     * Sets the value for child leaf "checksumStatus",
     * using instance of generated typedef class.
     * @param checksumStatusValue The value to set.
     * @param checksumStatusValue used during instantiation.
     */
    public void setChecksumStatusValue(YangUInt32 checksumStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "checksumStatus",
            checksumStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "checksumStatus",
     * using Java primitive values.
     * @param checksumStatusValue used during instantiation.
     */
    public void setChecksumStatusValue(long checksumStatusValue)
            throws JNCException {
        setChecksumStatusValue(new YangUInt32(checksumStatusValue));
    }

    /**
     * Sets the value for child leaf "checksumStatus",
     * using a String value.
     * @param checksumStatusValue used during instantiation.
     */
    public void setChecksumStatusValue(String checksumStatusValue)
            throws JNCException {
        setChecksumStatusValue(new YangUInt32(checksumStatusValue));
    }

    /**
     * Unsets the value for child leaf "checksumStatus".
     */
    public void unsetChecksumStatusValue() throws JNCException {
        delete("checksumStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "checksumStatus" leaf will not have a value.
     */
    public void addChecksumStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "checksumStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "checksumStatus" with operation "replace".
     */
    public void markChecksumStatusReplace() throws JNCException {
        markLeafReplace("checksumStatus");
    }

    /**
     * Marks the leaf "checksumStatus" with operation "merge".
     */
    public void markChecksumStatusMerge() throws JNCException {
        markLeafMerge("checksumStatus");
    }

    /**
     * Marks the leaf "checksumStatus" with operation "create".
     */
    public void markChecksumStatusCreate() throws JNCException {
        markLeafCreate("checksumStatus");
    }

    /**
     * Marks the leaf "checksumStatus" with operation "delete".
     */
    public void markChecksumStatusDelete() throws JNCException {
        markLeafDelete("checksumStatus");
    }

    /* Access methods for optional leaf child: "lastChecksumTime". */

    /**
     * Gets the value for child leaf "lastChecksumTime".
     * @return The value of the leaf.
     */
    public YangUInt32 getLastChecksumTimeValue() throws JNCException {
        return (YangUInt32)getValue("lastChecksumTime");
    }

    /**
     * Sets the value for child leaf "lastChecksumTime",
     * using instance of generated typedef class.
     * @param lastChecksumTimeValue The value to set.
     * @param lastChecksumTimeValue used during instantiation.
     */
    public void setLastChecksumTimeValue(YangUInt32 lastChecksumTimeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "lastChecksumTime",
            lastChecksumTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lastChecksumTime",
     * using Java primitive values.
     * @param lastChecksumTimeValue used during instantiation.
     */
    public void setLastChecksumTimeValue(long lastChecksumTimeValue)
            throws JNCException {
        setLastChecksumTimeValue(new YangUInt32(lastChecksumTimeValue));
    }

    /**
     * Sets the value for child leaf "lastChecksumTime",
     * using a String value.
     * @param lastChecksumTimeValue used during instantiation.
     */
    public void setLastChecksumTimeValue(String lastChecksumTimeValue)
            throws JNCException {
        setLastChecksumTimeValue(new YangUInt32(lastChecksumTimeValue));
    }

    /**
     * Unsets the value for child leaf "lastChecksumTime".
     */
    public void unsetLastChecksumTimeValue() throws JNCException {
        delete("lastChecksumTime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lastChecksumTime" leaf will not have a value.
     */
    public void addLastChecksumTime() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "lastChecksumTime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lastChecksumTime" with operation "replace".
     */
    public void markLastChecksumTimeReplace() throws JNCException {
        markLeafReplace("lastChecksumTime");
    }

    /**
     * Marks the leaf "lastChecksumTime" with operation "merge".
     */
    public void markLastChecksumTimeMerge() throws JNCException {
        markLeafMerge("lastChecksumTime");
    }

    /**
     * Marks the leaf "lastChecksumTime" with operation "create".
     */
    public void markLastChecksumTimeCreate() throws JNCException {
        markLeafCreate("lastChecksumTime");
    }

    /**
     * Marks the leaf "lastChecksumTime" with operation "delete".
     */
    public void markLastChecksumTimeDelete() throws JNCException {
        markLeafDelete("lastChecksumTime");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
