/* 
 * @(#)PhysicalInterface.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.yang.mo.deviceManagement.physicalInterface.IdPerms;
import net.juniper.yang.mo.deviceManagement.physicalInterface.LogicalInterface;
import net.juniper.yang.mo.ietfInetTypes.IpAddress;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/physical-interface"
 * <p>
 * See line 522 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class PhysicalInterface extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("physical-interface");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty PhysicalInterface object.
     */
    public PhysicalInterface() {
        super(Devicemgt.NAMESPACE, "physical-interface");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized PhysicalInterface object,
     * 
     * @param uuidValue Key argument of child.
     */
    public PhysicalInterface(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "physical-interface");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized PhysicalInterface object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public PhysicalInterface(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "physical-interface");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public PhysicalInterface clone() {
        PhysicalInterface copy;
        try {
            copy = new PhysicalInterface(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (PhysicalInterface)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public PhysicalInterface cloneShallow() {
        PhysicalInterface copy;
        try {
            copy = new PhysicalInterface(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (PhysicalInterface)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "desc",
            "operationStatus",
            "ip",
            "adminStatus",
            "interfaceIndex",
            "linkLevelType",
            "linkType",
            "speed",
            "speedStr",
            "mtu",
            "mtuStr",
            "physAddr",
            "logicalInterface",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "desc". */

    /**
     * Gets the value for child leaf "desc".
     * @return The value of the leaf.
     */
    public YangString getDescValue() throws JNCException {
        return (YangString)getValue("desc");
    }

    /**
     * Sets the value for child leaf "desc",
     * using instance of generated typedef class.
     * @param descValue The value to set.
     * @param descValue used during instantiation.
     */
    public void setDescValue(YangString descValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "desc",
            descValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "desc",
     * using a String value.
     * @param descValue used during instantiation.
     */
    public void setDescValue(String descValue) throws JNCException {
        setDescValue(new YangString(descValue));
    }

    /**
     * Unsets the value for child leaf "desc".
     */
    public void unsetDescValue() throws JNCException {
        delete("desc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "desc" leaf will not have a value.
     */
    public void addDesc() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "desc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "desc" with operation "replace".
     */
    public void markDescReplace() throws JNCException {
        markLeafReplace("desc");
    }

    /**
     * Marks the leaf "desc" with operation "merge".
     */
    public void markDescMerge() throws JNCException {
        markLeafMerge("desc");
    }

    /**
     * Marks the leaf "desc" with operation "create".
     */
    public void markDescCreate() throws JNCException {
        markLeafCreate("desc");
    }

    /**
     * Marks the leaf "desc" with operation "delete".
     */
    public void markDescDelete() throws JNCException {
        markLeafDelete("desc");
    }

    /* Access methods for optional leaf child: "operationStatus". */

    /**
     * Gets the value for child leaf "operationStatus".
     * @return The value of the leaf.
     */
    public YangString getOperationStatusValue() throws JNCException {
        return (YangString)getValue("operationStatus");
    }

    /**
     * Sets the value for child leaf "operationStatus",
     * using instance of generated typedef class.
     * @param operationStatusValue The value to set.
     * @param operationStatusValue used during instantiation.
     */
    public void setOperationStatusValue(YangString operationStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "operationStatus",
            operationStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "operationStatus",
     * using a String value.
     * @param operationStatusValue used during instantiation.
     */
    public void setOperationStatusValue(String operationStatusValue)
            throws JNCException {
        setOperationStatusValue(new YangString(operationStatusValue));
    }

    /**
     * Unsets the value for child leaf "operationStatus".
     */
    public void unsetOperationStatusValue() throws JNCException {
        delete("operationStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "operationStatus" leaf will not have a value.
     */
    public void addOperationStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "operationStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "operationStatus" with operation "replace".
     */
    public void markOperationStatusReplace() throws JNCException {
        markLeafReplace("operationStatus");
    }

    /**
     * Marks the leaf "operationStatus" with operation "merge".
     */
    public void markOperationStatusMerge() throws JNCException {
        markLeafMerge("operationStatus");
    }

    /**
     * Marks the leaf "operationStatus" with operation "create".
     */
    public void markOperationStatusCreate() throws JNCException {
        markLeafCreate("operationStatus");
    }

    /**
     * Marks the leaf "operationStatus" with operation "delete".
     */
    public void markOperationStatusDelete() throws JNCException {
        markLeafDelete("operationStatus");
    }

    /* Access methods for optional leaf child: "ip". */

    /**
     * Gets the value for child leaf "ip".
     * @return The value of the leaf.
     */
    public IpAddress getIpValue() throws JNCException {
        return (IpAddress)getValue("ip");
    }

    /**
     * Sets the value for child leaf "ip",
     * using a JNC type value.
     * @param ipValue The value to set.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(IpAddress ipValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ip",
            ipValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip",
     * using a String value.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(String ipValue) throws JNCException {
        setIpValue(new IpAddress(ipValue));
    }

    /**
     * Unsets the value for child leaf "ip".
     */
    public void unsetIpValue() throws JNCException {
        delete("ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip" leaf will not have a value.
     */
    public void addIp() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip" with operation "replace".
     */
    public void markIpReplace() throws JNCException {
        markLeafReplace("ip");
    }

    /**
     * Marks the leaf "ip" with operation "merge".
     */
    public void markIpMerge() throws JNCException {
        markLeafMerge("ip");
    }

    /**
     * Marks the leaf "ip" with operation "create".
     */
    public void markIpCreate() throws JNCException {
        markLeafCreate("ip");
    }

    /**
     * Marks the leaf "ip" with operation "delete".
     */
    public void markIpDelete() throws JNCException {
        markLeafDelete("ip");
    }

    /* Access methods for optional leaf child: "adminStatus". */

    /**
     * Gets the value for child leaf "adminStatus".
     * @return The value of the leaf.
     */
    public YangString getAdminStatusValue() throws JNCException {
        return (YangString)getValue("adminStatus");
    }

    /**
     * Sets the value for child leaf "adminStatus",
     * using instance of generated typedef class.
     * @param adminStatusValue The value to set.
     * @param adminStatusValue used during instantiation.
     */
    public void setAdminStatusValue(YangString adminStatusValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "adminStatus",
            adminStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "adminStatus",
     * using a String value.
     * @param adminStatusValue used during instantiation.
     */
    public void setAdminStatusValue(String adminStatusValue)
            throws JNCException {
        setAdminStatusValue(new YangString(adminStatusValue));
    }

    /**
     * Unsets the value for child leaf "adminStatus".
     */
    public void unsetAdminStatusValue() throws JNCException {
        delete("adminStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "adminStatus" leaf will not have a value.
     */
    public void addAdminStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "adminStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "adminStatus" with operation "replace".
     */
    public void markAdminStatusReplace() throws JNCException {
        markLeafReplace("adminStatus");
    }

    /**
     * Marks the leaf "adminStatus" with operation "merge".
     */
    public void markAdminStatusMerge() throws JNCException {
        markLeafMerge("adminStatus");
    }

    /**
     * Marks the leaf "adminStatus" with operation "create".
     */
    public void markAdminStatusCreate() throws JNCException {
        markLeafCreate("adminStatus");
    }

    /**
     * Marks the leaf "adminStatus" with operation "delete".
     */
    public void markAdminStatusDelete() throws JNCException {
        markLeafDelete("adminStatus");
    }

    /* Access methods for optional leaf child: "interfaceIndex". */

    /**
     * Gets the value for child leaf "interfaceIndex".
     * @return The value of the leaf.
     */
    public YangUInt32 getInterfaceIndexValue() throws JNCException {
        return (YangUInt32)getValue("interfaceIndex");
    }

    /**
     * Sets the value for child leaf "interfaceIndex",
     * using instance of generated typedef class.
     * @param interfaceIndexValue The value to set.
     * @param interfaceIndexValue used during instantiation.
     */
    public void setInterfaceIndexValue(YangUInt32 interfaceIndexValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "interfaceIndex",
            interfaceIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "interfaceIndex",
     * using Java primitive values.
     * @param interfaceIndexValue used during instantiation.
     */
    public void setInterfaceIndexValue(long interfaceIndexValue)
            throws JNCException {
        setInterfaceIndexValue(new YangUInt32(interfaceIndexValue));
    }

    /**
     * Sets the value for child leaf "interfaceIndex",
     * using a String value.
     * @param interfaceIndexValue used during instantiation.
     */
    public void setInterfaceIndexValue(String interfaceIndexValue)
            throws JNCException {
        setInterfaceIndexValue(new YangUInt32(interfaceIndexValue));
    }

    /**
     * Unsets the value for child leaf "interfaceIndex".
     */
    public void unsetInterfaceIndexValue() throws JNCException {
        delete("interfaceIndex");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "interfaceIndex" leaf will not have a value.
     */
    public void addInterfaceIndex() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "interfaceIndex",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "replace".
     */
    public void markInterfaceIndexReplace() throws JNCException {
        markLeafReplace("interfaceIndex");
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "merge".
     */
    public void markInterfaceIndexMerge() throws JNCException {
        markLeafMerge("interfaceIndex");
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "create".
     */
    public void markInterfaceIndexCreate() throws JNCException {
        markLeafCreate("interfaceIndex");
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "delete".
     */
    public void markInterfaceIndexDelete() throws JNCException {
        markLeafDelete("interfaceIndex");
    }

    /* Access methods for optional leaf child: "linkLevelType". */

    /**
     * Gets the value for child leaf "linkLevelType".
     * @return The value of the leaf.
     */
    public YangString getLinkLevelTypeValue() throws JNCException {
        return (YangString)getValue("linkLevelType");
    }

    /**
     * Sets the value for child leaf "linkLevelType",
     * using instance of generated typedef class.
     * @param linkLevelTypeValue The value to set.
     * @param linkLevelTypeValue used during instantiation.
     */
    public void setLinkLevelTypeValue(YangString linkLevelTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "linkLevelType",
            linkLevelTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "linkLevelType",
     * using a String value.
     * @param linkLevelTypeValue used during instantiation.
     */
    public void setLinkLevelTypeValue(String linkLevelTypeValue)
            throws JNCException {
        setLinkLevelTypeValue(new YangString(linkLevelTypeValue));
    }

    /**
     * Unsets the value for child leaf "linkLevelType".
     */
    public void unsetLinkLevelTypeValue() throws JNCException {
        delete("linkLevelType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "linkLevelType" leaf will not have a value.
     */
    public void addLinkLevelType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "linkLevelType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "linkLevelType" with operation "replace".
     */
    public void markLinkLevelTypeReplace() throws JNCException {
        markLeafReplace("linkLevelType");
    }

    /**
     * Marks the leaf "linkLevelType" with operation "merge".
     */
    public void markLinkLevelTypeMerge() throws JNCException {
        markLeafMerge("linkLevelType");
    }

    /**
     * Marks the leaf "linkLevelType" with operation "create".
     */
    public void markLinkLevelTypeCreate() throws JNCException {
        markLeafCreate("linkLevelType");
    }

    /**
     * Marks the leaf "linkLevelType" with operation "delete".
     */
    public void markLinkLevelTypeDelete() throws JNCException {
        markLeafDelete("linkLevelType");
    }

    /* Access methods for optional leaf child: "linkType". */

    /**
     * Gets the value for child leaf "linkType".
     * @return The value of the leaf.
     */
    public YangString getLinkTypeValue() throws JNCException {
        return (YangString)getValue("linkType");
    }

    /**
     * Sets the value for child leaf "linkType",
     * using instance of generated typedef class.
     * @param linkTypeValue The value to set.
     * @param linkTypeValue used during instantiation.
     */
    public void setLinkTypeValue(YangString linkTypeValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "linkType",
            linkTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "linkType",
     * using a String value.
     * @param linkTypeValue used during instantiation.
     */
    public void setLinkTypeValue(String linkTypeValue) throws JNCException {
        setLinkTypeValue(new YangString(linkTypeValue));
    }

    /**
     * Unsets the value for child leaf "linkType".
     */
    public void unsetLinkTypeValue() throws JNCException {
        delete("linkType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "linkType" leaf will not have a value.
     */
    public void addLinkType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "linkType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "linkType" with operation "replace".
     */
    public void markLinkTypeReplace() throws JNCException {
        markLeafReplace("linkType");
    }

    /**
     * Marks the leaf "linkType" with operation "merge".
     */
    public void markLinkTypeMerge() throws JNCException {
        markLeafMerge("linkType");
    }

    /**
     * Marks the leaf "linkType" with operation "create".
     */
    public void markLinkTypeCreate() throws JNCException {
        markLeafCreate("linkType");
    }

    /**
     * Marks the leaf "linkType" with operation "delete".
     */
    public void markLinkTypeDelete() throws JNCException {
        markLeafDelete("linkType");
    }

    /* Access methods for optional leaf child: "speed". */

    /**
     * Gets the value for child leaf "speed".
     * @return The value of the leaf.
     */
    public YangUInt32 getSpeedValue() throws JNCException {
        return (YangUInt32)getValue("speed");
    }

    /**
     * Sets the value for child leaf "speed",
     * using instance of generated typedef class.
     * @param speedValue The value to set.
     * @param speedValue used during instantiation.
     */
    public void setSpeedValue(YangUInt32 speedValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "speed",
            speedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "speed",
     * using Java primitive values.
     * @param speedValue used during instantiation.
     */
    public void setSpeedValue(long speedValue) throws JNCException {
        setSpeedValue(new YangUInt32(speedValue));
    }

    /**
     * Sets the value for child leaf "speed",
     * using a String value.
     * @param speedValue used during instantiation.
     */
    public void setSpeedValue(String speedValue) throws JNCException {
        setSpeedValue(new YangUInt32(speedValue));
    }

    /**
     * Unsets the value for child leaf "speed".
     */
    public void unsetSpeedValue() throws JNCException {
        delete("speed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "speed" leaf will not have a value.
     */
    public void addSpeed() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "speed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "speed" with operation "replace".
     */
    public void markSpeedReplace() throws JNCException {
        markLeafReplace("speed");
    }

    /**
     * Marks the leaf "speed" with operation "merge".
     */
    public void markSpeedMerge() throws JNCException {
        markLeafMerge("speed");
    }

    /**
     * Marks the leaf "speed" with operation "create".
     */
    public void markSpeedCreate() throws JNCException {
        markLeafCreate("speed");
    }

    /**
     * Marks the leaf "speed" with operation "delete".
     */
    public void markSpeedDelete() throws JNCException {
        markLeafDelete("speed");
    }

    /* Access methods for optional leaf child: "speedStr". */

    /**
     * Gets the value for child leaf "speedStr".
     * @return The value of the leaf.
     */
    public YangString getSpeedStrValue() throws JNCException {
        return (YangString)getValue("speedStr");
    }

    /**
     * Sets the value for child leaf "speedStr",
     * using instance of generated typedef class.
     * @param speedStrValue The value to set.
     * @param speedStrValue used during instantiation.
     */
    public void setSpeedStrValue(YangString speedStrValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "speedStr",
            speedStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "speedStr",
     * using a String value.
     * @param speedStrValue used during instantiation.
     */
    public void setSpeedStrValue(String speedStrValue) throws JNCException {
        setSpeedStrValue(new YangString(speedStrValue));
    }

    /**
     * Unsets the value for child leaf "speedStr".
     */
    public void unsetSpeedStrValue() throws JNCException {
        delete("speedStr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "speedStr" leaf will not have a value.
     */
    public void addSpeedStr() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "speedStr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "speedStr" with operation "replace".
     */
    public void markSpeedStrReplace() throws JNCException {
        markLeafReplace("speedStr");
    }

    /**
     * Marks the leaf "speedStr" with operation "merge".
     */
    public void markSpeedStrMerge() throws JNCException {
        markLeafMerge("speedStr");
    }

    /**
     * Marks the leaf "speedStr" with operation "create".
     */
    public void markSpeedStrCreate() throws JNCException {
        markLeafCreate("speedStr");
    }

    /**
     * Marks the leaf "speedStr" with operation "delete".
     */
    public void markSpeedStrDelete() throws JNCException {
        markLeafDelete("speedStr");
    }

    /* Access methods for optional leaf child: "mtu". */

    /**
     * Gets the value for child leaf "mtu".
     * @return The value of the leaf.
     */
    public YangString getMtuValue() throws JNCException {
        return (YangString)getValue("mtu");
    }

    /**
     * Sets the value for child leaf "mtu",
     * using instance of generated typedef class.
     * @param mtuValue The value to set.
     * @param mtuValue used during instantiation.
     */
    public void setMtuValue(YangString mtuValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "mtu",
            mtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mtu",
     * using a String value.
     * @param mtuValue used during instantiation.
     */
    public void setMtuValue(String mtuValue) throws JNCException {
        setMtuValue(new YangString(mtuValue));
    }

    /**
     * Unsets the value for child leaf "mtu".
     */
    public void unsetMtuValue() throws JNCException {
        delete("mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mtu" leaf will not have a value.
     */
    public void addMtu() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mtu" with operation "replace".
     */
    public void markMtuReplace() throws JNCException {
        markLeafReplace("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "merge".
     */
    public void markMtuMerge() throws JNCException {
        markLeafMerge("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "create".
     */
    public void markMtuCreate() throws JNCException {
        markLeafCreate("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "delete".
     */
    public void markMtuDelete() throws JNCException {
        markLeafDelete("mtu");
    }

    /* Access methods for optional leaf child: "mtuStr". */

    /**
     * Gets the value for child leaf "mtuStr".
     * @return The value of the leaf.
     */
    public YangString getMtuStrValue() throws JNCException {
        return (YangString)getValue("mtuStr");
    }

    /**
     * Sets the value for child leaf "mtuStr",
     * using instance of generated typedef class.
     * @param mtuStrValue The value to set.
     * @param mtuStrValue used during instantiation.
     */
    public void setMtuStrValue(YangString mtuStrValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "mtuStr",
            mtuStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mtuStr",
     * using a String value.
     * @param mtuStrValue used during instantiation.
     */
    public void setMtuStrValue(String mtuStrValue) throws JNCException {
        setMtuStrValue(new YangString(mtuStrValue));
    }

    /**
     * Unsets the value for child leaf "mtuStr".
     */
    public void unsetMtuStrValue() throws JNCException {
        delete("mtuStr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mtuStr" leaf will not have a value.
     */
    public void addMtuStr() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "mtuStr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mtuStr" with operation "replace".
     */
    public void markMtuStrReplace() throws JNCException {
        markLeafReplace("mtuStr");
    }

    /**
     * Marks the leaf "mtuStr" with operation "merge".
     */
    public void markMtuStrMerge() throws JNCException {
        markLeafMerge("mtuStr");
    }

    /**
     * Marks the leaf "mtuStr" with operation "create".
     */
    public void markMtuStrCreate() throws JNCException {
        markLeafCreate("mtuStr");
    }

    /**
     * Marks the leaf "mtuStr" with operation "delete".
     */
    public void markMtuStrDelete() throws JNCException {
        markLeafDelete("mtuStr");
    }

    /* Access methods for optional leaf child: "physAddr". */

    /**
     * Gets the value for child leaf "physAddr".
     * @return The value of the leaf.
     */
    public YangString getPhysAddrValue() throws JNCException {
        return (YangString)getValue("physAddr");
    }

    /**
     * Sets the value for child leaf "physAddr",
     * using instance of generated typedef class.
     * @param physAddrValue The value to set.
     * @param physAddrValue used during instantiation.
     */
    public void setPhysAddrValue(YangString physAddrValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "physAddr",
            physAddrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "physAddr",
     * using a String value.
     * @param physAddrValue used during instantiation.
     */
    public void setPhysAddrValue(String physAddrValue) throws JNCException {
        setPhysAddrValue(new YangString(physAddrValue));
    }

    /**
     * Unsets the value for child leaf "physAddr".
     */
    public void unsetPhysAddrValue() throws JNCException {
        delete("physAddr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "physAddr" leaf will not have a value.
     */
    public void addPhysAddr() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "physAddr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "physAddr" with operation "replace".
     */
    public void markPhysAddrReplace() throws JNCException {
        markLeafReplace("physAddr");
    }

    /**
     * Marks the leaf "physAddr" with operation "merge".
     */
    public void markPhysAddrMerge() throws JNCException {
        markLeafMerge("physAddr");
    }

    /**
     * Marks the leaf "physAddr" with operation "create".
     */
    public void markPhysAddrCreate() throws JNCException {
        markLeafCreate("physAddr");
    }

    /**
     * Marks the leaf "physAddr" with operation "delete".
     */
    public void markPhysAddrDelete() throws JNCException {
        markLeafDelete("physAddr");
    }

    /* Access methods for list child: "logicalInterface". */

    /**
     * Gets list entry "logicalInterface", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public LogicalInterface getLogicalInterface(Uuid uuidValue)
            throws JNCException {
        String path = "logicalInterface[uuid='" + uuidValue + "']";
        return (LogicalInterface)searchOne(path);
    }

    /**
     * Gets list entry "logicalInterface", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public LogicalInterface getLogicalInterface(String uuidValue)
            throws JNCException {
        String path = "logicalInterface[uuid='" + uuidValue + "']";
        return (LogicalInterface)searchOne(path);
    }

    /**
     * Iterator method for the list "logicalInterface".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator logicalInterfaceIterator() {
        return new ElementChildrenIterator(children, "logicalInterface");
    }

    /**
     * Adds list entry "logicalInterface", using an existing object.
     * @param logicalInterface The object to add.
     * @return The added child.
     */
    public LogicalInterface addLogicalInterface(LogicalInterface logicalInterface)
            throws JNCException {
        insertChild(logicalInterface, childrenNames());
        return logicalInterface;
    }

    /**
     * Adds list entry "logicalInterface", with specified keys.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public LogicalInterface addLogicalInterface(Uuid uuidValue)
            throws JNCException {
        LogicalInterface logicalInterface = new LogicalInterface(uuidValue);
        return addLogicalInterface(logicalInterface);
    }

    /**
     * Adds list entry "logicalInterface", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public LogicalInterface addLogicalInterface(String uuidValue)
            throws JNCException {
        LogicalInterface logicalInterface = new LogicalInterface(uuidValue);
        return addLogicalInterface(logicalInterface);
    }

    /**
     * Adds list entry "logicalInterface".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LogicalInterface addLogicalInterface() throws JNCException {
        LogicalInterface logicalInterface = new LogicalInterface();
        insertChild(logicalInterface, childrenNames());
        return logicalInterface;
    }

    /**
     * Deletes list entry "logicalInterface", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public void deleteLogicalInterface(Uuid uuidValue) throws JNCException {
        String path = "logicalInterface[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "logicalInterface", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public void deleteLogicalInterface(String uuidValue) throws JNCException {
        String path = "logicalInterface[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
