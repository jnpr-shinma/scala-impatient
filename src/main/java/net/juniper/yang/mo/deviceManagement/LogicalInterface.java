/* 
 * @(#)LogicalInterface.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

import net.juniper.yang.mo.deviceManagement.logicalInterface.IdPerms;
import net.juniper.yang.mo.ietfInetTypes.IpAddress;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/logicalInterface"
 * <p>
 * See line 584 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class LogicalInterface extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("logicalInterface");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty LogicalInterface object.
     */
    public LogicalInterface() {
        super(Devicemgt.NAMESPACE, "logicalInterface");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized LogicalInterface object,
     * 
     * @param uuidValue Key argument of child.
     */
    public LogicalInterface(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "logicalInterface");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized LogicalInterface object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public LogicalInterface(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "logicalInterface");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LogicalInterface clone() {
        LogicalInterface copy;
        try {
            copy = new LogicalInterface(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LogicalInterface)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LogicalInterface cloneShallow() {
        LogicalInterface copy;
        try {
            copy = new LogicalInterface(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LogicalInterface)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "ip",
            "desc",
            "encaptulation",
            "vlandId",
            "vlanIdRange",
            "vlanTagInnerRange",
            "vlanTagsOuter",
            "vlanTagsInner",
            "vlanMembers",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "ip". */

    /**
     * Gets the value for child leaf "ip".
     * @return The value of the leaf.
     */
    public IpAddress getIpValue() throws JNCException {
        return (IpAddress)getValue("ip");
    }

    /**
     * Sets the value for child leaf "ip",
     * using a JNC type value.
     * @param ipValue The value to set.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(IpAddress ipValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ip",
            ipValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip",
     * using a String value.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(String ipValue) throws JNCException {
        setIpValue(new IpAddress(ipValue));
    }

    /**
     * Unsets the value for child leaf "ip".
     */
    public void unsetIpValue() throws JNCException {
        delete("ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip" leaf will not have a value.
     */
    public void addIp() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip" with operation "replace".
     */
    public void markIpReplace() throws JNCException {
        markLeafReplace("ip");
    }

    /**
     * Marks the leaf "ip" with operation "merge".
     */
    public void markIpMerge() throws JNCException {
        markLeafMerge("ip");
    }

    /**
     * Marks the leaf "ip" with operation "create".
     */
    public void markIpCreate() throws JNCException {
        markLeafCreate("ip");
    }

    /**
     * Marks the leaf "ip" with operation "delete".
     */
    public void markIpDelete() throws JNCException {
        markLeafDelete("ip");
    }

    /* Access methods for optional leaf child: "desc". */

    /**
     * Gets the value for child leaf "desc".
     * @return The value of the leaf.
     */
    public YangString getDescValue() throws JNCException {
        return (YangString)getValue("desc");
    }

    /**
     * Sets the value for child leaf "desc",
     * using instance of generated typedef class.
     * @param descValue The value to set.
     * @param descValue used during instantiation.
     */
    public void setDescValue(YangString descValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "desc",
            descValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "desc",
     * using a String value.
     * @param descValue used during instantiation.
     */
    public void setDescValue(String descValue) throws JNCException {
        setDescValue(new YangString(descValue));
    }

    /**
     * Unsets the value for child leaf "desc".
     */
    public void unsetDescValue() throws JNCException {
        delete("desc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "desc" leaf will not have a value.
     */
    public void addDesc() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "desc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "desc" with operation "replace".
     */
    public void markDescReplace() throws JNCException {
        markLeafReplace("desc");
    }

    /**
     * Marks the leaf "desc" with operation "merge".
     */
    public void markDescMerge() throws JNCException {
        markLeafMerge("desc");
    }

    /**
     * Marks the leaf "desc" with operation "create".
     */
    public void markDescCreate() throws JNCException {
        markLeafCreate("desc");
    }

    /**
     * Marks the leaf "desc" with operation "delete".
     */
    public void markDescDelete() throws JNCException {
        markLeafDelete("desc");
    }

    /* Access methods for optional leaf child: "encaptulation". */

    /**
     * Gets the value for child leaf "encaptulation".
     * @return The value of the leaf.
     */
    public EncaptulationEnum getEncaptulationValue() throws JNCException {
        return (EncaptulationEnum)getValue("encaptulation");
    }

    /**
     * Sets the value for child leaf "encaptulation",
     * using a JNC type value.
     * @param encaptulationValue The value to set.
     * @param encaptulationValue used during instantiation.
     */
    public void setEncaptulationValue(EncaptulationEnum encaptulationValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "encaptulation",
            encaptulationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "encaptulation",
     * using a String value.
     * @param encaptulationValue used during instantiation.
     */
    public void setEncaptulationValue(String encaptulationValue)
            throws JNCException {
        setEncaptulationValue(new EncaptulationEnum(encaptulationValue));
    }

    /**
     * Unsets the value for child leaf "encaptulation".
     */
    public void unsetEncaptulationValue() throws JNCException {
        delete("encaptulation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "encaptulation" leaf will not have a value.
     */
    public void addEncaptulation() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "encaptulation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "encaptulation" with operation "replace".
     */
    public void markEncaptulationReplace() throws JNCException {
        markLeafReplace("encaptulation");
    }

    /**
     * Marks the leaf "encaptulation" with operation "merge".
     */
    public void markEncaptulationMerge() throws JNCException {
        markLeafMerge("encaptulation");
    }

    /**
     * Marks the leaf "encaptulation" with operation "create".
     */
    public void markEncaptulationCreate() throws JNCException {
        markLeafCreate("encaptulation");
    }

    /**
     * Marks the leaf "encaptulation" with operation "delete".
     */
    public void markEncaptulationDelete() throws JNCException {
        markLeafDelete("encaptulation");
    }

    /* Access methods for optional leaf child: "vlandId". */

    /**
     * Gets the value for child leaf "vlandId".
     * @return The value of the leaf.
     */
    public YangString getVlandIdValue() throws JNCException {
        return (YangString)getValue("vlandId");
    }

    /**
     * Sets the value for child leaf "vlandId",
     * using instance of generated typedef class.
     * @param vlandIdValue The value to set.
     * @param vlandIdValue used during instantiation.
     */
    public void setVlandIdValue(YangString vlandIdValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlandId",
            vlandIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlandId",
     * using a String value.
     * @param vlandIdValue used during instantiation.
     */
    public void setVlandIdValue(String vlandIdValue) throws JNCException {
        setVlandIdValue(new YangString(vlandIdValue));
    }

    /**
     * Unsets the value for child leaf "vlandId".
     */
    public void unsetVlandIdValue() throws JNCException {
        delete("vlandId");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlandId" leaf will not have a value.
     */
    public void addVlandId() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlandId",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlandId" with operation "replace".
     */
    public void markVlandIdReplace() throws JNCException {
        markLeafReplace("vlandId");
    }

    /**
     * Marks the leaf "vlandId" with operation "merge".
     */
    public void markVlandIdMerge() throws JNCException {
        markLeafMerge("vlandId");
    }

    /**
     * Marks the leaf "vlandId" with operation "create".
     */
    public void markVlandIdCreate() throws JNCException {
        markLeafCreate("vlandId");
    }

    /**
     * Marks the leaf "vlandId" with operation "delete".
     */
    public void markVlandIdDelete() throws JNCException {
        markLeafDelete("vlandId");
    }

    /* Access methods for optional leaf child: "vlanIdRange". */

    /**
     * Gets the value for child leaf "vlanIdRange".
     * @return The value of the leaf.
     */
    public YangString getVlanIdRangeValue() throws JNCException {
        return (YangString)getValue("vlanIdRange");
    }

    /**
     * Sets the value for child leaf "vlanIdRange",
     * using instance of generated typedef class.
     * @param vlanIdRangeValue The value to set.
     * @param vlanIdRangeValue used during instantiation.
     */
    public void setVlanIdRangeValue(YangString vlanIdRangeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanIdRange",
            vlanIdRangeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlanIdRange",
     * using a String value.
     * @param vlanIdRangeValue used during instantiation.
     */
    public void setVlanIdRangeValue(String vlanIdRangeValue)
            throws JNCException {
        setVlanIdRangeValue(new YangString(vlanIdRangeValue));
    }

    /**
     * Unsets the value for child leaf "vlanIdRange".
     */
    public void unsetVlanIdRangeValue() throws JNCException {
        delete("vlanIdRange");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlanIdRange" leaf will not have a value.
     */
    public void addVlanIdRange() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanIdRange",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlanIdRange" with operation "replace".
     */
    public void markVlanIdRangeReplace() throws JNCException {
        markLeafReplace("vlanIdRange");
    }

    /**
     * Marks the leaf "vlanIdRange" with operation "merge".
     */
    public void markVlanIdRangeMerge() throws JNCException {
        markLeafMerge("vlanIdRange");
    }

    /**
     * Marks the leaf "vlanIdRange" with operation "create".
     */
    public void markVlanIdRangeCreate() throws JNCException {
        markLeafCreate("vlanIdRange");
    }

    /**
     * Marks the leaf "vlanIdRange" with operation "delete".
     */
    public void markVlanIdRangeDelete() throws JNCException {
        markLeafDelete("vlanIdRange");
    }

    /* Access methods for optional leaf child: "vlanTagInnerRange". */

    /**
     * Gets the value for child leaf "vlanTagInnerRange".
     * @return The value of the leaf.
     */
    public YangString getVlanTagInnerRangeValue() throws JNCException {
        return (YangString)getValue("vlanTagInnerRange");
    }

    /**
     * Sets the value for child leaf "vlanTagInnerRange",
     * using instance of generated typedef class.
     * @param vlanTagInnerRangeValue The value to set.
     * @param vlanTagInnerRangeValue used during instantiation.
     */
    public void setVlanTagInnerRangeValue(YangString vlanTagInnerRangeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanTagInnerRange",
            vlanTagInnerRangeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlanTagInnerRange",
     * using a String value.
     * @param vlanTagInnerRangeValue used during instantiation.
     */
    public void setVlanTagInnerRangeValue(String vlanTagInnerRangeValue)
            throws JNCException {
        setVlanTagInnerRangeValue(new YangString(vlanTagInnerRangeValue));
    }

    /**
     * Unsets the value for child leaf "vlanTagInnerRange".
     */
    public void unsetVlanTagInnerRangeValue() throws JNCException {
        delete("vlanTagInnerRange");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlanTagInnerRange" leaf will not have a value.
     */
    public void addVlanTagInnerRange() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanTagInnerRange",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlanTagInnerRange" with operation "replace".
     */
    public void markVlanTagInnerRangeReplace() throws JNCException {
        markLeafReplace("vlanTagInnerRange");
    }

    /**
     * Marks the leaf "vlanTagInnerRange" with operation "merge".
     */
    public void markVlanTagInnerRangeMerge() throws JNCException {
        markLeafMerge("vlanTagInnerRange");
    }

    /**
     * Marks the leaf "vlanTagInnerRange" with operation "create".
     */
    public void markVlanTagInnerRangeCreate() throws JNCException {
        markLeafCreate("vlanTagInnerRange");
    }

    /**
     * Marks the leaf "vlanTagInnerRange" with operation "delete".
     */
    public void markVlanTagInnerRangeDelete() throws JNCException {
        markLeafDelete("vlanTagInnerRange");
    }

    /* Access methods for optional leaf child: "vlanTagsOuter". */

    /**
     * Gets the value for child leaf "vlanTagsOuter".
     * @return The value of the leaf.
     */
    public YangString getVlanTagsOuterValue() throws JNCException {
        return (YangString)getValue("vlanTagsOuter");
    }

    /**
     * Sets the value for child leaf "vlanTagsOuter",
     * using instance of generated typedef class.
     * @param vlanTagsOuterValue The value to set.
     * @param vlanTagsOuterValue used during instantiation.
     */
    public void setVlanTagsOuterValue(YangString vlanTagsOuterValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanTagsOuter",
            vlanTagsOuterValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlanTagsOuter",
     * using a String value.
     * @param vlanTagsOuterValue used during instantiation.
     */
    public void setVlanTagsOuterValue(String vlanTagsOuterValue)
            throws JNCException {
        setVlanTagsOuterValue(new YangString(vlanTagsOuterValue));
    }

    /**
     * Unsets the value for child leaf "vlanTagsOuter".
     */
    public void unsetVlanTagsOuterValue() throws JNCException {
        delete("vlanTagsOuter");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlanTagsOuter" leaf will not have a value.
     */
    public void addVlanTagsOuter() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanTagsOuter",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlanTagsOuter" with operation "replace".
     */
    public void markVlanTagsOuterReplace() throws JNCException {
        markLeafReplace("vlanTagsOuter");
    }

    /**
     * Marks the leaf "vlanTagsOuter" with operation "merge".
     */
    public void markVlanTagsOuterMerge() throws JNCException {
        markLeafMerge("vlanTagsOuter");
    }

    /**
     * Marks the leaf "vlanTagsOuter" with operation "create".
     */
    public void markVlanTagsOuterCreate() throws JNCException {
        markLeafCreate("vlanTagsOuter");
    }

    /**
     * Marks the leaf "vlanTagsOuter" with operation "delete".
     */
    public void markVlanTagsOuterDelete() throws JNCException {
        markLeafDelete("vlanTagsOuter");
    }

    /* Access methods for optional leaf child: "vlanTagsInner". */

    /**
     * Gets the value for child leaf "vlanTagsInner".
     * @return The value of the leaf.
     */
    public YangString getVlanTagsInnerValue() throws JNCException {
        return (YangString)getValue("vlanTagsInner");
    }

    /**
     * Sets the value for child leaf "vlanTagsInner",
     * using instance of generated typedef class.
     * @param vlanTagsInnerValue The value to set.
     * @param vlanTagsInnerValue used during instantiation.
     */
    public void setVlanTagsInnerValue(YangString vlanTagsInnerValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanTagsInner",
            vlanTagsInnerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vlanTagsInner",
     * using a String value.
     * @param vlanTagsInnerValue used during instantiation.
     */
    public void setVlanTagsInnerValue(String vlanTagsInnerValue)
            throws JNCException {
        setVlanTagsInnerValue(new YangString(vlanTagsInnerValue));
    }

    /**
     * Unsets the value for child leaf "vlanTagsInner".
     */
    public void unsetVlanTagsInnerValue() throws JNCException {
        delete("vlanTagsInner");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlanTagsInner" leaf will not have a value.
     */
    public void addVlanTagsInner() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "vlanTagsInner",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vlanTagsInner" with operation "replace".
     */
    public void markVlanTagsInnerReplace() throws JNCException {
        markLeafReplace("vlanTagsInner");
    }

    /**
     * Marks the leaf "vlanTagsInner" with operation "merge".
     */
    public void markVlanTagsInnerMerge() throws JNCException {
        markLeafMerge("vlanTagsInner");
    }

    /**
     * Marks the leaf "vlanTagsInner" with operation "create".
     */
    public void markVlanTagsInnerCreate() throws JNCException {
        markLeafCreate("vlanTagsInner");
    }

    /**
     * Marks the leaf "vlanTagsInner" with operation "delete".
     */
    public void markVlanTagsInnerDelete() throws JNCException {
        markLeafDelete("vlanTagsInner");
    }

    /* Access methods for optional leaf-list child: "vlanMembers". */

    /**
     * Iterator method for the leaf-list "vlanMembers".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator vlanMembersIterator() {
        return new ElementLeafListValueIterator(children, "vlanMembers");
    }

    /**
     * Sets the value for child leaf-list "vlanMembers",
     * using instance of generated typedef class.
     * @param vlanMembersValue The value to set.
     * @param vlanMembersValue used during instantiation.
     */
    public void setVlanMembersValue(YangString vlanMembersValue)
            throws JNCException {
        setLeafListValue(Devicemgt.NAMESPACE,
            "vlanMembers",
            vlanMembersValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "vlanMembers",
     * using a String value.
     * @param vlanMembersValue used during instantiation.
     */
    public void setVlanMembersValue(String vlanMembersValue)
            throws JNCException {
        setVlanMembersValue(new YangString(vlanMembersValue));
    }

    /**
     * Deletes leaf-list entry "vlanMembers".
     * @param vlanMembersValue Value to delete.
     */
    public void deleteVlanMembers(YangString vlanMembersValue)
            throws JNCException {
        String path = "vlanMembers[vlanMembersValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "vlanMembers".
     * The value is specified as a string.
     * @param vlanMembersValue Value to delete.
     */
    public void deleteVlanMembers(String vlanMembersValue) throws JNCException {
        String path = "vlanMembers[vlanMembersValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vlanMembers" leaf-list will not have a value.
     */
    public void addVlanMembers() throws JNCException {
        setLeafListValue(Devicemgt.NAMESPACE,
            "vlanMembers",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "vlanMembers" with operation "replace".
     * @param vlanMembersValue The value to mark
     */
    public void markVlanMembersReplace(YangString vlanMembersValue)
            throws JNCException {
        markLeafReplace("vlanMembers[name='" + vlanMembersValue + "']");
    }

    /**
     * Marks the leaf-list "vlanMembers" with operation "merge".
     * @param vlanMembersValue The value to mark
     */
    public void markVlanMembersMerge(YangString vlanMembersValue)
            throws JNCException {
        markLeafMerge("vlanMembers[name='" + vlanMembersValue + "']");
    }

    /**
     * Marks the leaf-list "vlanMembers" with operation "create".
     * @param vlanMembersValue The value to mark
     */
    public void markVlanMembersCreate(YangString vlanMembersValue)
            throws JNCException {
        markLeafCreate("vlanMembers[name='" + vlanMembersValue + "']");
    }

    /**
     * Marks the leaf-list "vlanMembers" with operation "delete".
     * @param vlanMembersValue The value to mark
     */
    public void markVlanMembersDelete(YangString vlanMembersValue)
            throws JNCException {
        markLeafDelete("vlanMembers[name='" + vlanMembersValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
