/* 
 * @(#)Inventory.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.yang.mo.deviceManagement.inventory.IdPerms;
import net.juniper.yang.mo.deviceManagement.inventory.PhysicalInterface;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/inventory"
 * <p>
 * See line 452 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class Inventory extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("inventory");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty Inventory object.
     */
    public Inventory() {
        super(Devicemgt.NAMESPACE, "inventory");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized Inventory object,
     * 
     * @param uuidValue Key argument of child.
     */
    public Inventory(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "inventory");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized Inventory object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public Inventory(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "inventory");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Inventory clone() {
        Inventory copy;
        try {
            copy = new Inventory(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Inventory)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Inventory cloneShallow() {
        Inventory copy;
        try {
            copy = new Inventory(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Inventory)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "partitionUuid",
            "installedDescription",
            "installedEquipmentObjectType",
            "installedModel",
            "installedPartNumber",
            "installedSerialNumber",
            "installedVersion",
            "manufacturer",
            "path",
            "status",
            "holderState",
            "holderType",
            "ordinal",
            "physicalInterface",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "partitionUuid". */

    /**
     * Gets the value for child leaf "partitionUuid".
     * @return The value of the leaf.
     */
    public Uuid getPartitionUuidValue() throws JNCException {
        return (Uuid)getValue("partitionUuid");
    }

    /**
     * Sets the value for child leaf "partitionUuid",
     * using a JNC type value.
     * @param partitionUuidValue The value to set.
     * @param partitionUuidValue used during instantiation.
     */
    public void setPartitionUuidValue(Uuid partitionUuidValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "partitionUuid",
            partitionUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "partitionUuid",
     * using a String value.
     * @param partitionUuidValue used during instantiation.
     */
    public void setPartitionUuidValue(String partitionUuidValue)
            throws JNCException {
        setPartitionUuidValue(new Uuid(partitionUuidValue));
    }

    /**
     * Unsets the value for child leaf "partitionUuid".
     */
    public void unsetPartitionUuidValue() throws JNCException {
        delete("partitionUuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "partitionUuid" leaf will not have a value.
     */
    public void addPartitionUuid() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "partitionUuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "partitionUuid" with operation "replace".
     */
    public void markPartitionUuidReplace() throws JNCException {
        markLeafReplace("partitionUuid");
    }

    /**
     * Marks the leaf "partitionUuid" with operation "merge".
     */
    public void markPartitionUuidMerge() throws JNCException {
        markLeafMerge("partitionUuid");
    }

    /**
     * Marks the leaf "partitionUuid" with operation "create".
     */
    public void markPartitionUuidCreate() throws JNCException {
        markLeafCreate("partitionUuid");
    }

    /**
     * Marks the leaf "partitionUuid" with operation "delete".
     */
    public void markPartitionUuidDelete() throws JNCException {
        markLeafDelete("partitionUuid");
    }

    /* Access methods for optional leaf child: "installedDescription". */

    /**
     * Gets the value for child leaf "installedDescription".
     * @return The value of the leaf.
     */
    public YangString getInstalledDescriptionValue() throws JNCException {
        return (YangString)getValue("installedDescription");
    }

    /**
     * Sets the value for child leaf "installedDescription",
     * using instance of generated typedef class.
     * @param installedDescriptionValue The value to set.
     * @param installedDescriptionValue used during instantiation.
     */
    public void setInstalledDescriptionValue(YangString installedDescriptionValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedDescription",
            installedDescriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "installedDescription",
     * using a String value.
     * @param installedDescriptionValue used during instantiation.
     */
    public void setInstalledDescriptionValue(String installedDescriptionValue)
            throws JNCException {
        setInstalledDescriptionValue(new YangString(installedDescriptionValue));
    }

    /**
     * Unsets the value for child leaf "installedDescription".
     */
    public void unsetInstalledDescriptionValue() throws JNCException {
        delete("installedDescription");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "installedDescription" leaf will not have a value.
     */
    public void addInstalledDescription() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedDescription",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "installedDescription" with operation "replace".
     */
    public void markInstalledDescriptionReplace() throws JNCException {
        markLeafReplace("installedDescription");
    }

    /**
     * Marks the leaf "installedDescription" with operation "merge".
     */
    public void markInstalledDescriptionMerge() throws JNCException {
        markLeafMerge("installedDescription");
    }

    /**
     * Marks the leaf "installedDescription" with operation "create".
     */
    public void markInstalledDescriptionCreate() throws JNCException {
        markLeafCreate("installedDescription");
    }

    /**
     * Marks the leaf "installedDescription" with operation "delete".
     */
    public void markInstalledDescriptionDelete() throws JNCException {
        markLeafDelete("installedDescription");
    }

    /* Access methods for optional leaf child: "installedEquipmentObjectType". */

    /**
     * Gets the value for child leaf "installedEquipmentObjectType".
     * @return The value of the leaf.
     */
    public YangString getInstalledEquipmentObjectTypeValue()
            throws JNCException {
        return (YangString)getValue("installedEquipmentObjectType");
    }

    /**
     * Sets the value for child leaf "installedEquipmentObjectType",
     * using instance of generated typedef class.
     * @param installedEquipmentObjectTypeValue The value to set.
     * @param installedEquipmentObjectTypeValue used during instantiation.
     */
    public void setInstalledEquipmentObjectTypeValue(YangString installedEquipmentObjectTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedEquipmentObjectType",
            installedEquipmentObjectTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "installedEquipmentObjectType",
     * using a String value.
     * @param installedEquipmentObjectTypeValue used during instantiation.
     */
    public void setInstalledEquipmentObjectTypeValue(String installedEquipmentObjectTypeValue)
            throws JNCException {
        setInstalledEquipmentObjectTypeValue(new YangString(installedEquipmentObjectTypeValue));
    }

    /**
     * Unsets the value for child leaf "installedEquipmentObjectType".
     */
    public void unsetInstalledEquipmentObjectTypeValue() throws JNCException {
        delete("installedEquipmentObjectType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "installedEquipmentObjectType" leaf will not have a value.
     */
    public void addInstalledEquipmentObjectType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedEquipmentObjectType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "installedEquipmentObjectType" with operation "replace".
     */
    public void markInstalledEquipmentObjectTypeReplace() throws JNCException {
        markLeafReplace("installedEquipmentObjectType");
    }

    /**
     * Marks the leaf "installedEquipmentObjectType" with operation "merge".
     */
    public void markInstalledEquipmentObjectTypeMerge() throws JNCException {
        markLeafMerge("installedEquipmentObjectType");
    }

    /**
     * Marks the leaf "installedEquipmentObjectType" with operation "create".
     */
    public void markInstalledEquipmentObjectTypeCreate() throws JNCException {
        markLeafCreate("installedEquipmentObjectType");
    }

    /**
     * Marks the leaf "installedEquipmentObjectType" with operation "delete".
     */
    public void markInstalledEquipmentObjectTypeDelete() throws JNCException {
        markLeafDelete("installedEquipmentObjectType");
    }

    /* Access methods for optional leaf child: "installedModel". */

    /**
     * Gets the value for child leaf "installedModel".
     * @return The value of the leaf.
     */
    public YangString getInstalledModelValue() throws JNCException {
        return (YangString)getValue("installedModel");
    }

    /**
     * Sets the value for child leaf "installedModel",
     * using instance of generated typedef class.
     * @param installedModelValue The value to set.
     * @param installedModelValue used during instantiation.
     */
    public void setInstalledModelValue(YangString installedModelValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedModel",
            installedModelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "installedModel",
     * using a String value.
     * @param installedModelValue used during instantiation.
     */
    public void setInstalledModelValue(String installedModelValue)
            throws JNCException {
        setInstalledModelValue(new YangString(installedModelValue));
    }

    /**
     * Unsets the value for child leaf "installedModel".
     */
    public void unsetInstalledModelValue() throws JNCException {
        delete("installedModel");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "installedModel" leaf will not have a value.
     */
    public void addInstalledModel() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedModel",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "installedModel" with operation "replace".
     */
    public void markInstalledModelReplace() throws JNCException {
        markLeafReplace("installedModel");
    }

    /**
     * Marks the leaf "installedModel" with operation "merge".
     */
    public void markInstalledModelMerge() throws JNCException {
        markLeafMerge("installedModel");
    }

    /**
     * Marks the leaf "installedModel" with operation "create".
     */
    public void markInstalledModelCreate() throws JNCException {
        markLeafCreate("installedModel");
    }

    /**
     * Marks the leaf "installedModel" with operation "delete".
     */
    public void markInstalledModelDelete() throws JNCException {
        markLeafDelete("installedModel");
    }

    /* Access methods for optional leaf child: "installedPartNumber". */

    /**
     * Gets the value for child leaf "installedPartNumber".
     * @return The value of the leaf.
     */
    public YangString getInstalledPartNumberValue() throws JNCException {
        return (YangString)getValue("installedPartNumber");
    }

    /**
     * Sets the value for child leaf "installedPartNumber",
     * using instance of generated typedef class.
     * @param installedPartNumberValue The value to set.
     * @param installedPartNumberValue used during instantiation.
     */
    public void setInstalledPartNumberValue(YangString installedPartNumberValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedPartNumber",
            installedPartNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "installedPartNumber",
     * using a String value.
     * @param installedPartNumberValue used during instantiation.
     */
    public void setInstalledPartNumberValue(String installedPartNumberValue)
            throws JNCException {
        setInstalledPartNumberValue(new YangString(installedPartNumberValue));
    }

    /**
     * Unsets the value for child leaf "installedPartNumber".
     */
    public void unsetInstalledPartNumberValue() throws JNCException {
        delete("installedPartNumber");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "installedPartNumber" leaf will not have a value.
     */
    public void addInstalledPartNumber() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedPartNumber",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "installedPartNumber" with operation "replace".
     */
    public void markInstalledPartNumberReplace() throws JNCException {
        markLeafReplace("installedPartNumber");
    }

    /**
     * Marks the leaf "installedPartNumber" with operation "merge".
     */
    public void markInstalledPartNumberMerge() throws JNCException {
        markLeafMerge("installedPartNumber");
    }

    /**
     * Marks the leaf "installedPartNumber" with operation "create".
     */
    public void markInstalledPartNumberCreate() throws JNCException {
        markLeafCreate("installedPartNumber");
    }

    /**
     * Marks the leaf "installedPartNumber" with operation "delete".
     */
    public void markInstalledPartNumberDelete() throws JNCException {
        markLeafDelete("installedPartNumber");
    }

    /* Access methods for optional leaf child: "installedSerialNumber". */

    /**
     * Gets the value for child leaf "installedSerialNumber".
     * @return The value of the leaf.
     */
    public YangString getInstalledSerialNumberValue() throws JNCException {
        return (YangString)getValue("installedSerialNumber");
    }

    /**
     * Sets the value for child leaf "installedSerialNumber",
     * using instance of generated typedef class.
     * @param installedSerialNumberValue The value to set.
     * @param installedSerialNumberValue used during instantiation.
     */
    public void setInstalledSerialNumberValue(YangString installedSerialNumberValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedSerialNumber",
            installedSerialNumberValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "installedSerialNumber",
     * using a String value.
     * @param installedSerialNumberValue used during instantiation.
     */
    public void setInstalledSerialNumberValue(String installedSerialNumberValue)
            throws JNCException {
        setInstalledSerialNumberValue(new YangString(installedSerialNumberValue));
    }

    /**
     * Unsets the value for child leaf "installedSerialNumber".
     */
    public void unsetInstalledSerialNumberValue() throws JNCException {
        delete("installedSerialNumber");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "installedSerialNumber" leaf will not have a value.
     */
    public void addInstalledSerialNumber() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedSerialNumber",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "installedSerialNumber" with operation "replace".
     */
    public void markInstalledSerialNumberReplace() throws JNCException {
        markLeafReplace("installedSerialNumber");
    }

    /**
     * Marks the leaf "installedSerialNumber" with operation "merge".
     */
    public void markInstalledSerialNumberMerge() throws JNCException {
        markLeafMerge("installedSerialNumber");
    }

    /**
     * Marks the leaf "installedSerialNumber" with operation "create".
     */
    public void markInstalledSerialNumberCreate() throws JNCException {
        markLeafCreate("installedSerialNumber");
    }

    /**
     * Marks the leaf "installedSerialNumber" with operation "delete".
     */
    public void markInstalledSerialNumberDelete() throws JNCException {
        markLeafDelete("installedSerialNumber");
    }

    /* Access methods for optional leaf child: "installedVersion". */

    /**
     * Gets the value for child leaf "installedVersion".
     * @return The value of the leaf.
     */
    public YangString getInstalledVersionValue() throws JNCException {
        return (YangString)getValue("installedVersion");
    }

    /**
     * Sets the value for child leaf "installedVersion",
     * using instance of generated typedef class.
     * @param installedVersionValue The value to set.
     * @param installedVersionValue used during instantiation.
     */
    public void setInstalledVersionValue(YangString installedVersionValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedVersion",
            installedVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "installedVersion",
     * using a String value.
     * @param installedVersionValue used during instantiation.
     */
    public void setInstalledVersionValue(String installedVersionValue)
            throws JNCException {
        setInstalledVersionValue(new YangString(installedVersionValue));
    }

    /**
     * Unsets the value for child leaf "installedVersion".
     */
    public void unsetInstalledVersionValue() throws JNCException {
        delete("installedVersion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "installedVersion" leaf will not have a value.
     */
    public void addInstalledVersion() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "installedVersion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "installedVersion" with operation "replace".
     */
    public void markInstalledVersionReplace() throws JNCException {
        markLeafReplace("installedVersion");
    }

    /**
     * Marks the leaf "installedVersion" with operation "merge".
     */
    public void markInstalledVersionMerge() throws JNCException {
        markLeafMerge("installedVersion");
    }

    /**
     * Marks the leaf "installedVersion" with operation "create".
     */
    public void markInstalledVersionCreate() throws JNCException {
        markLeafCreate("installedVersion");
    }

    /**
     * Marks the leaf "installedVersion" with operation "delete".
     */
    public void markInstalledVersionDelete() throws JNCException {
        markLeafDelete("installedVersion");
    }

    /* Access methods for optional leaf child: "manufacturer". */

    /**
     * Gets the value for child leaf "manufacturer".
     * @return The value of the leaf.
     */
    public YangString getManufacturerValue() throws JNCException {
        return (YangString)getValue("manufacturer");
    }

    /**
     * Sets the value for child leaf "manufacturer",
     * using instance of generated typedef class.
     * @param manufacturerValue The value to set.
     * @param manufacturerValue used during instantiation.
     */
    public void setManufacturerValue(YangString manufacturerValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "manufacturer",
            manufacturerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "manufacturer",
     * using a String value.
     * @param manufacturerValue used during instantiation.
     */
    public void setManufacturerValue(String manufacturerValue)
            throws JNCException {
        setManufacturerValue(new YangString(manufacturerValue));
    }

    /**
     * Unsets the value for child leaf "manufacturer".
     */
    public void unsetManufacturerValue() throws JNCException {
        delete("manufacturer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "manufacturer" leaf will not have a value.
     */
    public void addManufacturer() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "manufacturer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "manufacturer" with operation "replace".
     */
    public void markManufacturerReplace() throws JNCException {
        markLeafReplace("manufacturer");
    }

    /**
     * Marks the leaf "manufacturer" with operation "merge".
     */
    public void markManufacturerMerge() throws JNCException {
        markLeafMerge("manufacturer");
    }

    /**
     * Marks the leaf "manufacturer" with operation "create".
     */
    public void markManufacturerCreate() throws JNCException {
        markLeafCreate("manufacturer");
    }

    /**
     * Marks the leaf "manufacturer" with operation "delete".
     */
    public void markManufacturerDelete() throws JNCException {
        markLeafDelete("manufacturer");
    }

    /* Access methods for optional leaf child: "path". */

    /**
     * Gets the value for child leaf "path".
     * @return The value of the leaf.
     */
    public YangString getPathValue() throws JNCException {
        return (YangString)getValue("path");
    }

    /**
     * Sets the value for child leaf "path",
     * using instance of generated typedef class.
     * @param pathValue The value to set.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(YangString pathValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "path",
            pathValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path",
     * using a String value.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(String pathValue) throws JNCException {
        setPathValue(new YangString(pathValue));
    }

    /**
     * Unsets the value for child leaf "path".
     */
    public void unsetPathValue() throws JNCException {
        delete("path");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path" leaf will not have a value.
     */
    public void addPath() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "path",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path" with operation "replace".
     */
    public void markPathReplace() throws JNCException {
        markLeafReplace("path");
    }

    /**
     * Marks the leaf "path" with operation "merge".
     */
    public void markPathMerge() throws JNCException {
        markLeafMerge("path");
    }

    /**
     * Marks the leaf "path" with operation "create".
     */
    public void markPathCreate() throws JNCException {
        markLeafCreate("path");
    }

    /**
     * Marks the leaf "path" with operation "delete".
     */
    public void markPathDelete() throws JNCException {
        markLeafDelete("path");
    }

    /* Access methods for optional leaf child: "status". */

    /**
     * Gets the value for child leaf "status".
     * @return The value of the leaf.
     */
    public YangString getStatusValue() throws JNCException {
        return (YangString)getValue("status");
    }

    /**
     * Sets the value for child leaf "status",
     * using instance of generated typedef class.
     * @param statusValue The value to set.
     * @param statusValue used during instantiation.
     */
    public void setStatusValue(YangString statusValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "status",
            statusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status",
     * using a String value.
     * @param statusValue used during instantiation.
     */
    public void setStatusValue(String statusValue) throws JNCException {
        setStatusValue(new YangString(statusValue));
    }

    /**
     * Unsets the value for child leaf "status".
     */
    public void unsetStatusValue() throws JNCException {
        delete("status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status" leaf will not have a value.
     */
    public void addStatus() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status" with operation "replace".
     */
    public void markStatusReplace() throws JNCException {
        markLeafReplace("status");
    }

    /**
     * Marks the leaf "status" with operation "merge".
     */
    public void markStatusMerge() throws JNCException {
        markLeafMerge("status");
    }

    /**
     * Marks the leaf "status" with operation "create".
     */
    public void markStatusCreate() throws JNCException {
        markLeafCreate("status");
    }

    /**
     * Marks the leaf "status" with operation "delete".
     */
    public void markStatusDelete() throws JNCException {
        markLeafDelete("status");
    }

    /* Access methods for optional leaf child: "holderState". */

    /**
     * Gets the value for child leaf "holderState".
     * @return The value of the leaf.
     */
    public HolderStateEnum getHolderStateValue() throws JNCException {
        return (HolderStateEnum)getValue("holderState");
    }

    /**
     * Sets the value for child leaf "holderState",
     * using a JNC type value.
     * @param holderStateValue The value to set.
     * @param holderStateValue used during instantiation.
     */
    public void setHolderStateValue(HolderStateEnum holderStateValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "holderState",
            holderStateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "holderState",
     * using a String value.
     * @param holderStateValue used during instantiation.
     */
    public void setHolderStateValue(String holderStateValue)
            throws JNCException {
        setHolderStateValue(new HolderStateEnum(holderStateValue));
    }

    /**
     * Unsets the value for child leaf "holderState".
     */
    public void unsetHolderStateValue() throws JNCException {
        delete("holderState");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "holderState" leaf will not have a value.
     */
    public void addHolderState() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "holderState",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "holderState" with operation "replace".
     */
    public void markHolderStateReplace() throws JNCException {
        markLeafReplace("holderState");
    }

    /**
     * Marks the leaf "holderState" with operation "merge".
     */
    public void markHolderStateMerge() throws JNCException {
        markLeafMerge("holderState");
    }

    /**
     * Marks the leaf "holderState" with operation "create".
     */
    public void markHolderStateCreate() throws JNCException {
        markLeafCreate("holderState");
    }

    /**
     * Marks the leaf "holderState" with operation "delete".
     */
    public void markHolderStateDelete() throws JNCException {
        markLeafDelete("holderState");
    }

    /* Access methods for optional leaf child: "holderType". */

    /**
     * Gets the value for child leaf "holderType".
     * @return The value of the leaf.
     */
    public HolderTypeEnum getHolderTypeValue() throws JNCException {
        return (HolderTypeEnum)getValue("holderType");
    }

    /**
     * Sets the value for child leaf "holderType",
     * using a JNC type value.
     * @param holderTypeValue The value to set.
     * @param holderTypeValue used during instantiation.
     */
    public void setHolderTypeValue(HolderTypeEnum holderTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "holderType",
            holderTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "holderType",
     * using a String value.
     * @param holderTypeValue used during instantiation.
     */
    public void setHolderTypeValue(String holderTypeValue) throws JNCException {
        setHolderTypeValue(new HolderTypeEnum(holderTypeValue));
    }

    /**
     * Unsets the value for child leaf "holderType".
     */
    public void unsetHolderTypeValue() throws JNCException {
        delete("holderType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "holderType" leaf will not have a value.
     */
    public void addHolderType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "holderType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "holderType" with operation "replace".
     */
    public void markHolderTypeReplace() throws JNCException {
        markLeafReplace("holderType");
    }

    /**
     * Marks the leaf "holderType" with operation "merge".
     */
    public void markHolderTypeMerge() throws JNCException {
        markLeafMerge("holderType");
    }

    /**
     * Marks the leaf "holderType" with operation "create".
     */
    public void markHolderTypeCreate() throws JNCException {
        markLeafCreate("holderType");
    }

    /**
     * Marks the leaf "holderType" with operation "delete".
     */
    public void markHolderTypeDelete() throws JNCException {
        markLeafDelete("holderType");
    }

    /* Access methods for optional leaf child: "ordinal". */

    /**
     * Gets the value for child leaf "ordinal".
     * @return The value of the leaf.
     */
    public YangUInt32 getOrdinalValue() throws JNCException {
        return (YangUInt32)getValue("ordinal");
    }

    /**
     * Sets the value for child leaf "ordinal",
     * using instance of generated typedef class.
     * @param ordinalValue The value to set.
     * @param ordinalValue used during instantiation.
     */
    public void setOrdinalValue(YangUInt32 ordinalValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ordinal",
            ordinalValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ordinal",
     * using Java primitive values.
     * @param ordinalValue used during instantiation.
     */
    public void setOrdinalValue(long ordinalValue) throws JNCException {
        setOrdinalValue(new YangUInt32(ordinalValue));
    }

    /**
     * Sets the value for child leaf "ordinal",
     * using a String value.
     * @param ordinalValue used during instantiation.
     */
    public void setOrdinalValue(String ordinalValue) throws JNCException {
        setOrdinalValue(new YangUInt32(ordinalValue));
    }

    /**
     * Unsets the value for child leaf "ordinal".
     */
    public void unsetOrdinalValue() throws JNCException {
        delete("ordinal");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ordinal" leaf will not have a value.
     */
    public void addOrdinal() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "ordinal",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ordinal" with operation "replace".
     */
    public void markOrdinalReplace() throws JNCException {
        markLeafReplace("ordinal");
    }

    /**
     * Marks the leaf "ordinal" with operation "merge".
     */
    public void markOrdinalMerge() throws JNCException {
        markLeafMerge("ordinal");
    }

    /**
     * Marks the leaf "ordinal" with operation "create".
     */
    public void markOrdinalCreate() throws JNCException {
        markLeafCreate("ordinal");
    }

    /**
     * Marks the leaf "ordinal" with operation "delete".
     */
    public void markOrdinalDelete() throws JNCException {
        markLeafDelete("ordinal");
    }

    /* Access methods for list child: "physicalInterface". */

    /**
     * Gets list entry "physicalInterface", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public PhysicalInterface getPhysicalInterface(Uuid uuidValue)
            throws JNCException {
        String path = "physicalInterface[uuid='" + uuidValue + "']";
        return (PhysicalInterface)searchOne(path);
    }

    /**
     * Gets list entry "physicalInterface", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public PhysicalInterface getPhysicalInterface(String uuidValue)
            throws JNCException {
        String path = "physicalInterface[uuid='" + uuidValue + "']";
        return (PhysicalInterface)searchOne(path);
    }

    /**
     * Iterator method for the list "physicalInterface".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator physicalInterfaceIterator() {
        return new ElementChildrenIterator(children, "physicalInterface");
    }

    /**
     * Adds list entry "physicalInterface", using an existing object.
     * @param physicalInterface The object to add.
     * @return The added child.
     */
    public PhysicalInterface addPhysicalInterface(PhysicalInterface physicalInterface)
            throws JNCException {
        insertChild(physicalInterface, childrenNames());
        return physicalInterface;
    }

    /**
     * Adds list entry "physicalInterface", with specified keys.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public PhysicalInterface addPhysicalInterface(Uuid uuidValue)
            throws JNCException {
        PhysicalInterface physicalInterface = new PhysicalInterface(uuidValue);
        return addPhysicalInterface(physicalInterface);
    }

    /**
     * Adds list entry "physicalInterface", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     * @return The added child.
     */
    public PhysicalInterface addPhysicalInterface(String uuidValue)
            throws JNCException {
        PhysicalInterface physicalInterface = new PhysicalInterface(uuidValue);
        return addPhysicalInterface(physicalInterface);
    }

    /**
     * Adds list entry "physicalInterface".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PhysicalInterface addPhysicalInterface() throws JNCException {
        PhysicalInterface physicalInterface = new PhysicalInterface();
        insertChild(physicalInterface, childrenNames());
        return physicalInterface;
    }

    /**
     * Deletes list entry "physicalInterface", with specified keys.
     * @param uuidValue Key argument of child.
     */
    public void deletePhysicalInterface(Uuid uuidValue) throws JNCException {
        String path = "physicalInterface[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "physicalInterface", with specified keys.
     * The keys are specified as strings.
     * @param uuidValue Key argument of child.
     */
    public void deletePhysicalInterface(String uuidValue) throws JNCException {
        String path = "physicalInterface[uuid='" + uuidValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
