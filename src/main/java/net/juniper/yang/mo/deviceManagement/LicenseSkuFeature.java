/* 
 * @(#)LicenseSkuFeature.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.yang.mo.deviceManagement.licenseSkuFeature.IdPerms;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/licenseSkuFeature"
 * <p>
 * See line 1043 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class LicenseSkuFeature extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("licenseSkuFeature");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty LicenseSkuFeature object.
     */
    public LicenseSkuFeature() {
        super(Devicemgt.NAMESPACE, "licenseSkuFeature");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized LicenseSkuFeature object,
     * 
     * @param uuidValue Key argument of child.
     */
    public LicenseSkuFeature(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "licenseSkuFeature");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized LicenseSkuFeature object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public LicenseSkuFeature(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "licenseSkuFeature");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LicenseSkuFeature clone() {
        LicenseSkuFeature copy;
        try {
            copy = new LicenseSkuFeature(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LicenseSkuFeature)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LicenseSkuFeature cloneShallow() {
        LicenseSkuFeature copy;
        try {
            copy = new LicenseSkuFeature(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LicenseSkuFeature)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "licenseName",
            "skuFeatureName",
            "path",
            "amount",
            "originalTimeAllowed",
            "active",
            "timeRemaining",
            "startDate",
            "endDate",
            "skuFeatureType",
            "validityType",
            "createDate",
            "licenseVersion",
            "state",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "licenseName". */

    /**
     * Gets the value for child leaf "licenseName".
     * @return The value of the leaf.
     */
    public YangString getLicenseNameValue() throws JNCException {
        return (YangString)getValue("licenseName");
    }

    /**
     * Sets the value for child leaf "licenseName",
     * using instance of generated typedef class.
     * @param licenseNameValue The value to set.
     * @param licenseNameValue used during instantiation.
     */
    public void setLicenseNameValue(YangString licenseNameValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "licenseName",
            licenseNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "licenseName",
     * using a String value.
     * @param licenseNameValue used during instantiation.
     */
    public void setLicenseNameValue(String licenseNameValue)
            throws JNCException {
        setLicenseNameValue(new YangString(licenseNameValue));
    }

    /**
     * Unsets the value for child leaf "licenseName".
     */
    public void unsetLicenseNameValue() throws JNCException {
        delete("licenseName");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "licenseName" leaf will not have a value.
     */
    public void addLicenseName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "licenseName",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "licenseName" with operation "replace".
     */
    public void markLicenseNameReplace() throws JNCException {
        markLeafReplace("licenseName");
    }

    /**
     * Marks the leaf "licenseName" with operation "merge".
     */
    public void markLicenseNameMerge() throws JNCException {
        markLeafMerge("licenseName");
    }

    /**
     * Marks the leaf "licenseName" with operation "create".
     */
    public void markLicenseNameCreate() throws JNCException {
        markLeafCreate("licenseName");
    }

    /**
     * Marks the leaf "licenseName" with operation "delete".
     */
    public void markLicenseNameDelete() throws JNCException {
        markLeafDelete("licenseName");
    }

    /* Access methods for optional leaf child: "skuFeatureName". */

    /**
     * Gets the value for child leaf "skuFeatureName".
     * @return The value of the leaf.
     */
    public YangString getSkuFeatureNameValue() throws JNCException {
        return (YangString)getValue("skuFeatureName");
    }

    /**
     * Sets the value for child leaf "skuFeatureName",
     * using instance of generated typedef class.
     * @param skuFeatureNameValue The value to set.
     * @param skuFeatureNameValue used during instantiation.
     */
    public void setSkuFeatureNameValue(YangString skuFeatureNameValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "skuFeatureName",
            skuFeatureNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "skuFeatureName",
     * using a String value.
     * @param skuFeatureNameValue used during instantiation.
     */
    public void setSkuFeatureNameValue(String skuFeatureNameValue)
            throws JNCException {
        setSkuFeatureNameValue(new YangString(skuFeatureNameValue));
    }

    /**
     * Unsets the value for child leaf "skuFeatureName".
     */
    public void unsetSkuFeatureNameValue() throws JNCException {
        delete("skuFeatureName");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "skuFeatureName" leaf will not have a value.
     */
    public void addSkuFeatureName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "skuFeatureName",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "skuFeatureName" with operation "replace".
     */
    public void markSkuFeatureNameReplace() throws JNCException {
        markLeafReplace("skuFeatureName");
    }

    /**
     * Marks the leaf "skuFeatureName" with operation "merge".
     */
    public void markSkuFeatureNameMerge() throws JNCException {
        markLeafMerge("skuFeatureName");
    }

    /**
     * Marks the leaf "skuFeatureName" with operation "create".
     */
    public void markSkuFeatureNameCreate() throws JNCException {
        markLeafCreate("skuFeatureName");
    }

    /**
     * Marks the leaf "skuFeatureName" with operation "delete".
     */
    public void markSkuFeatureNameDelete() throws JNCException {
        markLeafDelete("skuFeatureName");
    }

    /* Access methods for optional leaf child: "path". */

    /**
     * Gets the value for child leaf "path".
     * @return The value of the leaf.
     */
    public YangString getPathValue() throws JNCException {
        return (YangString)getValue("path");
    }

    /**
     * Sets the value for child leaf "path",
     * using instance of generated typedef class.
     * @param pathValue The value to set.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(YangString pathValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "path",
            pathValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path",
     * using a String value.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(String pathValue) throws JNCException {
        setPathValue(new YangString(pathValue));
    }

    /**
     * Unsets the value for child leaf "path".
     */
    public void unsetPathValue() throws JNCException {
        delete("path");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path" leaf will not have a value.
     */
    public void addPath() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "path",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path" with operation "replace".
     */
    public void markPathReplace() throws JNCException {
        markLeafReplace("path");
    }

    /**
     * Marks the leaf "path" with operation "merge".
     */
    public void markPathMerge() throws JNCException {
        markLeafMerge("path");
    }

    /**
     * Marks the leaf "path" with operation "create".
     */
    public void markPathCreate() throws JNCException {
        markLeafCreate("path");
    }

    /**
     * Marks the leaf "path" with operation "delete".
     */
    public void markPathDelete() throws JNCException {
        markLeafDelete("path");
    }

    /* Access methods for optional leaf child: "amount". */

    /**
     * Gets the value for child leaf "amount".
     * @return The value of the leaf.
     */
    public YangString getAmountValue() throws JNCException {
        return (YangString)getValue("amount");
    }

    /**
     * Sets the value for child leaf "amount",
     * using instance of generated typedef class.
     * @param amountValue The value to set.
     * @param amountValue used during instantiation.
     */
    public void setAmountValue(YangString amountValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "amount",
            amountValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "amount",
     * using a String value.
     * @param amountValue used during instantiation.
     */
    public void setAmountValue(String amountValue) throws JNCException {
        setAmountValue(new YangString(amountValue));
    }

    /**
     * Unsets the value for child leaf "amount".
     */
    public void unsetAmountValue() throws JNCException {
        delete("amount");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "amount" leaf will not have a value.
     */
    public void addAmount() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "amount",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "amount" with operation "replace".
     */
    public void markAmountReplace() throws JNCException {
        markLeafReplace("amount");
    }

    /**
     * Marks the leaf "amount" with operation "merge".
     */
    public void markAmountMerge() throws JNCException {
        markLeafMerge("amount");
    }

    /**
     * Marks the leaf "amount" with operation "create".
     */
    public void markAmountCreate() throws JNCException {
        markLeafCreate("amount");
    }

    /**
     * Marks the leaf "amount" with operation "delete".
     */
    public void markAmountDelete() throws JNCException {
        markLeafDelete("amount");
    }

    /* Access methods for optional leaf child: "originalTimeAllowed". */

    /**
     * Gets the value for child leaf "originalTimeAllowed".
     * @return The value of the leaf.
     */
    public YangString getOriginalTimeAllowedValue() throws JNCException {
        return (YangString)getValue("originalTimeAllowed");
    }

    /**
     * Sets the value for child leaf "originalTimeAllowed",
     * using instance of generated typedef class.
     * @param originalTimeAllowedValue The value to set.
     * @param originalTimeAllowedValue used during instantiation.
     */
    public void setOriginalTimeAllowedValue(YangString originalTimeAllowedValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "originalTimeAllowed",
            originalTimeAllowedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "originalTimeAllowed",
     * using a String value.
     * @param originalTimeAllowedValue used during instantiation.
     */
    public void setOriginalTimeAllowedValue(String originalTimeAllowedValue)
            throws JNCException {
        setOriginalTimeAllowedValue(new YangString(originalTimeAllowedValue));
    }

    /**
     * Unsets the value for child leaf "originalTimeAllowed".
     */
    public void unsetOriginalTimeAllowedValue() throws JNCException {
        delete("originalTimeAllowed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "originalTimeAllowed" leaf will not have a value.
     */
    public void addOriginalTimeAllowed() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "originalTimeAllowed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "originalTimeAllowed" with operation "replace".
     */
    public void markOriginalTimeAllowedReplace() throws JNCException {
        markLeafReplace("originalTimeAllowed");
    }

    /**
     * Marks the leaf "originalTimeAllowed" with operation "merge".
     */
    public void markOriginalTimeAllowedMerge() throws JNCException {
        markLeafMerge("originalTimeAllowed");
    }

    /**
     * Marks the leaf "originalTimeAllowed" with operation "create".
     */
    public void markOriginalTimeAllowedCreate() throws JNCException {
        markLeafCreate("originalTimeAllowed");
    }

    /**
     * Marks the leaf "originalTimeAllowed" with operation "delete".
     */
    public void markOriginalTimeAllowedDelete() throws JNCException {
        markLeafDelete("originalTimeAllowed");
    }

    /* Access methods for optional leaf child: "active". */

    /**
     * Gets the value for child leaf "active".
     * @return The value of the leaf.
     */
    public YangBoolean getActiveValue() throws JNCException {
        return (YangBoolean)getValue("active");
    }

    /**
     * Sets the value for child leaf "active",
     * using instance of generated typedef class.
     * @param activeValue The value to set.
     * @param activeValue used during instantiation.
     */
    public void setActiveValue(YangBoolean activeValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "active",
            activeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "active",
     * using Java primitive values.
     * @param activeValue used during instantiation.
     */
    public void setActiveValue(Boolean activeValue) throws JNCException {
        setActiveValue(new YangBoolean(activeValue));
    }

    /**
     * Sets the value for child leaf "active",
     * using a String value.
     * @param activeValue used during instantiation.
     */
    public void setActiveValue(String activeValue) throws JNCException {
        setActiveValue(new YangBoolean(activeValue));
    }

    /**
     * Unsets the value for child leaf "active".
     */
    public void unsetActiveValue() throws JNCException {
        delete("active");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "active" leaf will not have a value.
     */
    public void addActive() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "active",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "active" with operation "replace".
     */
    public void markActiveReplace() throws JNCException {
        markLeafReplace("active");
    }

    /**
     * Marks the leaf "active" with operation "merge".
     */
    public void markActiveMerge() throws JNCException {
        markLeafMerge("active");
    }

    /**
     * Marks the leaf "active" with operation "create".
     */
    public void markActiveCreate() throws JNCException {
        markLeafCreate("active");
    }

    /**
     * Marks the leaf "active" with operation "delete".
     */
    public void markActiveDelete() throws JNCException {
        markLeafDelete("active");
    }

    /* Access methods for optional leaf child: "timeRemaining". */

    /**
     * Gets the value for child leaf "timeRemaining".
     * @return The value of the leaf.
     */
    public YangString getTimeRemainingValue() throws JNCException {
        return (YangString)getValue("timeRemaining");
    }

    /**
     * Sets the value for child leaf "timeRemaining",
     * using instance of generated typedef class.
     * @param timeRemainingValue The value to set.
     * @param timeRemainingValue used during instantiation.
     */
    public void setTimeRemainingValue(YangString timeRemainingValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "timeRemaining",
            timeRemainingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "timeRemaining",
     * using a String value.
     * @param timeRemainingValue used during instantiation.
     */
    public void setTimeRemainingValue(String timeRemainingValue)
            throws JNCException {
        setTimeRemainingValue(new YangString(timeRemainingValue));
    }

    /**
     * Unsets the value for child leaf "timeRemaining".
     */
    public void unsetTimeRemainingValue() throws JNCException {
        delete("timeRemaining");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "timeRemaining" leaf will not have a value.
     */
    public void addTimeRemaining() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "timeRemaining",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "timeRemaining" with operation "replace".
     */
    public void markTimeRemainingReplace() throws JNCException {
        markLeafReplace("timeRemaining");
    }

    /**
     * Marks the leaf "timeRemaining" with operation "merge".
     */
    public void markTimeRemainingMerge() throws JNCException {
        markLeafMerge("timeRemaining");
    }

    /**
     * Marks the leaf "timeRemaining" with operation "create".
     */
    public void markTimeRemainingCreate() throws JNCException {
        markLeafCreate("timeRemaining");
    }

    /**
     * Marks the leaf "timeRemaining" with operation "delete".
     */
    public void markTimeRemainingDelete() throws JNCException {
        markLeafDelete("timeRemaining");
    }

    /* Access methods for optional leaf child: "startDate". */

    /**
     * Gets the value for child leaf "startDate".
     * @return The value of the leaf.
     */
    public YangUInt32 getStartDateValue() throws JNCException {
        return (YangUInt32)getValue("startDate");
    }

    /**
     * Sets the value for child leaf "startDate",
     * using instance of generated typedef class.
     * @param startDateValue The value to set.
     * @param startDateValue used during instantiation.
     */
    public void setStartDateValue(YangUInt32 startDateValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "startDate",
            startDateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "startDate",
     * using Java primitive values.
     * @param startDateValue used during instantiation.
     */
    public void setStartDateValue(long startDateValue) throws JNCException {
        setStartDateValue(new YangUInt32(startDateValue));
    }

    /**
     * Sets the value for child leaf "startDate",
     * using a String value.
     * @param startDateValue used during instantiation.
     */
    public void setStartDateValue(String startDateValue) throws JNCException {
        setStartDateValue(new YangUInt32(startDateValue));
    }

    /**
     * Unsets the value for child leaf "startDate".
     */
    public void unsetStartDateValue() throws JNCException {
        delete("startDate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "startDate" leaf will not have a value.
     */
    public void addStartDate() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "startDate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "startDate" with operation "replace".
     */
    public void markStartDateReplace() throws JNCException {
        markLeafReplace("startDate");
    }

    /**
     * Marks the leaf "startDate" with operation "merge".
     */
    public void markStartDateMerge() throws JNCException {
        markLeafMerge("startDate");
    }

    /**
     * Marks the leaf "startDate" with operation "create".
     */
    public void markStartDateCreate() throws JNCException {
        markLeafCreate("startDate");
    }

    /**
     * Marks the leaf "startDate" with operation "delete".
     */
    public void markStartDateDelete() throws JNCException {
        markLeafDelete("startDate");
    }

    /* Access methods for optional leaf child: "endDate". */

    /**
     * Gets the value for child leaf "endDate".
     * @return The value of the leaf.
     */
    public YangUInt32 getEndDateValue() throws JNCException {
        return (YangUInt32)getValue("endDate");
    }

    /**
     * Sets the value for child leaf "endDate",
     * using instance of generated typedef class.
     * @param endDateValue The value to set.
     * @param endDateValue used during instantiation.
     */
    public void setEndDateValue(YangUInt32 endDateValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "endDate",
            endDateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "endDate",
     * using Java primitive values.
     * @param endDateValue used during instantiation.
     */
    public void setEndDateValue(long endDateValue) throws JNCException {
        setEndDateValue(new YangUInt32(endDateValue));
    }

    /**
     * Sets the value for child leaf "endDate",
     * using a String value.
     * @param endDateValue used during instantiation.
     */
    public void setEndDateValue(String endDateValue) throws JNCException {
        setEndDateValue(new YangUInt32(endDateValue));
    }

    /**
     * Unsets the value for child leaf "endDate".
     */
    public void unsetEndDateValue() throws JNCException {
        delete("endDate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "endDate" leaf will not have a value.
     */
    public void addEndDate() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "endDate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "endDate" with operation "replace".
     */
    public void markEndDateReplace() throws JNCException {
        markLeafReplace("endDate");
    }

    /**
     * Marks the leaf "endDate" with operation "merge".
     */
    public void markEndDateMerge() throws JNCException {
        markLeafMerge("endDate");
    }

    /**
     * Marks the leaf "endDate" with operation "create".
     */
    public void markEndDateCreate() throws JNCException {
        markLeafCreate("endDate");
    }

    /**
     * Marks the leaf "endDate" with operation "delete".
     */
    public void markEndDateDelete() throws JNCException {
        markLeafDelete("endDate");
    }

    /* Access methods for optional leaf child: "skuFeatureType". */

    /**
     * Gets the value for child leaf "skuFeatureType".
     * @return The value of the leaf.
     */
    public YangUInt32 getSkuFeatureTypeValue() throws JNCException {
        return (YangUInt32)getValue("skuFeatureType");
    }

    /**
     * Sets the value for child leaf "skuFeatureType",
     * using instance of generated typedef class.
     * @param skuFeatureTypeValue The value to set.
     * @param skuFeatureTypeValue used during instantiation.
     */
    public void setSkuFeatureTypeValue(YangUInt32 skuFeatureTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "skuFeatureType",
            skuFeatureTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "skuFeatureType",
     * using Java primitive values.
     * @param skuFeatureTypeValue used during instantiation.
     */
    public void setSkuFeatureTypeValue(long skuFeatureTypeValue)
            throws JNCException {
        setSkuFeatureTypeValue(new YangUInt32(skuFeatureTypeValue));
    }

    /**
     * Sets the value for child leaf "skuFeatureType",
     * using a String value.
     * @param skuFeatureTypeValue used during instantiation.
     */
    public void setSkuFeatureTypeValue(String skuFeatureTypeValue)
            throws JNCException {
        setSkuFeatureTypeValue(new YangUInt32(skuFeatureTypeValue));
    }

    /**
     * Unsets the value for child leaf "skuFeatureType".
     */
    public void unsetSkuFeatureTypeValue() throws JNCException {
        delete("skuFeatureType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "skuFeatureType" leaf will not have a value.
     */
    public void addSkuFeatureType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "skuFeatureType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "skuFeatureType" with operation "replace".
     */
    public void markSkuFeatureTypeReplace() throws JNCException {
        markLeafReplace("skuFeatureType");
    }

    /**
     * Marks the leaf "skuFeatureType" with operation "merge".
     */
    public void markSkuFeatureTypeMerge() throws JNCException {
        markLeafMerge("skuFeatureType");
    }

    /**
     * Marks the leaf "skuFeatureType" with operation "create".
     */
    public void markSkuFeatureTypeCreate() throws JNCException {
        markLeafCreate("skuFeatureType");
    }

    /**
     * Marks the leaf "skuFeatureType" with operation "delete".
     */
    public void markSkuFeatureTypeDelete() throws JNCException {
        markLeafDelete("skuFeatureType");
    }

    /* Access methods for optional leaf child: "validityType". */

    /**
     * Gets the value for child leaf "validityType".
     * @return The value of the leaf.
     */
    public YangString getValidityTypeValue() throws JNCException {
        return (YangString)getValue("validityType");
    }

    /**
     * Sets the value for child leaf "validityType",
     * using instance of generated typedef class.
     * @param validityTypeValue The value to set.
     * @param validityTypeValue used during instantiation.
     */
    public void setValidityTypeValue(YangString validityTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "validityType",
            validityTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "validityType",
     * using a String value.
     * @param validityTypeValue used during instantiation.
     */
    public void setValidityTypeValue(String validityTypeValue)
            throws JNCException {
        setValidityTypeValue(new YangString(validityTypeValue));
    }

    /**
     * Unsets the value for child leaf "validityType".
     */
    public void unsetValidityTypeValue() throws JNCException {
        delete("validityType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "validityType" leaf will not have a value.
     */
    public void addValidityType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "validityType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "validityType" with operation "replace".
     */
    public void markValidityTypeReplace() throws JNCException {
        markLeafReplace("validityType");
    }

    /**
     * Marks the leaf "validityType" with operation "merge".
     */
    public void markValidityTypeMerge() throws JNCException {
        markLeafMerge("validityType");
    }

    /**
     * Marks the leaf "validityType" with operation "create".
     */
    public void markValidityTypeCreate() throws JNCException {
        markLeafCreate("validityType");
    }

    /**
     * Marks the leaf "validityType" with operation "delete".
     */
    public void markValidityTypeDelete() throws JNCException {
        markLeafDelete("validityType");
    }

    /* Access methods for optional leaf child: "createDate". */

    /**
     * Gets the value for child leaf "createDate".
     * @return The value of the leaf.
     */
    public YangUInt32 getCreateDateValue() throws JNCException {
        return (YangUInt32)getValue("createDate");
    }

    /**
     * Sets the value for child leaf "createDate",
     * using instance of generated typedef class.
     * @param createDateValue The value to set.
     * @param createDateValue used during instantiation.
     */
    public void setCreateDateValue(YangUInt32 createDateValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "createDate",
            createDateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "createDate",
     * using Java primitive values.
     * @param createDateValue used during instantiation.
     */
    public void setCreateDateValue(long createDateValue) throws JNCException {
        setCreateDateValue(new YangUInt32(createDateValue));
    }

    /**
     * Sets the value for child leaf "createDate",
     * using a String value.
     * @param createDateValue used during instantiation.
     */
    public void setCreateDateValue(String createDateValue) throws JNCException {
        setCreateDateValue(new YangUInt32(createDateValue));
    }

    /**
     * Unsets the value for child leaf "createDate".
     */
    public void unsetCreateDateValue() throws JNCException {
        delete("createDate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "createDate" leaf will not have a value.
     */
    public void addCreateDate() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "createDate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "createDate" with operation "replace".
     */
    public void markCreateDateReplace() throws JNCException {
        markLeafReplace("createDate");
    }

    /**
     * Marks the leaf "createDate" with operation "merge".
     */
    public void markCreateDateMerge() throws JNCException {
        markLeafMerge("createDate");
    }

    /**
     * Marks the leaf "createDate" with operation "create".
     */
    public void markCreateDateCreate() throws JNCException {
        markLeafCreate("createDate");
    }

    /**
     * Marks the leaf "createDate" with operation "delete".
     */
    public void markCreateDateDelete() throws JNCException {
        markLeafDelete("createDate");
    }

    /* Access methods for optional leaf child: "licenseVersion". */

    /**
     * Gets the value for child leaf "licenseVersion".
     * @return The value of the leaf.
     */
    public YangUInt32 getLicenseVersionValue() throws JNCException {
        return (YangUInt32)getValue("licenseVersion");
    }

    /**
     * Sets the value for child leaf "licenseVersion",
     * using instance of generated typedef class.
     * @param licenseVersionValue The value to set.
     * @param licenseVersionValue used during instantiation.
     */
    public void setLicenseVersionValue(YangUInt32 licenseVersionValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "licenseVersion",
            licenseVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "licenseVersion",
     * using Java primitive values.
     * @param licenseVersionValue used during instantiation.
     */
    public void setLicenseVersionValue(long licenseVersionValue)
            throws JNCException {
        setLicenseVersionValue(new YangUInt32(licenseVersionValue));
    }

    /**
     * Sets the value for child leaf "licenseVersion",
     * using a String value.
     * @param licenseVersionValue used during instantiation.
     */
    public void setLicenseVersionValue(String licenseVersionValue)
            throws JNCException {
        setLicenseVersionValue(new YangUInt32(licenseVersionValue));
    }

    /**
     * Unsets the value for child leaf "licenseVersion".
     */
    public void unsetLicenseVersionValue() throws JNCException {
        delete("licenseVersion");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "licenseVersion" leaf will not have a value.
     */
    public void addLicenseVersion() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "licenseVersion",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "licenseVersion" with operation "replace".
     */
    public void markLicenseVersionReplace() throws JNCException {
        markLeafReplace("licenseVersion");
    }

    /**
     * Marks the leaf "licenseVersion" with operation "merge".
     */
    public void markLicenseVersionMerge() throws JNCException {
        markLeafMerge("licenseVersion");
    }

    /**
     * Marks the leaf "licenseVersion" with operation "create".
     */
    public void markLicenseVersionCreate() throws JNCException {
        markLeafCreate("licenseVersion");
    }

    /**
     * Marks the leaf "licenseVersion" with operation "delete".
     */
    public void markLicenseVersionDelete() throws JNCException {
        markLeafDelete("licenseVersion");
    }

    /* Access methods for optional leaf child: "state". */

    /**
     * Gets the value for child leaf "state".
     * @return The value of the leaf.
     */
    public YangUInt32 getStateValue() throws JNCException {
        return (YangUInt32)getValue("state");
    }

    /**
     * Sets the value for child leaf "state",
     * using instance of generated typedef class.
     * @param stateValue The value to set.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(YangUInt32 stateValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "state",
            stateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "state",
     * using Java primitive values.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(long stateValue) throws JNCException {
        setStateValue(new YangUInt32(stateValue));
    }

    /**
     * Sets the value for child leaf "state",
     * using a String value.
     * @param stateValue used during instantiation.
     */
    public void setStateValue(String stateValue) throws JNCException {
        setStateValue(new YangUInt32(stateValue));
    }

    /**
     * Unsets the value for child leaf "state".
     */
    public void unsetStateValue() throws JNCException {
        delete("state");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "state" leaf will not have a value.
     */
    public void addState() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "state",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "state" with operation "replace".
     */
    public void markStateReplace() throws JNCException {
        markLeafReplace("state");
    }

    /**
     * Marks the leaf "state" with operation "merge".
     */
    public void markStateMerge() throws JNCException {
        markLeafMerge("state");
    }

    /**
     * Marks the leaf "state" with operation "create".
     */
    public void markStateCreate() throws JNCException {
        markLeafCreate("state");
    }

    /**
     * Marks the leaf "state" with operation "delete".
     */
    public void markStateDelete() throws JNCException {
        markLeafDelete("state");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
