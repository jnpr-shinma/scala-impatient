/* 
 * @(#)OobChange.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.yang.mo.deviceManagement.oobChange.IdPerms;
import net.juniper.yang.mo.ietfInetTypes.Uri;
import net.juniper.yang.mo.ietfYangTypes.Timestamp;
import net.juniper.yang.mo.ietfYangTypes.Uuid;
import net.juniper.yang.mo.iqIfmapTypes.Ifmap;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/oobChange"
 * <p>
 * See line 673 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class OobChange extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("oobChange");

    static {
        Devicemgt.enable();
    }

    /**
     * Field for child container "id-perms".
     */
    public IdPerms idPerms = null;

    /**
     * Constructor for an empty OobChange object.
     */
    public OobChange() {
        super(Devicemgt.NAMESPACE, "oobChange");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
    }

    /**
     * Constructor for an initialized OobChange object,
     * 
     * @param uuidValue Key argument of child.
     */
    public OobChange(Uuid uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "oobChange");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized OobChange object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public OobChange(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "oobChange");
        setDefaultPrefix();
        setPrefix(Devicemgt.PREFIX);
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new Uuid(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public OobChange clone() {
        OobChange copy;
        try {
            copy = new OobChange(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (OobChange)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public OobChange cloneShallow() {
        OobChange copy;
        try {
            copy = new OobChange(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (OobChange)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "administrative-domain",
            "name",
            "type",
            "other-definition",
            "fq-name",
            "uuid",
            "href",
            "parent-uuid",
            "parent-href",
            "parent-type",
            "display-name",
            "id-perms",
            "authors",
            "timeStamp",
            "changeXml",
            "negativeChangeXml",
            "changeType",
            "commitComment",
            "appName",
            "crId",
            "processingComments",
        };
    }

    /* Access methods for optional leaf child: "administrative-domain". */

    /**
     * Gets the value for child leaf "administrative-domain".
     * @return The value of the leaf.
     */
    public YangString getAdministrativeDomainValue() throws JNCException {
        return (YangString)getValue("administrative-domain");
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using instance of generated typedef class.
     * @param administrativeDomainValue The value to set.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(YangString administrativeDomainValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            administrativeDomainValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "administrative-domain",
     * using a String value.
     * @param administrativeDomainValue used during instantiation.
     */
    public void setAdministrativeDomainValue(String administrativeDomainValue)
            throws JNCException {
        setAdministrativeDomainValue(new YangString(administrativeDomainValue));
    }

    /**
     * Unsets the value for child leaf "administrative-domain".
     */
    public void unsetAdministrativeDomainValue() throws JNCException {
        delete("administrative-domain");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "administrative-domain" leaf will not have a value.
     */
    public void addAdministrativeDomain() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "administrative-domain",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "administrative-domain" with operation "replace".
     */
    public void markAdministrativeDomainReplace() throws JNCException {
        markLeafReplace("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "merge".
     */
    public void markAdministrativeDomainMerge() throws JNCException {
        markLeafMerge("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "create".
     */
    public void markAdministrativeDomainCreate() throws JNCException {
        markLeafCreate("administrativeDomain");
    }

    /**
     * Marks the leaf "administrative-domain" with operation "delete".
     */
    public void markAdministrativeDomainDelete() throws JNCException {
        markLeafDelete("administrativeDomain");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangEnumeration getTypeValue() throws JNCException {
        return (YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangEnumeration typeValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangEnumeration(typeValue, new String[] {
             "aik-name",
             "distinguished-name",
             "dns-name",
             "email-address",
             "hip-hit",
             "kerberos-principal",
             "username",
             "sip-uri",
             "tel-uri",
             "other",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "other-definition". */

    /**
     * Gets the value for child leaf "other-definition".
     * @return The value of the leaf.
     */
    public YangString getOtherDefinitionValue() throws JNCException {
        return (YangString)getValue("other-definition");
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using instance of generated typedef class.
     * @param otherDefinitionValue The value to set.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(YangString otherDefinitionValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            otherDefinitionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "other-definition",
     * using a String value.
     * @param otherDefinitionValue used during instantiation.
     */
    public void setOtherDefinitionValue(String otherDefinitionValue)
            throws JNCException {
        setOtherDefinitionValue(new YangString(otherDefinitionValue));
    }

    /**
     * Unsets the value for child leaf "other-definition".
     */
    public void unsetOtherDefinitionValue() throws JNCException {
        delete("other-definition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "other-definition" leaf will not have a value.
     */
    public void addOtherDefinition() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "other-definition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "other-definition" with operation "replace".
     */
    public void markOtherDefinitionReplace() throws JNCException {
        markLeafReplace("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "merge".
     */
    public void markOtherDefinitionMerge() throws JNCException {
        markLeafMerge("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "create".
     */
    public void markOtherDefinitionCreate() throws JNCException {
        markLeafCreate("otherDefinition");
    }

    /**
     * Marks the leaf "other-definition" with operation "delete".
     */
    public void markOtherDefinitionDelete() throws JNCException {
        markLeafDelete("otherDefinition");
    }

    /* Access methods for optional leaf-list child: "fq-name". */

    /**
     * Iterator method for the leaf-list "fq-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator fqNameIterator() {
        return new ElementLeafListValueIterator(children, "fq-name");
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using instance of generated typedef class.
     * @param fqNameValue The value to set.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(YangString fqNameValue) throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            fqNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "fq-name",
     * using a String value.
     * @param fqNameValue used during instantiation.
     */
    public void setFqNameValue(String fqNameValue) throws JNCException {
        setFqNameValue(new YangString(fqNameValue));
    }

    /**
     * Deletes leaf-list entry "fqName".
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(YangString fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "fqName".
     * The value is specified as a string.
     * @param fqNameValue Value to delete.
     */
    public void deleteFqName(String fqNameValue) throws JNCException {
        String path = "fqName[fqNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fq-name" leaf-list will not have a value.
     */
    public void addFqName() throws JNCException {
        setLeafListValue(Ifmap.NAMESPACE,
            "fq-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "fq-name" with operation "replace".
     * @param fqNameValue The value to mark
     */
    public void markFqNameReplace(YangString fqNameValue) throws JNCException {
        markLeafReplace("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "merge".
     * @param fqNameValue The value to mark
     */
    public void markFqNameMerge(YangString fqNameValue) throws JNCException {
        markLeafMerge("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "create".
     * @param fqNameValue The value to mark
     */
    public void markFqNameCreate(YangString fqNameValue) throws JNCException {
        markLeafCreate("fqName[name='" + fqNameValue + "']");
    }

    /**
     * Marks the leaf-list "fq-name" with operation "delete".
     * @param fqNameValue The value to mark
     */
    public void markFqNameDelete(YangString fqNameValue) throws JNCException {
        markLeafDelete("fqName[name='" + fqNameValue + "']");
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public Uuid getUuidValue() throws JNCException {
        return (Uuid)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(Uuid uuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new Uuid(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "href". */

    /**
     * Gets the value for child leaf "href".
     * @return The value of the leaf.
     */
    public Uri getHrefValue() throws JNCException {
        return (Uri)getValue("href");
    }

    /**
     * Sets the value for child leaf "href",
     * using a JNC type value.
     * @param hrefValue The value to set.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(Uri hrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            hrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "href",
     * using a String value.
     * @param hrefValue used during instantiation.
     */
    public void setHrefValue(String hrefValue) throws JNCException {
        setHrefValue(new Uri(hrefValue));
    }

    /**
     * Unsets the value for child leaf "href".
     */
    public void unsetHrefValue() throws JNCException {
        delete("href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "href" leaf will not have a value.
     */
    public void addHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "href" with operation "replace".
     */
    public void markHrefReplace() throws JNCException {
        markLeafReplace("href");
    }

    /**
     * Marks the leaf "href" with operation "merge".
     */
    public void markHrefMerge() throws JNCException {
        markLeafMerge("href");
    }

    /**
     * Marks the leaf "href" with operation "create".
     */
    public void markHrefCreate() throws JNCException {
        markLeafCreate("href");
    }

    /**
     * Marks the leaf "href" with operation "delete".
     */
    public void markHrefDelete() throws JNCException {
        markLeafDelete("href");
    }

    /* Access methods for optional leaf child: "parent-uuid". */

    /**
     * Gets the value for child leaf "parent-uuid".
     * @return The value of the leaf.
     */
    public Uuid getParentUuidValue() throws JNCException {
        return (Uuid)getValue("parent-uuid");
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a JNC type value.
     * @param parentUuidValue The value to set.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(Uuid parentUuidValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            parentUuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-uuid",
     * using a String value.
     * @param parentUuidValue used during instantiation.
     */
    public void setParentUuidValue(String parentUuidValue) throws JNCException {
        setParentUuidValue(new Uuid(parentUuidValue));
    }

    /**
     * Unsets the value for child leaf "parent-uuid".
     */
    public void unsetParentUuidValue() throws JNCException {
        delete("parent-uuid");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-uuid" leaf will not have a value.
     */
    public void addParentUuid() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-uuid",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-uuid" with operation "replace".
     */
    public void markParentUuidReplace() throws JNCException {
        markLeafReplace("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "merge".
     */
    public void markParentUuidMerge() throws JNCException {
        markLeafMerge("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "create".
     */
    public void markParentUuidCreate() throws JNCException {
        markLeafCreate("parentUuid");
    }

    /**
     * Marks the leaf "parent-uuid" with operation "delete".
     */
    public void markParentUuidDelete() throws JNCException {
        markLeafDelete("parentUuid");
    }

    /* Access methods for optional leaf child: "parent-href". */

    /**
     * Gets the value for child leaf "parent-href".
     * @return The value of the leaf.
     */
    public Uri getParentHrefValue() throws JNCException {
        return (Uri)getValue("parent-href");
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a JNC type value.
     * @param parentHrefValue The value to set.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(Uri parentHrefValue) throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            parentHrefValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-href",
     * using a String value.
     * @param parentHrefValue used during instantiation.
     */
    public void setParentHrefValue(String parentHrefValue) throws JNCException {
        setParentHrefValue(new Uri(parentHrefValue));
    }

    /**
     * Unsets the value for child leaf "parent-href".
     */
    public void unsetParentHrefValue() throws JNCException {
        delete("parent-href");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-href" leaf will not have a value.
     */
    public void addParentHref() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-href",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-href" with operation "replace".
     */
    public void markParentHrefReplace() throws JNCException {
        markLeafReplace("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "merge".
     */
    public void markParentHrefMerge() throws JNCException {
        markLeafMerge("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "create".
     */
    public void markParentHrefCreate() throws JNCException {
        markLeafCreate("parentHref");
    }

    /**
     * Marks the leaf "parent-href" with operation "delete".
     */
    public void markParentHrefDelete() throws JNCException {
        markLeafDelete("parentHref");
    }

    /* Access methods for optional leaf child: "parent-type". */

    /**
     * Gets the value for child leaf "parent-type".
     * @return The value of the leaf.
     */
    public YangString getParentTypeValue() throws JNCException {
        return (YangString)getValue("parent-type");
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using instance of generated typedef class.
     * @param parentTypeValue The value to set.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(YangString parentTypeValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            parentTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parent-type",
     * using a String value.
     * @param parentTypeValue used during instantiation.
     */
    public void setParentTypeValue(String parentTypeValue) throws JNCException {
        setParentTypeValue(new YangString(parentTypeValue));
    }

    /**
     * Unsets the value for child leaf "parent-type".
     */
    public void unsetParentTypeValue() throws JNCException {
        delete("parent-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parent-type" leaf will not have a value.
     */
    public void addParentType() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "parent-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parent-type" with operation "replace".
     */
    public void markParentTypeReplace() throws JNCException {
        markLeafReplace("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "merge".
     */
    public void markParentTypeMerge() throws JNCException {
        markLeafMerge("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "create".
     */
    public void markParentTypeCreate() throws JNCException {
        markLeafCreate("parentType");
    }

    /**
     * Marks the leaf "parent-type" with operation "delete".
     */
    public void markParentTypeDelete() throws JNCException {
        markLeafDelete("parentType");
    }

    /* Access methods for optional leaf child: "display-name". */

    /**
     * Gets the value for child leaf "display-name".
     * @return The value of the leaf.
     */
    public YangString getDisplayNameValue() throws JNCException {
        return (YangString)getValue("display-name");
    }

    /**
     * Sets the value for child leaf "display-name",
     * using instance of generated typedef class.
     * @param displayNameValue The value to set.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(YangString displayNameValue)
            throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            displayNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "display-name",
     * using a String value.
     * @param displayNameValue used during instantiation.
     */
    public void setDisplayNameValue(String displayNameValue)
            throws JNCException {
        setDisplayNameValue(new YangString(displayNameValue));
    }

    /**
     * Unsets the value for child leaf "display-name".
     */
    public void unsetDisplayNameValue() throws JNCException {
        delete("display-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "display-name" leaf will not have a value.
     */
    public void addDisplayName() throws JNCException {
        setLeafValue(Ifmap.NAMESPACE,
            "display-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "display-name" with operation "replace".
     */
    public void markDisplayNameReplace() throws JNCException {
        markLeafReplace("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "merge".
     */
    public void markDisplayNameMerge() throws JNCException {
        markLeafMerge("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "create".
     */
    public void markDisplayNameCreate() throws JNCException {
        markLeafCreate("displayName");
    }

    /**
     * Marks the leaf "display-name" with operation "delete".
     */
    public void markDisplayNameDelete() throws JNCException {
        markLeafDelete("displayName");
    }

    /* Access methods for container child: "id-perms". */

    /**
     * Adds container entry "idPerms", using an existing object.
     * @param idPerms The object to add.
     * @return The added child.
     */
    public IdPerms addIdPerms(IdPerms idPerms) throws JNCException {
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Adds container entry "idPerms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public IdPerms addIdPerms() throws JNCException {
        IdPerms idPerms = new IdPerms();
        this.idPerms = idPerms;
        insertChild(idPerms, childrenNames());
        return idPerms;
    }

    /**
     * Deletes container entry "idPerms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdPerms() throws JNCException {
        this.idPerms = null;
        String path = "id-perms";
        return delete(path);
    }

    /* Access methods for optional leaf child: "authors". */

    /**
     * Gets the value for child leaf "authors".
     * @return The value of the leaf.
     */
    public YangString getAuthorsValue() throws JNCException {
        return (YangString)getValue("authors");
    }

    /**
     * Sets the value for child leaf "authors",
     * using instance of generated typedef class.
     * @param authorsValue The value to set.
     * @param authorsValue used during instantiation.
     */
    public void setAuthorsValue(YangString authorsValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "authors",
            authorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "authors",
     * using a String value.
     * @param authorsValue used during instantiation.
     */
    public void setAuthorsValue(String authorsValue) throws JNCException {
        setAuthorsValue(new YangString(authorsValue));
    }

    /**
     * Unsets the value for child leaf "authors".
     */
    public void unsetAuthorsValue() throws JNCException {
        delete("authors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "authors" leaf will not have a value.
     */
    public void addAuthors() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "authors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "authors" with operation "replace".
     */
    public void markAuthorsReplace() throws JNCException {
        markLeafReplace("authors");
    }

    /**
     * Marks the leaf "authors" with operation "merge".
     */
    public void markAuthorsMerge() throws JNCException {
        markLeafMerge("authors");
    }

    /**
     * Marks the leaf "authors" with operation "create".
     */
    public void markAuthorsCreate() throws JNCException {
        markLeafCreate("authors");
    }

    /**
     * Marks the leaf "authors" with operation "delete".
     */
    public void markAuthorsDelete() throws JNCException {
        markLeafDelete("authors");
    }

    /* Access methods for optional leaf child: "timeStamp". */

    /**
     * Gets the value for child leaf "timeStamp".
     * @return The value of the leaf.
     */
    public Timestamp getTimeStampValue() throws JNCException {
        return (Timestamp)getValue("timeStamp");
    }

    /**
     * Sets the value for child leaf "timeStamp",
     * using a JNC type value.
     * @param timeStampValue The value to set.
     * @param timeStampValue used during instantiation.
     */
    public void setTimeStampValue(Timestamp timeStampValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "timeStamp",
            timeStampValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "timeStamp",
     * using Java primitive values.
     * @param timeStampValue used during instantiation.
     */
    public void setTimeStampValue(long timeStampValue) throws JNCException {
        setTimeStampValue(new Timestamp(timeStampValue));
    }

    /**
     * Sets the value for child leaf "timeStamp",
     * using a String value.
     * @param timeStampValue used during instantiation.
     */
    public void setTimeStampValue(String timeStampValue) throws JNCException {
        setTimeStampValue(new Timestamp(timeStampValue));
    }

    /**
     * Unsets the value for child leaf "timeStamp".
     */
    public void unsetTimeStampValue() throws JNCException {
        delete("timeStamp");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "timeStamp" leaf will not have a value.
     */
    public void addTimeStamp() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "timeStamp",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "timeStamp" with operation "replace".
     */
    public void markTimeStampReplace() throws JNCException {
        markLeafReplace("timeStamp");
    }

    /**
     * Marks the leaf "timeStamp" with operation "merge".
     */
    public void markTimeStampMerge() throws JNCException {
        markLeafMerge("timeStamp");
    }

    /**
     * Marks the leaf "timeStamp" with operation "create".
     */
    public void markTimeStampCreate() throws JNCException {
        markLeafCreate("timeStamp");
    }

    /**
     * Marks the leaf "timeStamp" with operation "delete".
     */
    public void markTimeStampDelete() throws JNCException {
        markLeafDelete("timeStamp");
    }

    /* Access methods for optional leaf child: "changeXml". */

    /**
     * Gets the value for child leaf "changeXml".
     * @return The value of the leaf.
     */
    public YangString getChangeXmlValue() throws JNCException {
        return (YangString)getValue("changeXml");
    }

    /**
     * Sets the value for child leaf "changeXml",
     * using instance of generated typedef class.
     * @param changeXmlValue The value to set.
     * @param changeXmlValue used during instantiation.
     */
    public void setChangeXmlValue(YangString changeXmlValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "changeXml",
            changeXmlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "changeXml",
     * using a String value.
     * @param changeXmlValue used during instantiation.
     */
    public void setChangeXmlValue(String changeXmlValue) throws JNCException {
        setChangeXmlValue(new YangString(changeXmlValue));
    }

    /**
     * Unsets the value for child leaf "changeXml".
     */
    public void unsetChangeXmlValue() throws JNCException {
        delete("changeXml");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "changeXml" leaf will not have a value.
     */
    public void addChangeXml() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "changeXml",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "changeXml" with operation "replace".
     */
    public void markChangeXmlReplace() throws JNCException {
        markLeafReplace("changeXml");
    }

    /**
     * Marks the leaf "changeXml" with operation "merge".
     */
    public void markChangeXmlMerge() throws JNCException {
        markLeafMerge("changeXml");
    }

    /**
     * Marks the leaf "changeXml" with operation "create".
     */
    public void markChangeXmlCreate() throws JNCException {
        markLeafCreate("changeXml");
    }

    /**
     * Marks the leaf "changeXml" with operation "delete".
     */
    public void markChangeXmlDelete() throws JNCException {
        markLeafDelete("changeXml");
    }

    /* Access methods for optional leaf child: "negativeChangeXml". */

    /**
     * Gets the value for child leaf "negativeChangeXml".
     * @return The value of the leaf.
     */
    public YangString getNegativeChangeXmlValue() throws JNCException {
        return (YangString)getValue("negativeChangeXml");
    }

    /**
     * Sets the value for child leaf "negativeChangeXml",
     * using instance of generated typedef class.
     * @param negativeChangeXmlValue The value to set.
     * @param negativeChangeXmlValue used during instantiation.
     */
    public void setNegativeChangeXmlValue(YangString negativeChangeXmlValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "negativeChangeXml",
            negativeChangeXmlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "negativeChangeXml",
     * using a String value.
     * @param negativeChangeXmlValue used during instantiation.
     */
    public void setNegativeChangeXmlValue(String negativeChangeXmlValue)
            throws JNCException {
        setNegativeChangeXmlValue(new YangString(negativeChangeXmlValue));
    }

    /**
     * Unsets the value for child leaf "negativeChangeXml".
     */
    public void unsetNegativeChangeXmlValue() throws JNCException {
        delete("negativeChangeXml");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "negativeChangeXml" leaf will not have a value.
     */
    public void addNegativeChangeXml() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "negativeChangeXml",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "negativeChangeXml" with operation "replace".
     */
    public void markNegativeChangeXmlReplace() throws JNCException {
        markLeafReplace("negativeChangeXml");
    }

    /**
     * Marks the leaf "negativeChangeXml" with operation "merge".
     */
    public void markNegativeChangeXmlMerge() throws JNCException {
        markLeafMerge("negativeChangeXml");
    }

    /**
     * Marks the leaf "negativeChangeXml" with operation "create".
     */
    public void markNegativeChangeXmlCreate() throws JNCException {
        markLeafCreate("negativeChangeXml");
    }

    /**
     * Marks the leaf "negativeChangeXml" with operation "delete".
     */
    public void markNegativeChangeXmlDelete() throws JNCException {
        markLeafDelete("negativeChangeXml");
    }

    /* Access methods for optional leaf child: "changeType". */

    /**
     * Gets the value for child leaf "changeType".
     * @return The value of the leaf.
     */
    public YangUInt32 getChangeTypeValue() throws JNCException {
        return (YangUInt32)getValue("changeType");
    }

    /**
     * Sets the value for child leaf "changeType",
     * using instance of generated typedef class.
     * @param changeTypeValue The value to set.
     * @param changeTypeValue used during instantiation.
     */
    public void setChangeTypeValue(YangUInt32 changeTypeValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "changeType",
            changeTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "changeType",
     * using Java primitive values.
     * @param changeTypeValue used during instantiation.
     */
    public void setChangeTypeValue(long changeTypeValue) throws JNCException {
        setChangeTypeValue(new YangUInt32(changeTypeValue));
    }

    /**
     * Sets the value for child leaf "changeType",
     * using a String value.
     * @param changeTypeValue used during instantiation.
     */
    public void setChangeTypeValue(String changeTypeValue) throws JNCException {
        setChangeTypeValue(new YangUInt32(changeTypeValue));
    }

    /**
     * Unsets the value for child leaf "changeType".
     */
    public void unsetChangeTypeValue() throws JNCException {
        delete("changeType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "changeType" leaf will not have a value.
     */
    public void addChangeType() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "changeType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "changeType" with operation "replace".
     */
    public void markChangeTypeReplace() throws JNCException {
        markLeafReplace("changeType");
    }

    /**
     * Marks the leaf "changeType" with operation "merge".
     */
    public void markChangeTypeMerge() throws JNCException {
        markLeafMerge("changeType");
    }

    /**
     * Marks the leaf "changeType" with operation "create".
     */
    public void markChangeTypeCreate() throws JNCException {
        markLeafCreate("changeType");
    }

    /**
     * Marks the leaf "changeType" with operation "delete".
     */
    public void markChangeTypeDelete() throws JNCException {
        markLeafDelete("changeType");
    }

    /* Access methods for optional leaf child: "commitComment". */

    /**
     * Gets the value for child leaf "commitComment".
     * @return The value of the leaf.
     */
    public YangString getCommitCommentValue() throws JNCException {
        return (YangString)getValue("commitComment");
    }

    /**
     * Sets the value for child leaf "commitComment",
     * using instance of generated typedef class.
     * @param commitCommentValue The value to set.
     * @param commitCommentValue used during instantiation.
     */
    public void setCommitCommentValue(YangString commitCommentValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "commitComment",
            commitCommentValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "commitComment",
     * using a String value.
     * @param commitCommentValue used during instantiation.
     */
    public void setCommitCommentValue(String commitCommentValue)
            throws JNCException {
        setCommitCommentValue(new YangString(commitCommentValue));
    }

    /**
     * Unsets the value for child leaf "commitComment".
     */
    public void unsetCommitCommentValue() throws JNCException {
        delete("commitComment");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "commitComment" leaf will not have a value.
     */
    public void addCommitComment() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "commitComment",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "commitComment" with operation "replace".
     */
    public void markCommitCommentReplace() throws JNCException {
        markLeafReplace("commitComment");
    }

    /**
     * Marks the leaf "commitComment" with operation "merge".
     */
    public void markCommitCommentMerge() throws JNCException {
        markLeafMerge("commitComment");
    }

    /**
     * Marks the leaf "commitComment" with operation "create".
     */
    public void markCommitCommentCreate() throws JNCException {
        markLeafCreate("commitComment");
    }

    /**
     * Marks the leaf "commitComment" with operation "delete".
     */
    public void markCommitCommentDelete() throws JNCException {
        markLeafDelete("commitComment");
    }

    /* Access methods for optional leaf child: "appName". */

    /**
     * Gets the value for child leaf "appName".
     * @return The value of the leaf.
     */
    public YangString getAppNameValue() throws JNCException {
        return (YangString)getValue("appName");
    }

    /**
     * Sets the value for child leaf "appName",
     * using instance of generated typedef class.
     * @param appNameValue The value to set.
     * @param appNameValue used during instantiation.
     */
    public void setAppNameValue(YangString appNameValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "appName",
            appNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "appName",
     * using a String value.
     * @param appNameValue used during instantiation.
     */
    public void setAppNameValue(String appNameValue) throws JNCException {
        setAppNameValue(new YangString(appNameValue));
    }

    /**
     * Unsets the value for child leaf "appName".
     */
    public void unsetAppNameValue() throws JNCException {
        delete("appName");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "appName" leaf will not have a value.
     */
    public void addAppName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "appName",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "appName" with operation "replace".
     */
    public void markAppNameReplace() throws JNCException {
        markLeafReplace("appName");
    }

    /**
     * Marks the leaf "appName" with operation "merge".
     */
    public void markAppNameMerge() throws JNCException {
        markLeafMerge("appName");
    }

    /**
     * Marks the leaf "appName" with operation "create".
     */
    public void markAppNameCreate() throws JNCException {
        markLeafCreate("appName");
    }

    /**
     * Marks the leaf "appName" with operation "delete".
     */
    public void markAppNameDelete() throws JNCException {
        markLeafDelete("appName");
    }

    /* Access methods for optional leaf child: "crId". */

    /**
     * Gets the value for child leaf "crId".
     * @return The value of the leaf.
     */
    public YangUInt32 getCrIdValue() throws JNCException {
        return (YangUInt32)getValue("crId");
    }

    /**
     * Sets the value for child leaf "crId",
     * using instance of generated typedef class.
     * @param crIdValue The value to set.
     * @param crIdValue used during instantiation.
     */
    public void setCrIdValue(YangUInt32 crIdValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "crId",
            crIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "crId",
     * using Java primitive values.
     * @param crIdValue used during instantiation.
     */
    public void setCrIdValue(long crIdValue) throws JNCException {
        setCrIdValue(new YangUInt32(crIdValue));
    }

    /**
     * Sets the value for child leaf "crId",
     * using a String value.
     * @param crIdValue used during instantiation.
     */
    public void setCrIdValue(String crIdValue) throws JNCException {
        setCrIdValue(new YangUInt32(crIdValue));
    }

    /**
     * Unsets the value for child leaf "crId".
     */
    public void unsetCrIdValue() throws JNCException {
        delete("crId");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "crId" leaf will not have a value.
     */
    public void addCrId() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "crId",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "crId" with operation "replace".
     */
    public void markCrIdReplace() throws JNCException {
        markLeafReplace("crId");
    }

    /**
     * Marks the leaf "crId" with operation "merge".
     */
    public void markCrIdMerge() throws JNCException {
        markLeafMerge("crId");
    }

    /**
     * Marks the leaf "crId" with operation "create".
     */
    public void markCrIdCreate() throws JNCException {
        markLeafCreate("crId");
    }

    /**
     * Marks the leaf "crId" with operation "delete".
     */
    public void markCrIdDelete() throws JNCException {
        markLeafDelete("crId");
    }

    /* Access methods for optional leaf child: "processingComments". */

    /**
     * Gets the value for child leaf "processingComments".
     * @return The value of the leaf.
     */
    public YangString getProcessingCommentsValue() throws JNCException {
        return (YangString)getValue("processingComments");
    }

    /**
     * Sets the value for child leaf "processingComments",
     * using instance of generated typedef class.
     * @param processingCommentsValue The value to set.
     * @param processingCommentsValue used during instantiation.
     */
    public void setProcessingCommentsValue(YangString processingCommentsValue)
            throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "processingComments",
            processingCommentsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "processingComments",
     * using a String value.
     * @param processingCommentsValue used during instantiation.
     */
    public void setProcessingCommentsValue(String processingCommentsValue)
            throws JNCException {
        setProcessingCommentsValue(new YangString(processingCommentsValue));
    }

    /**
     * Unsets the value for child leaf "processingComments".
     */
    public void unsetProcessingCommentsValue() throws JNCException {
        delete("processingComments");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "processingComments" leaf will not have a value.
     */
    public void addProcessingComments() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "processingComments",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "processingComments" with operation "replace".
     */
    public void markProcessingCommentsReplace() throws JNCException {
        markLeafReplace("processingComments");
    }

    /**
     * Marks the leaf "processingComments" with operation "merge".
     */
    public void markProcessingCommentsMerge() throws JNCException {
        markLeafMerge("processingComments");
    }

    /**
     * Marks the leaf "processingComments" with operation "create".
     */
    public void markProcessingCommentsCreate() throws JNCException {
        markLeafCreate("processingComments");
    }

    /**
     * Marks the leaf "processingComments" with operation "delete".
     */
    public void markProcessingCommentsDelete() throws JNCException {
        markLeafDelete("processingComments");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof IdPerms) idPerms = (IdPerms)child;
    }

}
