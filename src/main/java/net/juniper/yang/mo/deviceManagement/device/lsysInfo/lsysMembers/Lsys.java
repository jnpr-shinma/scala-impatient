/* 
 * @(#)Lsys.java        1.0 19/01/15
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "device-management", revision: "2014-07-26".
 */

package net.juniper.yang.mo.deviceManagement.device.lsysInfo.lsysMembers;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

import net.juniper.yang.mo.deviceManagement.DeviceIdRef;
import net.juniper.yang.mo.deviceManagement.Devicemgt;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/device-management/1.0
 * generated to "/home/maxin/space/js-ems/server/target/scala-2.11/src_managed/main/net/juniper/yang/mo/deviceManagement/device/lsysInfo/lsysMembers/lsys"
 * <p>
 * See line 301 in
 * /home/maxin/space/js-ems/server/src/main/resources/yang/device-management.yang
 *
 * @version 1.0 2015-01-19
 * @author Auto Generated
 */
public class Lsys extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath TAG_PATH = new Tagpath("device/lsysInfo/lsysMembers/lsys");

    static {
        Devicemgt.enable();
    }

    /**
     * Constructor for an empty Lsys object.
     */
    public Lsys() {
        super(Devicemgt.NAMESPACE, "lsys");
    }

    /**
     * Constructor for an initialized Lsys object,
     * 
     * @param uuidValue Key argument of child.
     */
    public Lsys(DeviceIdRef uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "lsys");
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(uuidValue);
        insertChild(uuid, childrenNames());
    }

    /**
     * Constructor for an initialized Lsys object,
     * with String keys.
     * @param uuidValue Key argument of child.
     */
    public Lsys(String uuidValue) throws JNCException {
        super(Devicemgt.NAMESPACE, "lsys");
        Leaf uuid = new Leaf(Devicemgt.NAMESPACE, "uuid");
        uuid.setValue(new net.juniper.yang.mo.deviceManagement.DeviceIdRef(uuidValue));
        insertChild(uuid, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Lsys clone() {
        Lsys copy;
        try {
            copy = new Lsys(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Lsys)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Lsys cloneShallow() {
        Lsys copy;
        try {
            copy = new Lsys(getUuidValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Lsys)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "uuid",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "uuid",
            "name",
        };
    }

    /* Access methods for leaf child: "uuid". */

    /**
     * Gets the value for child leaf "uuid".
     * @return The value of the leaf.
     */
    public DeviceIdRef getUuidValue() throws JNCException {
        return (DeviceIdRef)getValue("uuid");
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a JNC type value.
     * @param uuidValue The value to set.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(DeviceIdRef uuidValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "uuid",
            uuidValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "uuid",
     * using a String value.
     * @param uuidValue used during instantiation.
     */
    public void setUuidValue(String uuidValue) throws JNCException {
        setUuidValue(new DeviceIdRef(uuidValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "uuid" leaf will not have a value.
     */
    public void addUuid() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "uuid",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Devicemgt.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
