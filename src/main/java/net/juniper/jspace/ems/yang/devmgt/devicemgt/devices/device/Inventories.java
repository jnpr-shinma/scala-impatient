/* 
 * @(#)Inventories.java        1.0 30/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "devmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.devmgt.Devmgt;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.inventories.Inventory;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/test/1.0
 * generated to "src/net/juniper/jspace/ems/yang/devmgt/devicemgt/devices/device/inventories"
 * <p>
 * See line 114 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/devmgt.yang
 *
 * @version 1.0 2014-12-30
 * @author Auto Generated
 */
public class Inventories extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("devmgt/devicemgt/devices/device/inventories");

    static {
        Devmgt.enable();
    }

    /**
     * Constructor for an empty Inventories object.
     */
    public Inventories() {
        super(Devmgt.NAMESPACE, "inventories");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Inventories clone() {
        return (Inventories)cloneContent(new Inventories());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Inventories cloneShallow() {
        return (Inventories)cloneShallowContent(new Inventories());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "size",
            "inventory",
        };
    }

    /* Access methods for optional leaf child: "size". */

    /**
     * Gets the value for child leaf "size".
     * @return The value of the leaf.
     */
    public YangUInt32 getSizeValue() throws JNCException {
        return (YangUInt32)getValue("size");
    }

    /**
     * Sets the value for child leaf "size",
     * using instance of generated typedef class.
     * @param sizeValue The value to set.
     * @param sizeValue used during instantiation.
     */
    public void setSizeValue(YangUInt32 sizeValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "size",
            sizeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "size",
     * using Java primitive values.
     * @param sizeValue used during instantiation.
     */
    public void setSizeValue(long sizeValue) throws JNCException {
        setSizeValue(new YangUInt32(sizeValue));
    }

    /**
     * Sets the value for child leaf "size",
     * using a String value.
     * @param sizeValue used during instantiation.
     */
    public void setSizeValue(String sizeValue) throws JNCException {
        setSizeValue(new YangUInt32(sizeValue));
    }

    /**
     * Unsets the value for child leaf "size".
     */
    public void unsetSizeValue() throws JNCException {
        delete("size");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "size" leaf will not have a value.
     */
    public void addSize() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "size",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "size" with operation "replace".
     */
    public void markSizeReplace() throws JNCException {
        markLeafReplace("size");
    }

    /**
     * Marks the leaf "size" with operation "merge".
     */
    public void markSizeMerge() throws JNCException {
        markLeafMerge("size");
    }

    /**
     * Marks the leaf "size" with operation "create".
     */
    public void markSizeCreate() throws JNCException {
        markLeafCreate("size");
    }

    /**
     * Marks the leaf "size" with operation "delete".
     */
    public void markSizeDelete() throws JNCException {
        markLeafDelete("size");
    }

    /* Access methods for list child: "inventory". */

    /**
     * Gets list entry "inventory", with specified keys.
     * @param idValue Key argument of child.
     */
    public Inventory getInventory(YangUInt32 idValue) throws JNCException {
        String path = "inventory[id='" + idValue + "']";
        return (Inventory)searchOne(path);
    }

    /**
     * Gets list entry "inventory", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public Inventory getInventory(String idValue) throws JNCException {
        String path = "inventory[id='" + idValue + "']";
        return (Inventory)searchOne(path);
    }

    /**
     * Iterator method for the list "inventory".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator inventoryIterator() {
        return new ElementChildrenIterator(children, "inventory");
    }

    /**
     * Adds list entry "inventory", using an existing object.
     * @param inventory The object to add.
     * @return The added child.
     */
    public Inventory addInventory(Inventory inventory) throws JNCException {
        insertChild(inventory, childrenNames());
        return inventory;
    }

    /**
     * Adds list entry "inventory", with specified keys.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public Inventory addInventory(YangUInt32 idValue) throws JNCException {
        Inventory inventory = new Inventory(idValue);
        return addInventory(inventory);
    }

    /**
     * Adds list entry "inventory", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public Inventory addInventory(String idValue) throws JNCException {
        Inventory inventory = new Inventory(idValue);
        return addInventory(inventory);
    }

    /**
     * Adds list entry "inventory".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Inventory addInventory() throws JNCException {
        Inventory inventory = new Inventory();
        insertChild(inventory, childrenNames());
        return inventory;
    }

    /**
     * Deletes list entry "inventory", with specified keys.
     * @param idValue Key argument of child.
     */
    public void deleteInventory(YangUInt32 idValue) throws JNCException {
        String path = "inventory[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "inventory", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public void deleteInventory(String idValue) throws JNCException {
        String path = "inventory[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
