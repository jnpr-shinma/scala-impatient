/* 
 * @(#)LogicalInterface.java        1.0 30/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "devmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.interfaces.interface_.logicalInterfaces;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.devmgt.Devmgt;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/test/1.0
 * generated to "src/net/juniper/jspace/ems/yang/devmgt/devicemgt/devices/device/interfaces/interface_/logicalInterfaces/logicalInterface"
 * <p>
 * See line 101 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/devmgt.yang
 *
 * @version 1.0 2014-12-30
 * @author Auto Generated
 */
public class LogicalInterface extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("devmgt/devicemgt/devices/device/interfaces/interface_/logicalInterfaces/logicalInterface");

    static {
        Devmgt.enable();
    }

    /**
     * Constructor for an empty LogicalInterface object.
     */
    public LogicalInterface() {
        super(Devmgt.NAMESPACE, "logicalInterface");
    }

    /**
     * Constructor for an initialized LogicalInterface object,
     * 
     * @param nameValue Key argument of child.
     */
    public LogicalInterface(YangString nameValue) throws JNCException {
        super(Devmgt.NAMESPACE, "logicalInterface");
        Leaf name = new Leaf(Devmgt.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized LogicalInterface object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public LogicalInterface(String nameValue) throws JNCException {
        super(Devmgt.NAMESPACE, "logicalInterface");
        Leaf name = new Leaf(Devmgt.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LogicalInterface clone() {
        LogicalInterface copy;
        try {
            copy = new LogicalInterface(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LogicalInterface)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LogicalInterface cloneShallow() {
        LogicalInterface copy;
        try {
            copy = new LogicalInterface(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (LogicalInterface)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "id",
            "ip",
            "desc",
            "encaptulation",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public YangUInt32 getIdValue() throws JNCException {
        return (YangUInt32)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(YangUInt32 idValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using Java primitive values.
     * @param idValue used during instantiation.
     */
    public void setIdValue(long idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * Unsets the value for child leaf "id".
     */
    public void unsetIdValue() throws JNCException {
        delete("id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "id" with operation "replace".
     */
    public void markIdReplace() throws JNCException {
        markLeafReplace("id");
    }

    /**
     * Marks the leaf "id" with operation "merge".
     */
    public void markIdMerge() throws JNCException {
        markLeafMerge("id");
    }

    /**
     * Marks the leaf "id" with operation "create".
     */
    public void markIdCreate() throws JNCException {
        markLeafCreate("id");
    }

    /**
     * Marks the leaf "id" with operation "delete".
     */
    public void markIdDelete() throws JNCException {
        markLeafDelete("id");
    }

    /* Access methods for optional leaf child: "ip". */

    /**
     * Gets the value for child leaf "ip".
     * @return The value of the leaf.
     */
    public YangString getIpValue() throws JNCException {
        return (YangString)getValue("ip");
    }

    /**
     * Sets the value for child leaf "ip",
     * using instance of generated typedef class.
     * @param ipValue The value to set.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(YangString ipValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "ip",
            ipValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip",
     * using a String value.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(String ipValue) throws JNCException {
        setIpValue(new YangString(ipValue));
    }

    /**
     * Unsets the value for child leaf "ip".
     */
    public void unsetIpValue() throws JNCException {
        delete("ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip" leaf will not have a value.
     */
    public void addIp() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip" with operation "replace".
     */
    public void markIpReplace() throws JNCException {
        markLeafReplace("ip");
    }

    /**
     * Marks the leaf "ip" with operation "merge".
     */
    public void markIpMerge() throws JNCException {
        markLeafMerge("ip");
    }

    /**
     * Marks the leaf "ip" with operation "create".
     */
    public void markIpCreate() throws JNCException {
        markLeafCreate("ip");
    }

    /**
     * Marks the leaf "ip" with operation "delete".
     */
    public void markIpDelete() throws JNCException {
        markLeafDelete("ip");
    }

    /* Access methods for optional leaf child: "desc". */

    /**
     * Gets the value for child leaf "desc".
     * @return The value of the leaf.
     */
    public YangString getDescValue() throws JNCException {
        return (YangString)getValue("desc");
    }

    /**
     * Sets the value for child leaf "desc",
     * using instance of generated typedef class.
     * @param descValue The value to set.
     * @param descValue used during instantiation.
     */
    public void setDescValue(YangString descValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "desc",
            descValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "desc",
     * using a String value.
     * @param descValue used during instantiation.
     */
    public void setDescValue(String descValue) throws JNCException {
        setDescValue(new YangString(descValue));
    }

    /**
     * Unsets the value for child leaf "desc".
     */
    public void unsetDescValue() throws JNCException {
        delete("desc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "desc" leaf will not have a value.
     */
    public void addDesc() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "desc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "desc" with operation "replace".
     */
    public void markDescReplace() throws JNCException {
        markLeafReplace("desc");
    }

    /**
     * Marks the leaf "desc" with operation "merge".
     */
    public void markDescMerge() throws JNCException {
        markLeafMerge("desc");
    }

    /**
     * Marks the leaf "desc" with operation "create".
     */
    public void markDescCreate() throws JNCException {
        markLeafCreate("desc");
    }

    /**
     * Marks the leaf "desc" with operation "delete".
     */
    public void markDescDelete() throws JNCException {
        markLeafDelete("desc");
    }

    /* Access methods for optional leaf child: "encaptulation". */

    /**
     * Gets the value for child leaf "encaptulation".
     * @return The value of the leaf.
     */
    public YangString getEncaptulationValue() throws JNCException {
        return (YangString)getValue("encaptulation");
    }

    /**
     * Sets the value for child leaf "encaptulation",
     * using instance of generated typedef class.
     * @param encaptulationValue The value to set.
     * @param encaptulationValue used during instantiation.
     */
    public void setEncaptulationValue(YangString encaptulationValue)
            throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "encaptulation",
            encaptulationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "encaptulation",
     * using a String value.
     * @param encaptulationValue used during instantiation.
     */
    public void setEncaptulationValue(String encaptulationValue)
            throws JNCException {
        setEncaptulationValue(new YangString(encaptulationValue));
    }

    /**
     * Unsets the value for child leaf "encaptulation".
     */
    public void unsetEncaptulationValue() throws JNCException {
        delete("encaptulation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "encaptulation" leaf will not have a value.
     */
    public void addEncaptulation() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "encaptulation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "encaptulation" with operation "replace".
     */
    public void markEncaptulationReplace() throws JNCException {
        markLeafReplace("encaptulation");
    }

    /**
     * Marks the leaf "encaptulation" with operation "merge".
     */
    public void markEncaptulationMerge() throws JNCException {
        markLeafMerge("encaptulation");
    }

    /**
     * Marks the leaf "encaptulation" with operation "create".
     */
    public void markEncaptulationCreate() throws JNCException {
        markLeafCreate("encaptulation");
    }

    /**
     * Marks the leaf "encaptulation" with operation "delete".
     */
    public void markEncaptulationDelete() throws JNCException {
        markLeafDelete("encaptulation");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
