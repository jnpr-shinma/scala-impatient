/* 
 * @(#)Users.java        1.0 26/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "usermgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.usermgt;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.usermgt.Usermgt;
import net.juniper.jspace.ems.yang.usermgt.users.User;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/usermgt/1.0
 * generated to "src/net/juniper/jspace/ems/yang/usermgt/users"
 * <p>
 * See line 16 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/usermgt.yang
 *
 * @version 1.0 2014-12-26
 * @author Auto Generated
 */
public class Users extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("usermgt/users");

    static {
        Usermgt.enable();
    }

    /**
     * Constructor for an empty Users object.
     */
    public Users() {
        super(Usermgt.NAMESPACE, "users");
        setDefaultPrefix();
        setPrefix(Usermgt.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Users clone() {
        return (Users)cloneContent(new Users());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Users cloneShallow() {
        return (Users)cloneShallowContent(new Users());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "user",
        };
    }

    /* Access methods for list child: "user". */

    /**
     * Gets list entry "user", with specified keys.
     * @param idValue Key argument of child.
     */
    public User getUser(YangUInt32 idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        return (User)searchOne(path);
    }

    /**
     * Gets list entry "user", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public User getUser(String idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        return (User)searchOne(path);
    }

    /**
     * Iterator method for the list "user".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator userIterator() {
        return new ElementChildrenIterator(children, "user");
    }

    /**
     * Adds list entry "user", using an existing object.
     * @param user The object to add.
     * @return The added child.
     */
    public User addUser(User user) throws JNCException {
        insertChild(user, childrenNames());
        return user;
    }

    /**
     * Adds list entry "user", with specified keys.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public User addUser(YangUInt32 idValue) throws JNCException {
        User user = new User(idValue);
        return addUser(user);
    }

    /**
     * Adds list entry "user", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public User addUser(String idValue) throws JNCException {
        User user = new User(idValue);
        return addUser(user);
    }

    /**
     * Adds list entry "user".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public User addUser() throws JNCException {
        User user = new User();
        insertChild(user, childrenNames());
        return user;
    }

    /**
     * Deletes list entry "user", with specified keys.
     * @param idValue Key argument of child.
     */
    public void deleteUser(YangUInt32 idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "user", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public void deleteUser(String idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
