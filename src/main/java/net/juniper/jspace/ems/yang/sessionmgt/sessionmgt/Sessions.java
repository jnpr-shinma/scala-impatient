/* 
 * @(#)Sessions.java        1.0 24/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "sessionmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.sessionmgt.sessionmgt;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

import net.juniper.jspace.ems.yang.sessionmgt.Sesmgt;
import net.juniper.jspace.ems.yang.sessionmgt.sessionmgt.sessions.Session;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/sesmgt/1.0
 * generated to "src/net/juniper/jspace/ems/yang/sessionmgt/sessionmgt/sessions"
 * <p>
 * See line 17 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/sessionmgt.yang
 *
 * @version 1.0 2014-12-24
 * @author Auto Generated
 */
public class Sessions extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Sessions object.
     */
    public Sessions() {
        super(Sesmgt.NAMESPACE, "sessions");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Sessions clone() {
        return (Sessions)cloneContent(new Sessions());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Sessions cloneShallow() {
        return (Sessions)cloneShallowContent(new Sessions());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "session",
        };
    }

    /* Access methods for list child: "session". */

    /**
     * Gets list entry "session", with specified keys.
     * @param ssoIdValue Key argument of child.
     */
    public Session getSession(YangString ssoIdValue) throws JNCException {
        String path = "session[ssoId='" + ssoIdValue + "']";
        return (Session)searchOne(path);
    }

    /**
     * Gets list entry "session", with specified keys.
     * The keys are specified as strings.
     * @param ssoIdValue Key argument of child.
     */
    public Session getSession(String ssoIdValue) throws JNCException {
        String path = "session[ssoId='" + ssoIdValue + "']";
        return (Session)searchOne(path);
    }

    /**
     * Iterator method for the list "session".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator sessionIterator() {
        return new ElementChildrenIterator(children, "session");
    }

    /**
     * Adds list entry "session", using an existing object.
     * @param session The object to add.
     * @return The added child.
     */
    public Session addSession(Session session) throws JNCException {
        insertChild(session, childrenNames());
        return session;
    }

    /**
     * Adds list entry "session", with specified keys.
     * @param ssoIdValue Key argument of child.
     * @return The added child.
     */
    public Session addSession(YangString ssoIdValue) throws JNCException {
        Session session = new Session(ssoIdValue);
        return addSession(session);
    }

    /**
     * Adds list entry "session", with specified keys.
     * The keys are specified as strings.
     * @param ssoIdValue Key argument of child.
     * @return The added child.
     */
    public Session addSession(String ssoIdValue) throws JNCException {
        Session session = new Session(ssoIdValue);
        return addSession(session);
    }

    /**
     * Adds list entry "session".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Session addSession() throws JNCException {
        Session session = new Session();
        insertChild(session, childrenNames());
        return session;
    }

    /**
     * Deletes list entry "session", with specified keys.
     * @param ssoIdValue Key argument of child.
     */
    public void deleteSession(YangString ssoIdValue) throws JNCException {
        String path = "session[ssoId='" + ssoIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "session", with specified keys.
     * The keys are specified as strings.
     * @param ssoIdValue Key argument of child.
     */
    public void deleteSession(String ssoIdValue) throws JNCException {
        String path = "session[ssoId='" + ssoIdValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
