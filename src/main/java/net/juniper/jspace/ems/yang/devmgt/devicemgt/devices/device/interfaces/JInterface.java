/* 
 * @(#)JInterface.java        1.0 30/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "devmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.interfaces;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.devmgt.Devmgt;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.interfaces.interface_.LogicalInterfaces;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/test/1.0
 * generated to "src/net/juniper/jspace/ems/yang/devmgt/devicemgt/devices/device/interfaces/interface"
 * <p>
 * See line 78 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/devmgt.yang
 *
 * @version 1.0 2014-12-30
 * @author Auto Generated
 */
public class JInterface extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("devmgt/devicemgt/devices/device/interfaces/interface");

    static {
        Devmgt.enable();
    }

    /**
     * Field for child container "logicalInterfaces".
     */
    public LogicalInterfaces logicalInterfaces = null;

    /**
     * Constructor for an empty JInterface object.
     */
    public JInterface() {
        super(Devmgt.NAMESPACE, "interface");
    }

    /**
     * Constructor for an initialized JInterface object,
     * 
     * @param nameValue Key argument of child.
     */
    public JInterface(YangString nameValue) throws JNCException {
        super(Devmgt.NAMESPACE, "interface");
        Leaf name = new Leaf(Devmgt.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized JInterface object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public JInterface(String nameValue) throws JNCException {
        super(Devmgt.NAMESPACE, "interface");
        Leaf name = new Leaf(Devmgt.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public JInterface clone() {
        JInterface copy;
        try {
            copy = new JInterface(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (JInterface)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public JInterface cloneShallow() {
        JInterface copy;
        try {
            copy = new JInterface(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (JInterface)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "id",
            "desc",
            "operationStatus",
            "ip",
            "adminStatus",
            "interfaceIndex",
            "linkLevelType",
            "linkType",
            "speed",
            "speedStr",
            "mtu",
            "mtuStr",
            "physAddr",
            "logicalInterfaces",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public YangUInt32 getIdValue() throws JNCException {
        return (YangUInt32)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(YangUInt32 idValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using Java primitive values.
     * @param idValue used during instantiation.
     */
    public void setIdValue(long idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * Unsets the value for child leaf "id".
     */
    public void unsetIdValue() throws JNCException {
        delete("id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "id" with operation "replace".
     */
    public void markIdReplace() throws JNCException {
        markLeafReplace("id");
    }

    /**
     * Marks the leaf "id" with operation "merge".
     */
    public void markIdMerge() throws JNCException {
        markLeafMerge("id");
    }

    /**
     * Marks the leaf "id" with operation "create".
     */
    public void markIdCreate() throws JNCException {
        markLeafCreate("id");
    }

    /**
     * Marks the leaf "id" with operation "delete".
     */
    public void markIdDelete() throws JNCException {
        markLeafDelete("id");
    }

    /* Access methods for optional leaf child: "desc". */

    /**
     * Gets the value for child leaf "desc".
     * @return The value of the leaf.
     */
    public YangString getDescValue() throws JNCException {
        return (YangString)getValue("desc");
    }

    /**
     * Sets the value for child leaf "desc",
     * using instance of generated typedef class.
     * @param descValue The value to set.
     * @param descValue used during instantiation.
     */
    public void setDescValue(YangString descValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "desc",
            descValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "desc",
     * using a String value.
     * @param descValue used during instantiation.
     */
    public void setDescValue(String descValue) throws JNCException {
        setDescValue(new YangString(descValue));
    }

    /**
     * Unsets the value for child leaf "desc".
     */
    public void unsetDescValue() throws JNCException {
        delete("desc");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "desc" leaf will not have a value.
     */
    public void addDesc() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "desc",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "desc" with operation "replace".
     */
    public void markDescReplace() throws JNCException {
        markLeafReplace("desc");
    }

    /**
     * Marks the leaf "desc" with operation "merge".
     */
    public void markDescMerge() throws JNCException {
        markLeafMerge("desc");
    }

    /**
     * Marks the leaf "desc" with operation "create".
     */
    public void markDescCreate() throws JNCException {
        markLeafCreate("desc");
    }

    /**
     * Marks the leaf "desc" with operation "delete".
     */
    public void markDescDelete() throws JNCException {
        markLeafDelete("desc");
    }

    /* Access methods for optional leaf child: "operationStatus". */

    /**
     * Gets the value for child leaf "operationStatus".
     * @return The value of the leaf.
     */
    public YangString getOperationStatusValue() throws JNCException {
        return (YangString)getValue("operationStatus");
    }

    /**
     * Sets the value for child leaf "operationStatus",
     * using instance of generated typedef class.
     * @param operationStatusValue The value to set.
     * @param operationStatusValue used during instantiation.
     */
    public void setOperationStatusValue(YangString operationStatusValue)
            throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "operationStatus",
            operationStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "operationStatus",
     * using a String value.
     * @param operationStatusValue used during instantiation.
     */
    public void setOperationStatusValue(String operationStatusValue)
            throws JNCException {
        setOperationStatusValue(new YangString(operationStatusValue));
    }

    /**
     * Unsets the value for child leaf "operationStatus".
     */
    public void unsetOperationStatusValue() throws JNCException {
        delete("operationStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "operationStatus" leaf will not have a value.
     */
    public void addOperationStatus() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "operationStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "operationStatus" with operation "replace".
     */
    public void markOperationStatusReplace() throws JNCException {
        markLeafReplace("operationStatus");
    }

    /**
     * Marks the leaf "operationStatus" with operation "merge".
     */
    public void markOperationStatusMerge() throws JNCException {
        markLeafMerge("operationStatus");
    }

    /**
     * Marks the leaf "operationStatus" with operation "create".
     */
    public void markOperationStatusCreate() throws JNCException {
        markLeafCreate("operationStatus");
    }

    /**
     * Marks the leaf "operationStatus" with operation "delete".
     */
    public void markOperationStatusDelete() throws JNCException {
        markLeafDelete("operationStatus");
    }

    /* Access methods for optional leaf child: "ip". */

    /**
     * Gets the value for child leaf "ip".
     * @return The value of the leaf.
     */
    public YangString getIpValue() throws JNCException {
        return (YangString)getValue("ip");
    }

    /**
     * Sets the value for child leaf "ip",
     * using instance of generated typedef class.
     * @param ipValue The value to set.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(YangString ipValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "ip",
            ipValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ip",
     * using a String value.
     * @param ipValue used during instantiation.
     */
    public void setIpValue(String ipValue) throws JNCException {
        setIpValue(new YangString(ipValue));
    }

    /**
     * Unsets the value for child leaf "ip".
     */
    public void unsetIpValue() throws JNCException {
        delete("ip");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ip" leaf will not have a value.
     */
    public void addIp() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "ip",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ip" with operation "replace".
     */
    public void markIpReplace() throws JNCException {
        markLeafReplace("ip");
    }

    /**
     * Marks the leaf "ip" with operation "merge".
     */
    public void markIpMerge() throws JNCException {
        markLeafMerge("ip");
    }

    /**
     * Marks the leaf "ip" with operation "create".
     */
    public void markIpCreate() throws JNCException {
        markLeafCreate("ip");
    }

    /**
     * Marks the leaf "ip" with operation "delete".
     */
    public void markIpDelete() throws JNCException {
        markLeafDelete("ip");
    }

    /* Access methods for optional leaf child: "adminStatus". */

    /**
     * Gets the value for child leaf "adminStatus".
     * @return The value of the leaf.
     */
    public YangString getAdminStatusValue() throws JNCException {
        return (YangString)getValue("adminStatus");
    }

    /**
     * Sets the value for child leaf "adminStatus",
     * using instance of generated typedef class.
     * @param adminStatusValue The value to set.
     * @param adminStatusValue used during instantiation.
     */
    public void setAdminStatusValue(YangString adminStatusValue)
            throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "adminStatus",
            adminStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "adminStatus",
     * using a String value.
     * @param adminStatusValue used during instantiation.
     */
    public void setAdminStatusValue(String adminStatusValue)
            throws JNCException {
        setAdminStatusValue(new YangString(adminStatusValue));
    }

    /**
     * Unsets the value for child leaf "adminStatus".
     */
    public void unsetAdminStatusValue() throws JNCException {
        delete("adminStatus");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "adminStatus" leaf will not have a value.
     */
    public void addAdminStatus() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "adminStatus",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "adminStatus" with operation "replace".
     */
    public void markAdminStatusReplace() throws JNCException {
        markLeafReplace("adminStatus");
    }

    /**
     * Marks the leaf "adminStatus" with operation "merge".
     */
    public void markAdminStatusMerge() throws JNCException {
        markLeafMerge("adminStatus");
    }

    /**
     * Marks the leaf "adminStatus" with operation "create".
     */
    public void markAdminStatusCreate() throws JNCException {
        markLeafCreate("adminStatus");
    }

    /**
     * Marks the leaf "adminStatus" with operation "delete".
     */
    public void markAdminStatusDelete() throws JNCException {
        markLeafDelete("adminStatus");
    }

    /* Access methods for optional leaf child: "interfaceIndex". */

    /**
     * Gets the value for child leaf "interfaceIndex".
     * @return The value of the leaf.
     */
    public YangUInt32 getInterfaceIndexValue() throws JNCException {
        return (YangUInt32)getValue("interfaceIndex");
    }

    /**
     * Sets the value for child leaf "interfaceIndex",
     * using instance of generated typedef class.
     * @param interfaceIndexValue The value to set.
     * @param interfaceIndexValue used during instantiation.
     */
    public void setInterfaceIndexValue(YangUInt32 interfaceIndexValue)
            throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "interfaceIndex",
            interfaceIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "interfaceIndex",
     * using Java primitive values.
     * @param interfaceIndexValue used during instantiation.
     */
    public void setInterfaceIndexValue(long interfaceIndexValue)
            throws JNCException {
        setInterfaceIndexValue(new YangUInt32(interfaceIndexValue));
    }

    /**
     * Sets the value for child leaf "interfaceIndex",
     * using a String value.
     * @param interfaceIndexValue used during instantiation.
     */
    public void setInterfaceIndexValue(String interfaceIndexValue)
            throws JNCException {
        setInterfaceIndexValue(new YangUInt32(interfaceIndexValue));
    }

    /**
     * Unsets the value for child leaf "interfaceIndex".
     */
    public void unsetInterfaceIndexValue() throws JNCException {
        delete("interfaceIndex");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "interfaceIndex" leaf will not have a value.
     */
    public void addInterfaceIndex() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "interfaceIndex",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "replace".
     */
    public void markInterfaceIndexReplace() throws JNCException {
        markLeafReplace("interfaceIndex");
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "merge".
     */
    public void markInterfaceIndexMerge() throws JNCException {
        markLeafMerge("interfaceIndex");
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "create".
     */
    public void markInterfaceIndexCreate() throws JNCException {
        markLeafCreate("interfaceIndex");
    }

    /**
     * Marks the leaf "interfaceIndex" with operation "delete".
     */
    public void markInterfaceIndexDelete() throws JNCException {
        markLeafDelete("interfaceIndex");
    }

    /* Access methods for optional leaf child: "linkLevelType". */

    /**
     * Gets the value for child leaf "linkLevelType".
     * @return The value of the leaf.
     */
    public YangString getLinkLevelTypeValue() throws JNCException {
        return (YangString)getValue("linkLevelType");
    }

    /**
     * Sets the value for child leaf "linkLevelType",
     * using instance of generated typedef class.
     * @param linkLevelTypeValue The value to set.
     * @param linkLevelTypeValue used during instantiation.
     */
    public void setLinkLevelTypeValue(YangString linkLevelTypeValue)
            throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "linkLevelType",
            linkLevelTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "linkLevelType",
     * using a String value.
     * @param linkLevelTypeValue used during instantiation.
     */
    public void setLinkLevelTypeValue(String linkLevelTypeValue)
            throws JNCException {
        setLinkLevelTypeValue(new YangString(linkLevelTypeValue));
    }

    /**
     * Unsets the value for child leaf "linkLevelType".
     */
    public void unsetLinkLevelTypeValue() throws JNCException {
        delete("linkLevelType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "linkLevelType" leaf will not have a value.
     */
    public void addLinkLevelType() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "linkLevelType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "linkLevelType" with operation "replace".
     */
    public void markLinkLevelTypeReplace() throws JNCException {
        markLeafReplace("linkLevelType");
    }

    /**
     * Marks the leaf "linkLevelType" with operation "merge".
     */
    public void markLinkLevelTypeMerge() throws JNCException {
        markLeafMerge("linkLevelType");
    }

    /**
     * Marks the leaf "linkLevelType" with operation "create".
     */
    public void markLinkLevelTypeCreate() throws JNCException {
        markLeafCreate("linkLevelType");
    }

    /**
     * Marks the leaf "linkLevelType" with operation "delete".
     */
    public void markLinkLevelTypeDelete() throws JNCException {
        markLeafDelete("linkLevelType");
    }

    /* Access methods for optional leaf child: "linkType". */

    /**
     * Gets the value for child leaf "linkType".
     * @return The value of the leaf.
     */
    public YangString getLinkTypeValue() throws JNCException {
        return (YangString)getValue("linkType");
    }

    /**
     * Sets the value for child leaf "linkType",
     * using instance of generated typedef class.
     * @param linkTypeValue The value to set.
     * @param linkTypeValue used during instantiation.
     */
    public void setLinkTypeValue(YangString linkTypeValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "linkType",
            linkTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "linkType",
     * using a String value.
     * @param linkTypeValue used during instantiation.
     */
    public void setLinkTypeValue(String linkTypeValue) throws JNCException {
        setLinkTypeValue(new YangString(linkTypeValue));
    }

    /**
     * Unsets the value for child leaf "linkType".
     */
    public void unsetLinkTypeValue() throws JNCException {
        delete("linkType");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "linkType" leaf will not have a value.
     */
    public void addLinkType() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "linkType",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "linkType" with operation "replace".
     */
    public void markLinkTypeReplace() throws JNCException {
        markLeafReplace("linkType");
    }

    /**
     * Marks the leaf "linkType" with operation "merge".
     */
    public void markLinkTypeMerge() throws JNCException {
        markLeafMerge("linkType");
    }

    /**
     * Marks the leaf "linkType" with operation "create".
     */
    public void markLinkTypeCreate() throws JNCException {
        markLeafCreate("linkType");
    }

    /**
     * Marks the leaf "linkType" with operation "delete".
     */
    public void markLinkTypeDelete() throws JNCException {
        markLeafDelete("linkType");
    }

    /* Access methods for optional leaf child: "speed". */

    /**
     * Gets the value for child leaf "speed".
     * @return The value of the leaf.
     */
    public YangUInt32 getSpeedValue() throws JNCException {
        return (YangUInt32)getValue("speed");
    }

    /**
     * Sets the value for child leaf "speed",
     * using instance of generated typedef class.
     * @param speedValue The value to set.
     * @param speedValue used during instantiation.
     */
    public void setSpeedValue(YangUInt32 speedValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "speed",
            speedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "speed",
     * using Java primitive values.
     * @param speedValue used during instantiation.
     */
    public void setSpeedValue(long speedValue) throws JNCException {
        setSpeedValue(new YangUInt32(speedValue));
    }

    /**
     * Sets the value for child leaf "speed",
     * using a String value.
     * @param speedValue used during instantiation.
     */
    public void setSpeedValue(String speedValue) throws JNCException {
        setSpeedValue(new YangUInt32(speedValue));
    }

    /**
     * Unsets the value for child leaf "speed".
     */
    public void unsetSpeedValue() throws JNCException {
        delete("speed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "speed" leaf will not have a value.
     */
    public void addSpeed() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "speed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "speed" with operation "replace".
     */
    public void markSpeedReplace() throws JNCException {
        markLeafReplace("speed");
    }

    /**
     * Marks the leaf "speed" with operation "merge".
     */
    public void markSpeedMerge() throws JNCException {
        markLeafMerge("speed");
    }

    /**
     * Marks the leaf "speed" with operation "create".
     */
    public void markSpeedCreate() throws JNCException {
        markLeafCreate("speed");
    }

    /**
     * Marks the leaf "speed" with operation "delete".
     */
    public void markSpeedDelete() throws JNCException {
        markLeafDelete("speed");
    }

    /* Access methods for optional leaf child: "speedStr". */

    /**
     * Gets the value for child leaf "speedStr".
     * @return The value of the leaf.
     */
    public YangString getSpeedStrValue() throws JNCException {
        return (YangString)getValue("speedStr");
    }

    /**
     * Sets the value for child leaf "speedStr",
     * using instance of generated typedef class.
     * @param speedStrValue The value to set.
     * @param speedStrValue used during instantiation.
     */
    public void setSpeedStrValue(YangString speedStrValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "speedStr",
            speedStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "speedStr",
     * using a String value.
     * @param speedStrValue used during instantiation.
     */
    public void setSpeedStrValue(String speedStrValue) throws JNCException {
        setSpeedStrValue(new YangString(speedStrValue));
    }

    /**
     * Unsets the value for child leaf "speedStr".
     */
    public void unsetSpeedStrValue() throws JNCException {
        delete("speedStr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "speedStr" leaf will not have a value.
     */
    public void addSpeedStr() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "speedStr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "speedStr" with operation "replace".
     */
    public void markSpeedStrReplace() throws JNCException {
        markLeafReplace("speedStr");
    }

    /**
     * Marks the leaf "speedStr" with operation "merge".
     */
    public void markSpeedStrMerge() throws JNCException {
        markLeafMerge("speedStr");
    }

    /**
     * Marks the leaf "speedStr" with operation "create".
     */
    public void markSpeedStrCreate() throws JNCException {
        markLeafCreate("speedStr");
    }

    /**
     * Marks the leaf "speedStr" with operation "delete".
     */
    public void markSpeedStrDelete() throws JNCException {
        markLeafDelete("speedStr");
    }

    /* Access methods for optional leaf child: "mtu". */

    /**
     * Gets the value for child leaf "mtu".
     * @return The value of the leaf.
     */
    public YangString getMtuValue() throws JNCException {
        return (YangString)getValue("mtu");
    }

    /**
     * Sets the value for child leaf "mtu",
     * using instance of generated typedef class.
     * @param mtuValue The value to set.
     * @param mtuValue used during instantiation.
     */
    public void setMtuValue(YangString mtuValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "mtu",
            mtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mtu",
     * using a String value.
     * @param mtuValue used during instantiation.
     */
    public void setMtuValue(String mtuValue) throws JNCException {
        setMtuValue(new YangString(mtuValue));
    }

    /**
     * Unsets the value for child leaf "mtu".
     */
    public void unsetMtuValue() throws JNCException {
        delete("mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mtu" leaf will not have a value.
     */
    public void addMtu() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mtu" with operation "replace".
     */
    public void markMtuReplace() throws JNCException {
        markLeafReplace("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "merge".
     */
    public void markMtuMerge() throws JNCException {
        markLeafMerge("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "create".
     */
    public void markMtuCreate() throws JNCException {
        markLeafCreate("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "delete".
     */
    public void markMtuDelete() throws JNCException {
        markLeafDelete("mtu");
    }

    /* Access methods for optional leaf child: "mtuStr". */

    /**
     * Gets the value for child leaf "mtuStr".
     * @return The value of the leaf.
     */
    public YangString getMtuStrValue() throws JNCException {
        return (YangString)getValue("mtuStr");
    }

    /**
     * Sets the value for child leaf "mtuStr",
     * using instance of generated typedef class.
     * @param mtuStrValue The value to set.
     * @param mtuStrValue used during instantiation.
     */
    public void setMtuStrValue(YangString mtuStrValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "mtuStr",
            mtuStrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mtuStr",
     * using a String value.
     * @param mtuStrValue used during instantiation.
     */
    public void setMtuStrValue(String mtuStrValue) throws JNCException {
        setMtuStrValue(new YangString(mtuStrValue));
    }

    /**
     * Unsets the value for child leaf "mtuStr".
     */
    public void unsetMtuStrValue() throws JNCException {
        delete("mtuStr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mtuStr" leaf will not have a value.
     */
    public void addMtuStr() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "mtuStr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mtuStr" with operation "replace".
     */
    public void markMtuStrReplace() throws JNCException {
        markLeafReplace("mtuStr");
    }

    /**
     * Marks the leaf "mtuStr" with operation "merge".
     */
    public void markMtuStrMerge() throws JNCException {
        markLeafMerge("mtuStr");
    }

    /**
     * Marks the leaf "mtuStr" with operation "create".
     */
    public void markMtuStrCreate() throws JNCException {
        markLeafCreate("mtuStr");
    }

    /**
     * Marks the leaf "mtuStr" with operation "delete".
     */
    public void markMtuStrDelete() throws JNCException {
        markLeafDelete("mtuStr");
    }

    /* Access methods for optional leaf child: "physAddr". */

    /**
     * Gets the value for child leaf "physAddr".
     * @return The value of the leaf.
     */
    public YangString getPhysAddrValue() throws JNCException {
        return (YangString)getValue("physAddr");
    }

    /**
     * Sets the value for child leaf "physAddr",
     * using instance of generated typedef class.
     * @param physAddrValue The value to set.
     * @param physAddrValue used during instantiation.
     */
    public void setPhysAddrValue(YangString physAddrValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "physAddr",
            physAddrValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "physAddr",
     * using a String value.
     * @param physAddrValue used during instantiation.
     */
    public void setPhysAddrValue(String physAddrValue) throws JNCException {
        setPhysAddrValue(new YangString(physAddrValue));
    }

    /**
     * Unsets the value for child leaf "physAddr".
     */
    public void unsetPhysAddrValue() throws JNCException {
        delete("physAddr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "physAddr" leaf will not have a value.
     */
    public void addPhysAddr() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "physAddr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "physAddr" with operation "replace".
     */
    public void markPhysAddrReplace() throws JNCException {
        markLeafReplace("physAddr");
    }

    /**
     * Marks the leaf "physAddr" with operation "merge".
     */
    public void markPhysAddrMerge() throws JNCException {
        markLeafMerge("physAddr");
    }

    /**
     * Marks the leaf "physAddr" with operation "create".
     */
    public void markPhysAddrCreate() throws JNCException {
        markLeafCreate("physAddr");
    }

    /**
     * Marks the leaf "physAddr" with operation "delete".
     */
    public void markPhysAddrDelete() throws JNCException {
        markLeafDelete("physAddr");
    }

    /* Access methods for container child: "logicalInterfaces". */

    /**
     * Adds container entry "logicalInterfaces", using an existing object.
     * @param logicalInterfaces The object to add.
     * @return The added child.
     */
    public LogicalInterfaces addLogicalInterfaces(LogicalInterfaces logicalInterfaces)
            throws JNCException {
        this.logicalInterfaces = logicalInterfaces;
        insertChild(logicalInterfaces, childrenNames());
        return logicalInterfaces;
    }

    /**
     * Adds container entry "logicalInterfaces".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LogicalInterfaces addLogicalInterfaces() throws JNCException {
        LogicalInterfaces logicalInterfaces = new LogicalInterfaces();
        this.logicalInterfaces = logicalInterfaces;
        insertChild(logicalInterfaces, childrenNames());
        return logicalInterfaces;
    }

    /**
     * Deletes container entry "logicalInterfaces".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLogicalInterfaces() throws JNCException {
        this.logicalInterfaces = null;
        String path = "logicalInterfaces";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof LogicalInterfaces) logicalInterfaces = (LogicalInterfaces)child;
    }

}
