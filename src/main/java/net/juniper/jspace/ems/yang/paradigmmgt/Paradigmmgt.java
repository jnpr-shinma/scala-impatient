/* 
 * @(#)Paradigmmgt.java        1.0 26/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "paradigmmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.paradigmmgt;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;

import net.juniper.jspace.ems.yang.paradigmmgt.Paramgt;
import net.juniper.jspace.ems.yang.paradigmmgt.paradigmmgt.Modules;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/paradigm/1.0
 * generated to "src/net/juniper/jspace/ems/yang/paradigmmgt/paradigmmgt"
 * <p>
 * See line 15 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/paradigmmgt.yang
 *
 * @version 1.0 2014-12-26
 * @author Auto Generated
 */
public class Paradigmmgt extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("paradigmmgt/paradigmmgt");

    static {
        Paramgt.enable();
    }

    /**
     * Field for child container "modules".
     */
    public Modules modules = null;

    /**
     * Constructor for an empty Paradigmmgt object.
     */
    public Paradigmmgt() {
        super(Paramgt.NAMESPACE, "paradigmmgt");
        setDefaultPrefix();
        setPrefix(Paramgt.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Paradigmmgt clone() {
        return (Paradigmmgt)cloneContent(new Paradigmmgt());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Paradigmmgt cloneShallow() {
        return (Paradigmmgt)cloneShallowContent(new Paradigmmgt());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "modules",
        };
    }

    /* Access methods for container child: "modules". */

    /**
     * Adds container entry "modules", using an existing object.
     * @param modules The object to add.
     * @return The added child.
     */
    public Modules addModules(Modules modules) throws JNCException {
        this.modules = modules;
        insertChild(modules, childrenNames());
        return modules;
    }

    /**
     * Adds container entry "modules".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Modules addModules() throws JNCException {
        Modules modules = new Modules();
        this.modules = modules;
        insertChild(modules, childrenNames());
        return modules;
    }

    /**
     * Deletes container entry "modules".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteModules() throws JNCException {
        this.modules = null;
        String path = "modules";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Modules) modules = (Modules)child;
    }

}
