/* 
 * @(#)Device.java        1.0 30/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "devmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.devmgt.devicemgt.devices;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.devmgt.Devmgt;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.ConfigInfo;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.Interfaces;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.Inventories;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.MgtConnection;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.Redundancy;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.System;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/test/1.0
 * generated to "src/net/juniper/jspace/ems/yang/devmgt/devicemgt/devices/device"
 * <p>
 * See line 22 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/devmgt.yang
 *
 * @version 1.0 2014-12-30
 * @author Auto Generated
 */
public class Device extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("devmgt/devicemgt/devices/device");
    public static final Tagpath tqqp = new Tagpath("devmgt/devicemgt/devices/device");

    static {
        Devmgt.enable();
    }

    /**
     * Field for child container "system".
     */
    public System system = null;

    /**
     * Field for child container "redundancy".
     */
    public Redundancy redundancy = null;

    /**
     * Field for child container "configInfo".
     */
    public ConfigInfo configInfo = null;

    /**
     * Field for child container "mgtConnection".
     */
    public MgtConnection mgtConnection = null;

    /**
     * Field for child container "interfaces".
     */
    public Interfaces interfaces = null;

    /**
     * Field for child container "inventories".
     */
    public Inventories inventories = null;

    /**
     * Constructor for an empty Device object.
     */
    public Device() {
        super(Devmgt.NAMESPACE, "device");
    }

    /**
     * Constructor for an initialized Device object,
     * 
     * @param idValue Key argument of child.
     */
    public Device(YangUInt32 idValue) throws JNCException {
        super(Devmgt.NAMESPACE, "device");
        Leaf id = new Leaf(Devmgt.NAMESPACE, "id");
        id.setValue(idValue);
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized Device object,
     * with String keys.
     * @param idValue Key argument of child.
     */
    public Device(String idValue) throws JNCException {
        super(Devmgt.NAMESPACE, "device");
        Leaf id = new Leaf(Devmgt.NAMESPACE, "id");
        id.setValue(new YangUInt32(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized Device object,
     * with keys of built in Java types.
     * @param idValue Key argument of child.
     */
    public Device(long idValue) throws JNCException {
        super(Devmgt.NAMESPACE, "device");
        Leaf id = new Leaf(Devmgt.NAMESPACE, "id");
        id.setValue(new YangUInt32(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Device clone() {
        Device copy;
        try {
            copy = new Device(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Device)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Device cloneShallow() {
        Device copy;
        try {
            copy = new Device(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Device)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "id",
            "domainId",
            "system",
            "redundancy",
            "configInfo",
            "mgtConnection",
            "interfaces",
            "inventories",
        };
    }

    /* Access methods for leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public YangUInt32 getIdValue() throws JNCException {
        return (YangUInt32)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(YangUInt32 idValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using Java primitive values.
     * @param idValue used during instantiation.
     */
    public void setIdValue(long idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "domainId". */

    /**
     * Gets the value for child leaf "domainId".
     * @return The value of the leaf.
     */
    public YangUInt32 getDomainIdValue() throws JNCException {
        return (YangUInt32)getValue("domainId");
    }

    /**
     * Sets the value for child leaf "domainId",
     * using instance of generated typedef class.
     * @param domainIdValue The value to set.
     * @param domainIdValue used during instantiation.
     */
    public void setDomainIdValue(YangUInt32 domainIdValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "domainId",
            domainIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "domainId",
     * using Java primitive values.
     * @param domainIdValue used during instantiation.
     */
    public void setDomainIdValue(long domainIdValue) throws JNCException {
        setDomainIdValue(new YangUInt32(domainIdValue));
    }

    /**
     * Sets the value for child leaf "domainId",
     * using a String value.
     * @param domainIdValue used during instantiation.
     */
    public void setDomainIdValue(String domainIdValue) throws JNCException {
        setDomainIdValue(new YangUInt32(domainIdValue));
    }

    /**
     * Unsets the value for child leaf "domainId".
     */
    public void unsetDomainIdValue() throws JNCException {
        delete("domainId");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "domainId" leaf will not have a value.
     */
    public void addDomainId() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "domainId",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "domainId" with operation "replace".
     */
    public void markDomainIdReplace() throws JNCException {
        markLeafReplace("domainId");
    }

    /**
     * Marks the leaf "domainId" with operation "merge".
     */
    public void markDomainIdMerge() throws JNCException {
        markLeafMerge("domainId");
    }

    /**
     * Marks the leaf "domainId" with operation "create".
     */
    public void markDomainIdCreate() throws JNCException {
        markLeafCreate("domainId");
    }

    /**
     * Marks the leaf "domainId" with operation "delete".
     */
    public void markDomainIdDelete() throws JNCException {
        markLeafDelete("domainId");
    }

    /* Access methods for container child: "system". */

    /**
     * Adds container entry "system", using an existing object.
     * @param system The object to add.
     * @return The added child.
     */
    public System addSystem(System system) throws JNCException {
        this.system = system;
        insertChild(system, childrenNames());
        return system;
    }

    /**
     * Adds container entry "system".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public System addSystem() throws JNCException {
        System system = new System();
        this.system = system;
        insertChild(system, childrenNames());
        return system;
    }

    /**
     * Deletes container entry "system".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSystem() throws JNCException {
        this.system = null;
        String path = "system";
        return delete(path);
    }

    /* Access methods for container child: "redundancy". */

    /**
     * Adds container entry "redundancy", using an existing object.
     * @param redundancy The object to add.
     * @return The added child.
     */
    public Redundancy addRedundancy(Redundancy redundancy) throws JNCException {
        this.redundancy = redundancy;
        insertChild(redundancy, childrenNames());
        return redundancy;
    }

    /**
     * Adds container entry "redundancy".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Redundancy addRedundancy() throws JNCException {
        Redundancy redundancy = new Redundancy();
        this.redundancy = redundancy;
        insertChild(redundancy, childrenNames());
        return redundancy;
    }

    /**
     * Deletes container entry "redundancy".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteRedundancy() throws JNCException {
        this.redundancy = null;
        String path = "redundancy";
        return delete(path);
    }

    /* Access methods for container child: "configInfo". */

    /**
     * Adds container entry "configInfo", using an existing object.
     * @param configInfo The object to add.
     * @return The added child.
     */
    public ConfigInfo addConfigInfo(ConfigInfo configInfo) throws JNCException {
        this.configInfo = configInfo;
        insertChild(configInfo, childrenNames());
        return configInfo;
    }

    /**
     * Adds container entry "configInfo".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ConfigInfo addConfigInfo() throws JNCException {
        ConfigInfo configInfo = new ConfigInfo();
        this.configInfo = configInfo;
        insertChild(configInfo, childrenNames());
        return configInfo;
    }

    /**
     * Deletes container entry "configInfo".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConfigInfo() throws JNCException {
        this.configInfo = null;
        String path = "configInfo";
        return delete(path);
    }

    /* Access methods for container child: "mgtConnection". */

    /**
     * Adds container entry "mgtConnection", using an existing object.
     * @param mgtConnection The object to add.
     * @return The added child.
     */
    public MgtConnection addMgtConnection(MgtConnection mgtConnection)
            throws JNCException {
        this.mgtConnection = mgtConnection;
        insertChild(mgtConnection, childrenNames());
        return mgtConnection;
    }

    /**
     * Adds container entry "mgtConnection".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public MgtConnection addMgtConnection() throws JNCException {
        MgtConnection mgtConnection = new MgtConnection();
        this.mgtConnection = mgtConnection;
        insertChild(mgtConnection, childrenNames());
        return mgtConnection;
    }

    /**
     * Deletes container entry "mgtConnection".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMgtConnection() throws JNCException {
        this.mgtConnection = null;
        String path = "mgtConnection";
        return delete(path);
    }

    /* Access methods for container child: "interfaces". */

    /**
     * Adds container entry "interfaces", using an existing object.
     * @param interfaces The object to add.
     * @return The added child.
     */
    public Interfaces addInterfaces(Interfaces interfaces) throws JNCException {
        this.interfaces = interfaces;
        insertChild(interfaces, childrenNames());
        return interfaces;
    }

    /**
     * Adds container entry "interfaces".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Interfaces addInterfaces() throws JNCException {
        Interfaces interfaces = new Interfaces();
        this.interfaces = interfaces;
        insertChild(interfaces, childrenNames());
        return interfaces;
    }

    /**
     * Deletes container entry "interfaces".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteInterfaces() throws JNCException {
        this.interfaces = null;
        String path = "interfaces";
        return delete(path);
    }

    /* Access methods for container child: "inventories". */

    /**
     * Adds container entry "inventories", using an existing object.
     * @param inventories The object to add.
     * @return The added child.
     */
    public Inventories addInventories(Inventories inventories)
            throws JNCException {
        this.inventories = inventories;
        insertChild(inventories, childrenNames());
        return inventories;
    }

    /**
     * Adds container entry "inventories".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Inventories addInventories() throws JNCException {
        Inventories inventories = new Inventories();
        this.inventories = inventories;
        insertChild(inventories, childrenNames());
        return inventories;
    }

    /**
     * Deletes container entry "inventories".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteInventories() throws JNCException {
        this.inventories = null;
        String path = "inventories";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof System) system = (System)child;
        else if (child instanceof Redundancy) redundancy = (Redundancy)child;
        else if (child instanceof ConfigInfo) configInfo = (ConfigInfo)child;
        else if (child instanceof MgtConnection) mgtConnection = (MgtConnection)child;
        else if (child instanceof Interfaces) interfaces = (Interfaces)child;
        else if (child instanceof Inventories) inventories = (Inventories)child;
    }

}
