/* 
 * @(#)Tasks.java        1.0 26/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "paradigmmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.paradigmmgt.paradigmmgt.modules.module.workspaces.workspace;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.paradigmmgt.Paramgt;
import net.juniper.jspace.ems.yang.paradigmmgt.paradigmmgt.modules.module.workspaces.workspace.tasks.Task;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/paradigm/1.0
 * generated to "src/net/juniper/jspace/ems/yang/paradigmmgt/paradigmmgt/modules/module/workspaces/workspace/tasks"
 * <p>
 * See line 34 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/paradigmmgt.yang
 *
 * @version 1.0 2014-12-26
 * @author Auto Generated
 */
public class Tasks extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("paradigmmgt/paradigmmgt/modules/module/workspaces/workspace/tasks");

    static {
        Paramgt.enable();
    }

    /**
     * Constructor for an empty Tasks object.
     */
    public Tasks() {
        super(Paramgt.NAMESPACE, "tasks");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Tasks clone() {
        return (Tasks)cloneContent(new Tasks());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Tasks cloneShallow() {
        return (Tasks)cloneShallowContent(new Tasks());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "task",
        };
    }

    /* Access methods for list child: "task". */

    /**
     * Gets list entry "task", with specified keys.
     * @param idValue Key argument of child.
     */
    public Task getTask(YangUInt32 idValue) throws JNCException {
        String path = "task[id='" + idValue + "']";
        return (Task)searchOne(path);
    }

    /**
     * Gets list entry "task", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public Task getTask(String idValue) throws JNCException {
        String path = "task[id='" + idValue + "']";
        return (Task)searchOne(path);
    }

    /**
     * Iterator method for the list "task".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator taskIterator() {
        return new ElementChildrenIterator(children, "task");
    }

    /**
     * Adds list entry "task", using an existing object.
     * @param task The object to add.
     * @return The added child.
     */
    public Task addTask(Task task) throws JNCException {
        insertChild(task, childrenNames());
        return task;
    }

    /**
     * Adds list entry "task", with specified keys.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public Task addTask(YangUInt32 idValue) throws JNCException {
        Task task = new Task(idValue);
        return addTask(task);
    }

    /**
     * Adds list entry "task", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public Task addTask(String idValue) throws JNCException {
        Task task = new Task(idValue);
        return addTask(task);
    }

    /**
     * Adds list entry "task".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Task addTask() throws JNCException {
        Task task = new Task();
        insertChild(task, childrenNames());
        return task;
    }

    /**
     * Deletes list entry "task", with specified keys.
     * @param idValue Key argument of child.
     */
    public void deleteTask(YangUInt32 idValue) throws JNCException {
        String path = "task[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "task", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public void deleteTask(String idValue) throws JNCException {
        String path = "task[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
