/* 
 * @(#)Domain.java        1.0 26/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "usermgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.usermgt.users.user.domains;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.usermgt.Usermgt;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/usermgt/1.0
 * generated to "src/net/juniper/jspace/ems/yang/usermgt/users/user/domains/domain"
 * <p>
 * See line 34 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/usermgt.yang
 *
 * @version 1.0 2014-12-26
 * @author Auto Generated
 */
public class Domain extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("usermgt/users/user/domains/domain");

    static {
        Usermgt.enable();
    }

    /**
     * Constructor for an empty Domain object.
     */
    public Domain() {
        super(Usermgt.NAMESPACE, "domain");
    }

    /**
     * Constructor for an initialized Domain object,
     * 
     * @param idValue Key argument of child.
     */
    public Domain(YangUInt32 idValue) throws JNCException {
        super(Usermgt.NAMESPACE, "domain");
        Leaf id = new Leaf(Usermgt.NAMESPACE, "id");
        id.setValue(idValue);
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized Domain object,
     * with String keys.
     * @param idValue Key argument of child.
     */
    public Domain(String idValue) throws JNCException {
        super(Usermgt.NAMESPACE, "domain");
        Leaf id = new Leaf(Usermgt.NAMESPACE, "id");
        id.setValue(new YangUInt32(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized Domain object,
     * with keys of built in Java types.
     * @param idValue Key argument of child.
     */
    public Domain(long idValue) throws JNCException {
        super(Usermgt.NAMESPACE, "domain");
        Leaf id = new Leaf(Usermgt.NAMESPACE, "id");
        id.setValue(new YangUInt32(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Domain clone() {
        Domain copy;
        try {
            copy = new Domain(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Domain)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Domain cloneShallow() {
        Domain copy;
        try {
            copy = new Domain(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Domain)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "id",
            "parentDomainId",
            "name",
        };
    }

    /* Access methods for leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public YangUInt32 getIdValue() throws JNCException {
        return (YangUInt32)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(YangUInt32 idValue) throws JNCException {
        setLeafValue(Usermgt.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using Java primitive values.
     * @param idValue used during instantiation.
     */
    public void setIdValue(long idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new YangUInt32(idValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(Usermgt.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "parentDomainId". */

    /**
     * Gets the value for child leaf "parentDomainId".
     * @return The value of the leaf.
     */
    public YangUInt32 getParentDomainIdValue() throws JNCException {
        return (YangUInt32)getValue("parentDomainId");
    }

    /**
     * Sets the value for child leaf "parentDomainId",
     * using instance of generated typedef class.
     * @param parentDomainIdValue The value to set.
     * @param parentDomainIdValue used during instantiation.
     */
    public void setParentDomainIdValue(YangUInt32 parentDomainIdValue)
            throws JNCException {
        setLeafValue(Usermgt.NAMESPACE,
            "parentDomainId",
            parentDomainIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "parentDomainId",
     * using Java primitive values.
     * @param parentDomainIdValue used during instantiation.
     */
    public void setParentDomainIdValue(long parentDomainIdValue)
            throws JNCException {
        setParentDomainIdValue(new YangUInt32(parentDomainIdValue));
    }

    /**
     * Sets the value for child leaf "parentDomainId",
     * using a String value.
     * @param parentDomainIdValue used during instantiation.
     */
    public void setParentDomainIdValue(String parentDomainIdValue)
            throws JNCException {
        setParentDomainIdValue(new YangUInt32(parentDomainIdValue));
    }

    /**
     * Unsets the value for child leaf "parentDomainId".
     */
    public void unsetParentDomainIdValue() throws JNCException {
        delete("parentDomainId");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "parentDomainId" leaf will not have a value.
     */
    public void addParentDomainId() throws JNCException {
        setLeafValue(Usermgt.NAMESPACE,
            "parentDomainId",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "parentDomainId" with operation "replace".
     */
    public void markParentDomainIdReplace() throws JNCException {
        markLeafReplace("parentDomainId");
    }

    /**
     * Marks the leaf "parentDomainId" with operation "merge".
     */
    public void markParentDomainIdMerge() throws JNCException {
        markLeafMerge("parentDomainId");
    }

    /**
     * Marks the leaf "parentDomainId" with operation "create".
     */
    public void markParentDomainIdCreate() throws JNCException {
        markLeafCreate("parentDomainId");
    }

    /**
     * Marks the leaf "parentDomainId" with operation "delete".
     */
    public void markParentDomainIdDelete() throws JNCException {
        markLeafDelete("parentDomainId");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Usermgt.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Usermgt.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
