/* 
 * @(#)Redundancy.java        1.0 30/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "devmgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device;

import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import net.juniper.jspace.ems.yang.devmgt.Devmgt;
import net.juniper.jspace.ems.yang.devmgt.devicemgt.devices.device.redundancy.Peer;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/test/1.0
 * generated to "src/net/juniper/jspace/ems/yang/devmgt/devicemgt/devices/device/redundancy"
 * <p>
 * See line 42 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/devmgt.yang
 *
 * @version 1.0 2014-12-30
 * @author Auto Generated
 */
public class Redundancy extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("devmgt/devicemgt/devices/device/redundancy");

    static {
        Devmgt.enable();
    }

    /**
     * Constructor for an empty Redundancy object.
     */
    public Redundancy() {
        super(Devmgt.NAMESPACE, "redundancy");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Redundancy clone() {
        return (Redundancy)cloneContent(new Redundancy());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Redundancy cloneShallow() {
        return (Redundancy)cloneShallowContent(new Redundancy());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "masterRE",
            "status",
            "peer",
        };
    }

    /* Access methods for optional leaf child: "masterRE". */

    /**
     * Gets the value for child leaf "masterRE".
     * @return The value of the leaf.
     */
    public YangString getMasterrEValue() throws JNCException {
        return (YangString)getValue("masterRE");
    }

    /**
     * Sets the value for child leaf "masterRE",
     * using instance of generated typedef class.
     * @param masterrEValue The value to set.
     * @param masterrEValue used during instantiation.
     */
    public void setMasterrEValue(YangString masterrEValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "masterRE",
            masterrEValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "masterRE",
     * using a String value.
     * @param masterrEValue used during instantiation.
     */
    public void setMasterrEValue(String masterrEValue) throws JNCException {
        setMasterrEValue(new YangString(masterrEValue));
    }

    /**
     * Unsets the value for child leaf "masterRE".
     */
    public void unsetMasterrEValue() throws JNCException {
        delete("masterRE");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "masterRE" leaf will not have a value.
     */
    public void addMasterrE() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "masterRE",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "masterRE" with operation "replace".
     */
    public void markMasterrEReplace() throws JNCException {
        markLeafReplace("masterrE");
    }

    /**
     * Marks the leaf "masterRE" with operation "merge".
     */
    public void markMasterrEMerge() throws JNCException {
        markLeafMerge("masterrE");
    }

    /**
     * Marks the leaf "masterRE" with operation "create".
     */
    public void markMasterrECreate() throws JNCException {
        markLeafCreate("masterrE");
    }

    /**
     * Marks the leaf "masterRE" with operation "delete".
     */
    public void markMasterrEDelete() throws JNCException {
        markLeafDelete("masterrE");
    }

    /* Access methods for optional leaf child: "status". */

    /**
     * Gets the value for child leaf "status".
     * @return The value of the leaf.
     */
    public YangString getStatusValue() throws JNCException {
        return (YangString)getValue("status");
    }

    /**
     * Sets the value for child leaf "status",
     * using instance of generated typedef class.
     * @param statusValue The value to set.
     * @param statusValue used during instantiation.
     */
    public void setStatusValue(YangString statusValue) throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "status",
            statusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "status",
     * using a String value.
     * @param statusValue used during instantiation.
     */
    public void setStatusValue(String statusValue) throws JNCException {
        setStatusValue(new YangString(statusValue));
    }

    /**
     * Unsets the value for child leaf "status".
     */
    public void unsetStatusValue() throws JNCException {
        delete("status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "status" leaf will not have a value.
     */
    public void addStatus() throws JNCException {
        setLeafValue(Devmgt.NAMESPACE,
            "status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "status" with operation "replace".
     */
    public void markStatusReplace() throws JNCException {
        markLeafReplace("status");
    }

    /**
     * Marks the leaf "status" with operation "merge".
     */
    public void markStatusMerge() throws JNCException {
        markLeafMerge("status");
    }

    /**
     * Marks the leaf "status" with operation "create".
     */
    public void markStatusCreate() throws JNCException {
        markLeafCreate("status");
    }

    /**
     * Marks the leaf "status" with operation "delete".
     */
    public void markStatusDelete() throws JNCException {
        markLeafDelete("status");
    }

    /* Access methods for list child: "peer". */

    /**
     * Gets list entry "peer", with specified keys.
     * @param idValue Key argument of child.
     */
    public Peer getPeer(YangUInt32 idValue) throws JNCException {
        String path = "peer[id='" + idValue + "']";
        return (Peer)searchOne(path);
    }

    /**
     * Gets list entry "peer", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public Peer getPeer(String idValue) throws JNCException {
        String path = "peer[id='" + idValue + "']";
        return (Peer)searchOne(path);
    }

    /**
     * Iterator method for the list "peer".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator peerIterator() {
        return new ElementChildrenIterator(children, "peer");
    }

    /**
     * Adds list entry "peer", using an existing object.
     * @param peer The object to add.
     * @return The added child.
     */
    public Peer addPeer(Peer peer) throws JNCException {
        insertChild(peer, childrenNames());
        return peer;
    }

    /**
     * Adds list entry "peer", with specified keys.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public Peer addPeer(YangUInt32 idValue) throws JNCException {
        Peer peer = new Peer(idValue);
        return addPeer(peer);
    }

    /**
     * Adds list entry "peer", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public Peer addPeer(String idValue) throws JNCException {
        Peer peer = new Peer(idValue);
        return addPeer(peer);
    }

    /**
     * Adds list entry "peer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Peer addPeer() throws JNCException {
        Peer peer = new Peer();
        insertChild(peer, childrenNames());
        return peer;
    }

    /**
     * Deletes list entry "peer", with specified keys.
     * @param idValue Key argument of child.
     */
    public void deletePeer(YangUInt32 idValue) throws JNCException {
        String path = "peer[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "peer", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public void deletePeer(String idValue) throws JNCException {
        String path = "peer[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
