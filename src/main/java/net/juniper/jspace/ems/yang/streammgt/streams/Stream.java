/* 
 * @(#)Stream.java        1.0 24/12/14
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "streammgt", revision: "2014-09-16".
 */

package net.juniper.jspace.ems.yang.streammgt.streams;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.Tagpath;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

import net.juniper.jspace.ems.yang.streammgt.Streammgt;

/**
 * This class represents an element from 
 * the namespace http://juniper.net/ns/space/streammgt/1.0
 * generated to "src/net/juniper/jspace/ems/yang/streammgt/streams/stream"
 * <p>
 * See line 16 in
 * /home/maxin/workspace/js-easy-rest/easy-rest-core/yang/streammgt.yang
 *
 * @version 1.0 2014-12-24
 * @author Auto Generated
 */
public class Stream extends YangElement {

    private static final long serialVersionUID = 1L;

    public static final Tagpath tagpath = new Tagpath("/streammgt/streams/stream");

    /**
     * Constructor for an empty Stream object.
     */
    public Stream() {
        super(Streammgt.NAMESPACE, "stream");
    }

    /**
     * Constructor for an initialized Stream object,
     * 
     * @param nameValue Key argument of child.
     */
    public Stream(YangString nameValue) throws JNCException {
        super(Streammgt.NAMESPACE, "stream");
        Leaf name = new Leaf(Streammgt.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized Stream object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public Stream(String nameValue) throws JNCException {
        super(Streammgt.NAMESPACE, "stream");
        Leaf name = new Leaf(Streammgt.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Stream clone() {
        Stream copy;
        try {
            copy = new Stream(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Stream)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Stream cloneShallow() {
        Stream copy;
        try {
            copy = new Stream(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Stream)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "description",
            "replaySupport",
            "replayLogCreationTime",
            "events",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public YangString getDescriptionValue() throws JNCException {
        return (YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(YangString descriptionValue)
            throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /* Access methods for optional leaf child: "replaySupport". */

    /**
     * Gets the value for child leaf "replaySupport".
     * @return The value of the leaf.
     */
    public YangString getReplaySupportValue() throws JNCException {
        return (YangString)getValue("replaySupport");
    }

    /**
     * Sets the value for child leaf "replaySupport",
     * using instance of generated typedef class.
     * @param replaySupportValue The value to set.
     * @param replaySupportValue used during instantiation.
     */
    public void setReplaySupportValue(YangString replaySupportValue)
            throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "replaySupport",
            replaySupportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "replaySupport",
     * using a String value.
     * @param replaySupportValue used during instantiation.
     */
    public void setReplaySupportValue(String replaySupportValue)
            throws JNCException {
        setReplaySupportValue(new YangString(replaySupportValue));
    }

    /**
     * Unsets the value for child leaf "replaySupport".
     */
    public void unsetReplaySupportValue() throws JNCException {
        delete("replaySupport");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "replaySupport" leaf will not have a value.
     */
    public void addReplaySupport() throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "replaySupport",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "replaySupport" with operation "replace".
     */
    public void markReplaySupportReplace() throws JNCException {
        markLeafReplace("replaySupport");
    }

    /**
     * Marks the leaf "replaySupport" with operation "merge".
     */
    public void markReplaySupportMerge() throws JNCException {
        markLeafMerge("replaySupport");
    }

    /**
     * Marks the leaf "replaySupport" with operation "create".
     */
    public void markReplaySupportCreate() throws JNCException {
        markLeafCreate("replaySupport");
    }

    /**
     * Marks the leaf "replaySupport" with operation "delete".
     */
    public void markReplaySupportDelete() throws JNCException {
        markLeafDelete("replaySupport");
    }

    /* Access methods for optional leaf child: "replayLogCreationTime". */

    /**
     * Gets the value for child leaf "replayLogCreationTime".
     * @return The value of the leaf.
     */
    public YangString getReplayLogCreationTimeValue() throws JNCException {
        return (YangString)getValue("replayLogCreationTime");
    }

    /**
     * Sets the value for child leaf "replayLogCreationTime",
     * using instance of generated typedef class.
     * @param replayLogCreationTimeValue The value to set.
     * @param replayLogCreationTimeValue used during instantiation.
     */
    public void setReplayLogCreationTimeValue(YangString replayLogCreationTimeValue)
            throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "replayLogCreationTime",
            replayLogCreationTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "replayLogCreationTime",
     * using a String value.
     * @param replayLogCreationTimeValue used during instantiation.
     */
    public void setReplayLogCreationTimeValue(String replayLogCreationTimeValue)
            throws JNCException {
        setReplayLogCreationTimeValue(new YangString(replayLogCreationTimeValue));
    }

    /**
     * Unsets the value for child leaf "replayLogCreationTime".
     */
    public void unsetReplayLogCreationTimeValue() throws JNCException {
        delete("replayLogCreationTime");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "replayLogCreationTime" leaf will not have a value.
     */
    public void addReplayLogCreationTime() throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "replayLogCreationTime",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "replayLogCreationTime" with operation "replace".
     */
    public void markReplayLogCreationTimeReplace() throws JNCException {
        markLeafReplace("replayLogCreationTime");
    }

    /**
     * Marks the leaf "replayLogCreationTime" with operation "merge".
     */
    public void markReplayLogCreationTimeMerge() throws JNCException {
        markLeafMerge("replayLogCreationTime");
    }

    /**
     * Marks the leaf "replayLogCreationTime" with operation "create".
     */
    public void markReplayLogCreationTimeCreate() throws JNCException {
        markLeafCreate("replayLogCreationTime");
    }

    /**
     * Marks the leaf "replayLogCreationTime" with operation "delete".
     */
    public void markReplayLogCreationTimeDelete() throws JNCException {
        markLeafDelete("replayLogCreationTime");
    }

    /* Access methods for optional leaf child: "events". */

    /**
     * Gets the value for child leaf "events".
     * @return The value of the leaf.
     */
    public YangString getEventsValue() throws JNCException {
        return (YangString)getValue("events");
    }

    /**
     * Sets the value for child leaf "events",
     * using instance of generated typedef class.
     * @param eventsValue The value to set.
     * @param eventsValue used during instantiation.
     */
    public void setEventsValue(YangString eventsValue) throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "events",
            eventsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "events",
     * using a String value.
     * @param eventsValue used during instantiation.
     */
    public void setEventsValue(String eventsValue) throws JNCException {
        setEventsValue(new YangString(eventsValue));
    }

    /**
     * Unsets the value for child leaf "events".
     */
    public void unsetEventsValue() throws JNCException {
        delete("events");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "events" leaf will not have a value.
     */
    public void addEvents() throws JNCException {
        setLeafValue(Streammgt.NAMESPACE,
            "events",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "events" with operation "replace".
     */
    public void markEventsReplace() throws JNCException {
        markLeafReplace("events");
    }

    /**
     * Marks the leaf "events" with operation "merge".
     */
    public void markEventsMerge() throws JNCException {
        markLeafMerge("events");
    }

    /**
     * Marks the leaf "events" with operation "create".
     */
    public void markEventsCreate() throws JNCException {
        markLeafCreate("events");
    }

    /**
     * Marks the leaf "events" with operation "delete".
     */
    public void markEventsDelete() throws JNCException {
        markLeafDelete("events");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
